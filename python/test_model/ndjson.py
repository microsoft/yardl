# This file was generated by the "yardl" tool. DO NOT EDIT.

# pyright: reportUnusedClass=false

import collections.abc
import datetime
import io
import typing

import numpy as np
import numpy.typing as npt

from .types import *
from .protocols import *
from . import _ndjson
from . import yardl_types as yardl

class _SmallBenchmarkRecordConverter(_ndjson.JsonConverter[SmallBenchmarkRecord, np.void]):
    def __init__(self) -> None:
        self._a_converter = _ndjson.float64_converter
        self._b_converter = _ndjson.float32_converter
        self._c_converter = _ndjson.float32_converter
        super().__init__(np.dtype([
            ("a", self._a_converter.overall_dtype()),
            ("b", self._b_converter.overall_dtype()),
            ("c", self._c_converter.overall_dtype()),
        ]))

    def to_json(self, value: SmallBenchmarkRecord) -> object:
        if not isinstance(value, SmallBenchmarkRecord):
            raise TypeError("Expected 'SmallBenchmarkRecord' instance")
        json_object = {}

        json_object["a"] = self._a_converter.to_json(value.a)
        json_object["b"] = self._b_converter.to_json(value.b)
        json_object["c"] = self._c_converter.to_json(value.c)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["a"] = self._a_converter.numpy_to_json(value["a"])
        json_object["b"] = self._b_converter.numpy_to_json(value["b"])
        json_object["c"] = self._c_converter.numpy_to_json(value["c"])
        return json_object

    def from_json(self, json_object: object) -> SmallBenchmarkRecord:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return SmallBenchmarkRecord(
            a=self._a_converter.from_json(json_object["a"],),
            b=self._b_converter.from_json(json_object["b"],),
            c=self._c_converter.from_json(json_object["c"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._a_converter.from_json_to_numpy(json_object["a"]),
            self._b_converter.from_json_to_numpy(json_object["b"]),
            self._c_converter.from_json_to_numpy(json_object["c"]),
        ) # type:ignore 


class _SimpleEncodingCountersConverter(_ndjson.JsonConverter[SimpleEncodingCounters, np.void]):
    def __init__(self) -> None:
        self._e1_converter = _ndjson.OptionalConverter(_ndjson.uint32_converter)
        self._e2_converter = _ndjson.OptionalConverter(_ndjson.uint32_converter)
        self._slice_converter = _ndjson.OptionalConverter(_ndjson.uint32_converter)
        self._repetition_converter = _ndjson.OptionalConverter(_ndjson.uint32_converter)
        super().__init__(np.dtype([
            ("e1", self._e1_converter.overall_dtype()),
            ("e2", self._e2_converter.overall_dtype()),
            ("slice", self._slice_converter.overall_dtype()),
            ("repetition", self._repetition_converter.overall_dtype()),
        ]))

    def to_json(self, value: SimpleEncodingCounters) -> object:
        if not isinstance(value, SimpleEncodingCounters):
            raise TypeError("Expected 'SimpleEncodingCounters' instance")
        json_object = {}

        if value.e1 is not None:
            json_object["e1"] = self._e1_converter.to_json(value.e1)
        if value.e2 is not None:
            json_object["e2"] = self._e2_converter.to_json(value.e2)
        if value.slice is not None:
            json_object["slice"] = self._slice_converter.to_json(value.slice)
        if value.repetition is not None:
            json_object["repetition"] = self._repetition_converter.to_json(value.repetition)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        if (field_val := value["e1"]) is not None:
            json_object["e1"] = self._e1_converter.numpy_to_json(field_val)
        if (field_val := value["e2"]) is not None:
            json_object["e2"] = self._e2_converter.numpy_to_json(field_val)
        if (field_val := value["slice"]) is not None:
            json_object["slice"] = self._slice_converter.numpy_to_json(field_val)
        if (field_val := value["repetition"]) is not None:
            json_object["repetition"] = self._repetition_converter.numpy_to_json(field_val)
        return json_object

    def from_json(self, json_object: object) -> SimpleEncodingCounters:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return SimpleEncodingCounters(
            e1=self._e1_converter.from_json(json_object.get("e1")),
            e2=self._e2_converter.from_json(json_object.get("e2")),
            slice=self._slice_converter.from_json(json_object.get("slice")),
            repetition=self._repetition_converter.from_json(json_object.get("repetition")),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._e1_converter.from_json_to_numpy(json_object.get("e1")),
            self._e2_converter.from_json_to_numpy(json_object.get("e2")),
            self._slice_converter.from_json_to_numpy(json_object.get("slice")),
            self._repetition_converter.from_json_to_numpy(json_object.get("repetition")),
        ) # type:ignore 


class _SimpleAcquisitionConverter(_ndjson.JsonConverter[SimpleAcquisition, np.void]):
    def __init__(self) -> None:
        self._flags_converter = _ndjson.uint64_converter
        self._idx_converter = _SimpleEncodingCountersConverter()
        self._data_converter = _ndjson.NDArrayConverter(_ndjson.complexfloat32_converter, 2)
        self._trajectory_converter = _ndjson.NDArrayConverter(_ndjson.float32_converter, 2)
        super().__init__(np.dtype([
            ("flags", self._flags_converter.overall_dtype()),
            ("idx", self._idx_converter.overall_dtype()),
            ("data", self._data_converter.overall_dtype()),
            ("trajectory", self._trajectory_converter.overall_dtype()),
        ]))

    def to_json(self, value: SimpleAcquisition) -> object:
        if not isinstance(value, SimpleAcquisition):
            raise TypeError("Expected 'SimpleAcquisition' instance")
        json_object = {}

        json_object["flags"] = self._flags_converter.to_json(value.flags)
        json_object["idx"] = self._idx_converter.to_json(value.idx)
        json_object["data"] = self._data_converter.to_json(value.data)
        json_object["trajectory"] = self._trajectory_converter.to_json(value.trajectory)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["flags"] = self._flags_converter.numpy_to_json(value["flags"])
        json_object["idx"] = self._idx_converter.numpy_to_json(value["idx"])
        json_object["data"] = self._data_converter.numpy_to_json(value["data"])
        json_object["trajectory"] = self._trajectory_converter.numpy_to_json(value["trajectory"])
        return json_object

    def from_json(self, json_object: object) -> SimpleAcquisition:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return SimpleAcquisition(
            flags=self._flags_converter.from_json(json_object["flags"],),
            idx=self._idx_converter.from_json(json_object["idx"],),
            data=self._data_converter.from_json(json_object["data"],),
            trajectory=self._trajectory_converter.from_json(json_object["trajectory"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._flags_converter.from_json_to_numpy(json_object["flags"]),
            self._idx_converter.from_json_to_numpy(json_object["idx"]),
            self._data_converter.from_json_to_numpy(json_object["data"]),
            self._trajectory_converter.from_json_to_numpy(json_object["trajectory"]),
        ) # type:ignore 


class _SimpleRecordConverter(_ndjson.JsonConverter[SimpleRecord, np.void]):
    def __init__(self) -> None:
        self._x_converter = _ndjson.int32_converter
        self._y_converter = _ndjson.int32_converter
        self._z_converter = _ndjson.int32_converter
        super().__init__(np.dtype([
            ("x", self._x_converter.overall_dtype()),
            ("y", self._y_converter.overall_dtype()),
            ("z", self._z_converter.overall_dtype()),
        ]))

    def to_json(self, value: SimpleRecord) -> object:
        if not isinstance(value, SimpleRecord):
            raise TypeError("Expected 'SimpleRecord' instance")
        json_object = {}

        json_object["x"] = self._x_converter.to_json(value.x)
        json_object["y"] = self._y_converter.to_json(value.y)
        json_object["z"] = self._z_converter.to_json(value.z)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["x"] = self._x_converter.numpy_to_json(value["x"])
        json_object["y"] = self._y_converter.numpy_to_json(value["y"])
        json_object["z"] = self._z_converter.numpy_to_json(value["z"])
        return json_object

    def from_json(self, json_object: object) -> SimpleRecord:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return SimpleRecord(
            x=self._x_converter.from_json(json_object["x"],),
            y=self._y_converter.from_json(json_object["y"],),
            z=self._z_converter.from_json(json_object["z"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._x_converter.from_json_to_numpy(json_object["x"]),
            self._y_converter.from_json_to_numpy(json_object["y"]),
            self._z_converter.from_json_to_numpy(json_object["z"]),
        ) # type:ignore 


class _RecordWithPrimitivesConverter(_ndjson.JsonConverter[RecordWithPrimitives, np.void]):
    def __init__(self) -> None:
        self._bool_field_converter = _ndjson.bool_converter
        self._int8_field_converter = _ndjson.int8_converter
        self._uint8_field_converter = _ndjson.uint8_converter
        self._int16_field_converter = _ndjson.int16_converter
        self._uint16_field_converter = _ndjson.uint16_converter
        self._int32_field_converter = _ndjson.int32_converter
        self._uint32_field_converter = _ndjson.uint32_converter
        self._int64_field_converter = _ndjson.int64_converter
        self._uint64_field_converter = _ndjson.uint64_converter
        self._size_field_converter = _ndjson.size_converter
        self._float32_field_converter = _ndjson.float32_converter
        self._float64_field_converter = _ndjson.float64_converter
        self._complexfloat32_field_converter = _ndjson.complexfloat32_converter
        self._complexfloat64_field_converter = _ndjson.complexfloat64_converter
        self._date_field_converter = _ndjson.date_converter
        self._time_field_converter = _ndjson.time_converter
        self._datetime_field_converter = _ndjson.datetime_converter
        super().__init__(np.dtype([
            ("bool_field", self._bool_field_converter.overall_dtype()),
            ("int8_field", self._int8_field_converter.overall_dtype()),
            ("uint8_field", self._uint8_field_converter.overall_dtype()),
            ("int16_field", self._int16_field_converter.overall_dtype()),
            ("uint16_field", self._uint16_field_converter.overall_dtype()),
            ("int32_field", self._int32_field_converter.overall_dtype()),
            ("uint32_field", self._uint32_field_converter.overall_dtype()),
            ("int64_field", self._int64_field_converter.overall_dtype()),
            ("uint64_field", self._uint64_field_converter.overall_dtype()),
            ("size_field", self._size_field_converter.overall_dtype()),
            ("float32_field", self._float32_field_converter.overall_dtype()),
            ("float64_field", self._float64_field_converter.overall_dtype()),
            ("complexfloat32_field", self._complexfloat32_field_converter.overall_dtype()),
            ("complexfloat64_field", self._complexfloat64_field_converter.overall_dtype()),
            ("date_field", self._date_field_converter.overall_dtype()),
            ("time_field", self._time_field_converter.overall_dtype()),
            ("datetime_field", self._datetime_field_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithPrimitives) -> object:
        if not isinstance(value, RecordWithPrimitives):
            raise TypeError("Expected 'RecordWithPrimitives' instance")
        json_object = {}

        json_object["boolField"] = self._bool_field_converter.to_json(value.bool_field)
        json_object["int8Field"] = self._int8_field_converter.to_json(value.int8_field)
        json_object["uint8Field"] = self._uint8_field_converter.to_json(value.uint8_field)
        json_object["int16Field"] = self._int16_field_converter.to_json(value.int16_field)
        json_object["uint16Field"] = self._uint16_field_converter.to_json(value.uint16_field)
        json_object["int32Field"] = self._int32_field_converter.to_json(value.int32_field)
        json_object["uint32Field"] = self._uint32_field_converter.to_json(value.uint32_field)
        json_object["int64Field"] = self._int64_field_converter.to_json(value.int64_field)
        json_object["uint64Field"] = self._uint64_field_converter.to_json(value.uint64_field)
        json_object["sizeField"] = self._size_field_converter.to_json(value.size_field)
        json_object["float32Field"] = self._float32_field_converter.to_json(value.float32_field)
        json_object["float64Field"] = self._float64_field_converter.to_json(value.float64_field)
        json_object["complexfloat32Field"] = self._complexfloat32_field_converter.to_json(value.complexfloat32_field)
        json_object["complexfloat64Field"] = self._complexfloat64_field_converter.to_json(value.complexfloat64_field)
        json_object["dateField"] = self._date_field_converter.to_json(value.date_field)
        json_object["timeField"] = self._time_field_converter.to_json(value.time_field)
        json_object["datetimeField"] = self._datetime_field_converter.to_json(value.datetime_field)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["boolField"] = self._bool_field_converter.numpy_to_json(value["bool_field"])
        json_object["int8Field"] = self._int8_field_converter.numpy_to_json(value["int8_field"])
        json_object["uint8Field"] = self._uint8_field_converter.numpy_to_json(value["uint8_field"])
        json_object["int16Field"] = self._int16_field_converter.numpy_to_json(value["int16_field"])
        json_object["uint16Field"] = self._uint16_field_converter.numpy_to_json(value["uint16_field"])
        json_object["int32Field"] = self._int32_field_converter.numpy_to_json(value["int32_field"])
        json_object["uint32Field"] = self._uint32_field_converter.numpy_to_json(value["uint32_field"])
        json_object["int64Field"] = self._int64_field_converter.numpy_to_json(value["int64_field"])
        json_object["uint64Field"] = self._uint64_field_converter.numpy_to_json(value["uint64_field"])
        json_object["sizeField"] = self._size_field_converter.numpy_to_json(value["size_field"])
        json_object["float32Field"] = self._float32_field_converter.numpy_to_json(value["float32_field"])
        json_object["float64Field"] = self._float64_field_converter.numpy_to_json(value["float64_field"])
        json_object["complexfloat32Field"] = self._complexfloat32_field_converter.numpy_to_json(value["complexfloat32_field"])
        json_object["complexfloat64Field"] = self._complexfloat64_field_converter.numpy_to_json(value["complexfloat64_field"])
        json_object["dateField"] = self._date_field_converter.numpy_to_json(value["date_field"])
        json_object["timeField"] = self._time_field_converter.numpy_to_json(value["time_field"])
        json_object["datetimeField"] = self._datetime_field_converter.numpy_to_json(value["datetime_field"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithPrimitives:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithPrimitives(
            bool_field=self._bool_field_converter.from_json(json_object["boolField"],),
            int8_field=self._int8_field_converter.from_json(json_object["int8Field"],),
            uint8_field=self._uint8_field_converter.from_json(json_object["uint8Field"],),
            int16_field=self._int16_field_converter.from_json(json_object["int16Field"],),
            uint16_field=self._uint16_field_converter.from_json(json_object["uint16Field"],),
            int32_field=self._int32_field_converter.from_json(json_object["int32Field"],),
            uint32_field=self._uint32_field_converter.from_json(json_object["uint32Field"],),
            int64_field=self._int64_field_converter.from_json(json_object["int64Field"],),
            uint64_field=self._uint64_field_converter.from_json(json_object["uint64Field"],),
            size_field=self._size_field_converter.from_json(json_object["sizeField"],),
            float32_field=self._float32_field_converter.from_json(json_object["float32Field"],),
            float64_field=self._float64_field_converter.from_json(json_object["float64Field"],),
            complexfloat32_field=self._complexfloat32_field_converter.from_json(json_object["complexfloat32Field"],),
            complexfloat64_field=self._complexfloat64_field_converter.from_json(json_object["complexfloat64Field"],),
            date_field=self._date_field_converter.from_json(json_object["dateField"],),
            time_field=self._time_field_converter.from_json(json_object["timeField"],),
            datetime_field=self._datetime_field_converter.from_json(json_object["datetimeField"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._bool_field_converter.from_json_to_numpy(json_object["boolField"]),
            self._int8_field_converter.from_json_to_numpy(json_object["int8Field"]),
            self._uint8_field_converter.from_json_to_numpy(json_object["uint8Field"]),
            self._int16_field_converter.from_json_to_numpy(json_object["int16Field"]),
            self._uint16_field_converter.from_json_to_numpy(json_object["uint16Field"]),
            self._int32_field_converter.from_json_to_numpy(json_object["int32Field"]),
            self._uint32_field_converter.from_json_to_numpy(json_object["uint32Field"]),
            self._int64_field_converter.from_json_to_numpy(json_object["int64Field"]),
            self._uint64_field_converter.from_json_to_numpy(json_object["uint64Field"]),
            self._size_field_converter.from_json_to_numpy(json_object["sizeField"]),
            self._float32_field_converter.from_json_to_numpy(json_object["float32Field"]),
            self._float64_field_converter.from_json_to_numpy(json_object["float64Field"]),
            self._complexfloat32_field_converter.from_json_to_numpy(json_object["complexfloat32Field"]),
            self._complexfloat64_field_converter.from_json_to_numpy(json_object["complexfloat64Field"]),
            self._date_field_converter.from_json_to_numpy(json_object["dateField"]),
            self._time_field_converter.from_json_to_numpy(json_object["timeField"]),
            self._datetime_field_converter.from_json_to_numpy(json_object["datetimeField"]),
        ) # type:ignore 


class _RecordWithPrimitiveAliasesConverter(_ndjson.JsonConverter[RecordWithPrimitiveAliases, np.void]):
    def __init__(self) -> None:
        self._byte_field_converter = _ndjson.uint8_converter
        self._int_field_converter = _ndjson.int32_converter
        self._uint_field_converter = _ndjson.uint32_converter
        self._long_field_converter = _ndjson.int64_converter
        self._ulong_field_converter = _ndjson.uint64_converter
        self._float_field_converter = _ndjson.float32_converter
        self._double_field_converter = _ndjson.float64_converter
        self._complexfloat_field_converter = _ndjson.complexfloat32_converter
        self._complexdouble_field_converter = _ndjson.complexfloat64_converter
        super().__init__(np.dtype([
            ("byte_field", self._byte_field_converter.overall_dtype()),
            ("int_field", self._int_field_converter.overall_dtype()),
            ("uint_field", self._uint_field_converter.overall_dtype()),
            ("long_field", self._long_field_converter.overall_dtype()),
            ("ulong_field", self._ulong_field_converter.overall_dtype()),
            ("float_field", self._float_field_converter.overall_dtype()),
            ("double_field", self._double_field_converter.overall_dtype()),
            ("complexfloat_field", self._complexfloat_field_converter.overall_dtype()),
            ("complexdouble_field", self._complexdouble_field_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithPrimitiveAliases) -> object:
        if not isinstance(value, RecordWithPrimitiveAliases):
            raise TypeError("Expected 'RecordWithPrimitiveAliases' instance")
        json_object = {}

        json_object["byteField"] = self._byte_field_converter.to_json(value.byte_field)
        json_object["intField"] = self._int_field_converter.to_json(value.int_field)
        json_object["uintField"] = self._uint_field_converter.to_json(value.uint_field)
        json_object["longField"] = self._long_field_converter.to_json(value.long_field)
        json_object["ulongField"] = self._ulong_field_converter.to_json(value.ulong_field)
        json_object["floatField"] = self._float_field_converter.to_json(value.float_field)
        json_object["doubleField"] = self._double_field_converter.to_json(value.double_field)
        json_object["complexfloatField"] = self._complexfloat_field_converter.to_json(value.complexfloat_field)
        json_object["complexdoubleField"] = self._complexdouble_field_converter.to_json(value.complexdouble_field)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["byteField"] = self._byte_field_converter.numpy_to_json(value["byte_field"])
        json_object["intField"] = self._int_field_converter.numpy_to_json(value["int_field"])
        json_object["uintField"] = self._uint_field_converter.numpy_to_json(value["uint_field"])
        json_object["longField"] = self._long_field_converter.numpy_to_json(value["long_field"])
        json_object["ulongField"] = self._ulong_field_converter.numpy_to_json(value["ulong_field"])
        json_object["floatField"] = self._float_field_converter.numpy_to_json(value["float_field"])
        json_object["doubleField"] = self._double_field_converter.numpy_to_json(value["double_field"])
        json_object["complexfloatField"] = self._complexfloat_field_converter.numpy_to_json(value["complexfloat_field"])
        json_object["complexdoubleField"] = self._complexdouble_field_converter.numpy_to_json(value["complexdouble_field"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithPrimitiveAliases:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithPrimitiveAliases(
            byte_field=self._byte_field_converter.from_json(json_object["byteField"],),
            int_field=self._int_field_converter.from_json(json_object["intField"],),
            uint_field=self._uint_field_converter.from_json(json_object["uintField"],),
            long_field=self._long_field_converter.from_json(json_object["longField"],),
            ulong_field=self._ulong_field_converter.from_json(json_object["ulongField"],),
            float_field=self._float_field_converter.from_json(json_object["floatField"],),
            double_field=self._double_field_converter.from_json(json_object["doubleField"],),
            complexfloat_field=self._complexfloat_field_converter.from_json(json_object["complexfloatField"],),
            complexdouble_field=self._complexdouble_field_converter.from_json(json_object["complexdoubleField"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._byte_field_converter.from_json_to_numpy(json_object["byteField"]),
            self._int_field_converter.from_json_to_numpy(json_object["intField"]),
            self._uint_field_converter.from_json_to_numpy(json_object["uintField"]),
            self._long_field_converter.from_json_to_numpy(json_object["longField"]),
            self._ulong_field_converter.from_json_to_numpy(json_object["ulongField"]),
            self._float_field_converter.from_json_to_numpy(json_object["floatField"]),
            self._double_field_converter.from_json_to_numpy(json_object["doubleField"]),
            self._complexfloat_field_converter.from_json_to_numpy(json_object["complexfloatField"]),
            self._complexdouble_field_converter.from_json_to_numpy(json_object["complexdoubleField"]),
        ) # type:ignore 


class _TupleWithRecordsConverter(_ndjson.JsonConverter[TupleWithRecords, np.void]):
    def __init__(self) -> None:
        self._a_converter = _SimpleRecordConverter()
        self._b_converter = _SimpleRecordConverter()
        super().__init__(np.dtype([
            ("a", self._a_converter.overall_dtype()),
            ("b", self._b_converter.overall_dtype()),
        ]))

    def to_json(self, value: TupleWithRecords) -> object:
        if not isinstance(value, TupleWithRecords):
            raise TypeError("Expected 'TupleWithRecords' instance")
        json_object = {}

        json_object["a"] = self._a_converter.to_json(value.a)
        json_object["b"] = self._b_converter.to_json(value.b)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["a"] = self._a_converter.numpy_to_json(value["a"])
        json_object["b"] = self._b_converter.numpy_to_json(value["b"])
        return json_object

    def from_json(self, json_object: object) -> TupleWithRecords:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return TupleWithRecords(
            a=self._a_converter.from_json(json_object["a"],),
            b=self._b_converter.from_json(json_object["b"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._a_converter.from_json_to_numpy(json_object["a"]),
            self._b_converter.from_json_to_numpy(json_object["b"]),
        ) # type:ignore 


class _RecordWithVectorsConverter(_ndjson.JsonConverter[RecordWithVectors, np.void]):
    def __init__(self) -> None:
        self._default_vector_converter = _ndjson.VectorConverter(_ndjson.int32_converter)
        self._default_vector_fixed_length_converter = _ndjson.FixedVectorConverter(_ndjson.int32_converter, 3)
        self._vector_of_vectors_converter = _ndjson.VectorConverter(_ndjson.FixedVectorConverter(_ndjson.int32_converter, 2))
        super().__init__(np.dtype([
            ("default_vector", self._default_vector_converter.overall_dtype()),
            ("default_vector_fixed_length", self._default_vector_fixed_length_converter.overall_dtype()),
            ("vector_of_vectors", self._vector_of_vectors_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithVectors) -> object:
        if not isinstance(value, RecordWithVectors):
            raise TypeError("Expected 'RecordWithVectors' instance")
        json_object = {}

        json_object["defaultVector"] = self._default_vector_converter.to_json(value.default_vector)
        json_object["defaultVectorFixedLength"] = self._default_vector_fixed_length_converter.to_json(value.default_vector_fixed_length)
        json_object["vectorOfVectors"] = self._vector_of_vectors_converter.to_json(value.vector_of_vectors)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["defaultVector"] = self._default_vector_converter.numpy_to_json(value["default_vector"])
        json_object["defaultVectorFixedLength"] = self._default_vector_fixed_length_converter.numpy_to_json(value["default_vector_fixed_length"])
        json_object["vectorOfVectors"] = self._vector_of_vectors_converter.numpy_to_json(value["vector_of_vectors"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithVectors:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithVectors(
            default_vector=self._default_vector_converter.from_json(json_object["defaultVector"],),
            default_vector_fixed_length=self._default_vector_fixed_length_converter.from_json(json_object["defaultVectorFixedLength"],),
            vector_of_vectors=self._vector_of_vectors_converter.from_json(json_object["vectorOfVectors"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._default_vector_converter.from_json_to_numpy(json_object["defaultVector"]),
            self._default_vector_fixed_length_converter.from_json_to_numpy(json_object["defaultVectorFixedLength"]),
            self._vector_of_vectors_converter.from_json_to_numpy(json_object["vectorOfVectors"]),
        ) # type:ignore 


class _RecordWithVectorOfTimesConverter(_ndjson.JsonConverter[RecordWithVectorOfTimes, np.void]):
    def __init__(self) -> None:
        self._times_converter = _ndjson.VectorConverter(_ndjson.time_converter)
        super().__init__(np.dtype([
            ("times", self._times_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithVectorOfTimes) -> object:
        if not isinstance(value, RecordWithVectorOfTimes):
            raise TypeError("Expected 'RecordWithVectorOfTimes' instance")
        json_object = {}

        json_object["times"] = self._times_converter.to_json(value.times)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["times"] = self._times_converter.numpy_to_json(value["times"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithVectorOfTimes:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithVectorOfTimes(
            times=self._times_converter.from_json(json_object["times"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._times_converter.from_json_to_numpy(json_object["times"]),
        ) # type:ignore 


class _RecordWithArraysConverter(_ndjson.JsonConverter[RecordWithArrays, np.void]):
    def __init__(self) -> None:
        self._default_array_converter = _ndjson.DynamicNDArrayConverter(_ndjson.int32_converter)
        self._default_array_with_empty_dimension_converter = _ndjson.DynamicNDArrayConverter(_ndjson.int32_converter)
        self._rank_1_array_converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 1)
        self._rank_2_array_converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        self._rank_2_array_with_named_dimensions_converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        self._rank_2_fixed_array_converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3, 4,))
        self._rank_2_fixed_array_with_named_dimensions_converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3, 4,))
        self._dynamic_array_converter = _ndjson.DynamicNDArrayConverter(_ndjson.int32_converter)
        self._array_of_vectors_converter = _ndjson.FixedNDArrayConverter(_ndjson.FixedVectorConverter(_ndjson.int32_converter, 4), (5,))
        super().__init__(np.dtype([
            ("default_array", self._default_array_converter.overall_dtype()),
            ("default_array_with_empty_dimension", self._default_array_with_empty_dimension_converter.overall_dtype()),
            ("rank_1_array", self._rank_1_array_converter.overall_dtype()),
            ("rank_2_array", self._rank_2_array_converter.overall_dtype()),
            ("rank_2_array_with_named_dimensions", self._rank_2_array_with_named_dimensions_converter.overall_dtype()),
            ("rank_2_fixed_array", self._rank_2_fixed_array_converter.overall_dtype()),
            ("rank_2_fixed_array_with_named_dimensions", self._rank_2_fixed_array_with_named_dimensions_converter.overall_dtype()),
            ("dynamic_array", self._dynamic_array_converter.overall_dtype()),
            ("array_of_vectors", self._array_of_vectors_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithArrays) -> object:
        if not isinstance(value, RecordWithArrays):
            raise TypeError("Expected 'RecordWithArrays' instance")
        json_object = {}

        json_object["defaultArray"] = self._default_array_converter.to_json(value.default_array)
        json_object["defaultArrayWithEmptyDimension"] = self._default_array_with_empty_dimension_converter.to_json(value.default_array_with_empty_dimension)
        json_object["rank1Array"] = self._rank_1_array_converter.to_json(value.rank_1_array)
        json_object["rank2Array"] = self._rank_2_array_converter.to_json(value.rank_2_array)
        json_object["rank2ArrayWithNamedDimensions"] = self._rank_2_array_with_named_dimensions_converter.to_json(value.rank_2_array_with_named_dimensions)
        json_object["rank2FixedArray"] = self._rank_2_fixed_array_converter.to_json(value.rank_2_fixed_array)
        json_object["rank2FixedArrayWithNamedDimensions"] = self._rank_2_fixed_array_with_named_dimensions_converter.to_json(value.rank_2_fixed_array_with_named_dimensions)
        json_object["dynamicArray"] = self._dynamic_array_converter.to_json(value.dynamic_array)
        json_object["arrayOfVectors"] = self._array_of_vectors_converter.to_json(value.array_of_vectors)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["defaultArray"] = self._default_array_converter.numpy_to_json(value["default_array"])
        json_object["defaultArrayWithEmptyDimension"] = self._default_array_with_empty_dimension_converter.numpy_to_json(value["default_array_with_empty_dimension"])
        json_object["rank1Array"] = self._rank_1_array_converter.numpy_to_json(value["rank_1_array"])
        json_object["rank2Array"] = self._rank_2_array_converter.numpy_to_json(value["rank_2_array"])
        json_object["rank2ArrayWithNamedDimensions"] = self._rank_2_array_with_named_dimensions_converter.numpy_to_json(value["rank_2_array_with_named_dimensions"])
        json_object["rank2FixedArray"] = self._rank_2_fixed_array_converter.numpy_to_json(value["rank_2_fixed_array"])
        json_object["rank2FixedArrayWithNamedDimensions"] = self._rank_2_fixed_array_with_named_dimensions_converter.numpy_to_json(value["rank_2_fixed_array_with_named_dimensions"])
        json_object["dynamicArray"] = self._dynamic_array_converter.numpy_to_json(value["dynamic_array"])
        json_object["arrayOfVectors"] = self._array_of_vectors_converter.numpy_to_json(value["array_of_vectors"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithArrays:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithArrays(
            default_array=self._default_array_converter.from_json(json_object["defaultArray"],),
            default_array_with_empty_dimension=self._default_array_with_empty_dimension_converter.from_json(json_object["defaultArrayWithEmptyDimension"],),
            rank_1_array=self._rank_1_array_converter.from_json(json_object["rank1Array"],),
            rank_2_array=self._rank_2_array_converter.from_json(json_object["rank2Array"],),
            rank_2_array_with_named_dimensions=self._rank_2_array_with_named_dimensions_converter.from_json(json_object["rank2ArrayWithNamedDimensions"],),
            rank_2_fixed_array=self._rank_2_fixed_array_converter.from_json(json_object["rank2FixedArray"],),
            rank_2_fixed_array_with_named_dimensions=self._rank_2_fixed_array_with_named_dimensions_converter.from_json(json_object["rank2FixedArrayWithNamedDimensions"],),
            dynamic_array=self._dynamic_array_converter.from_json(json_object["dynamicArray"],),
            array_of_vectors=self._array_of_vectors_converter.from_json(json_object["arrayOfVectors"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._default_array_converter.from_json_to_numpy(json_object["defaultArray"]),
            self._default_array_with_empty_dimension_converter.from_json_to_numpy(json_object["defaultArrayWithEmptyDimension"]),
            self._rank_1_array_converter.from_json_to_numpy(json_object["rank1Array"]),
            self._rank_2_array_converter.from_json_to_numpy(json_object["rank2Array"]),
            self._rank_2_array_with_named_dimensions_converter.from_json_to_numpy(json_object["rank2ArrayWithNamedDimensions"]),
            self._rank_2_fixed_array_converter.from_json_to_numpy(json_object["rank2FixedArray"]),
            self._rank_2_fixed_array_with_named_dimensions_converter.from_json_to_numpy(json_object["rank2FixedArrayWithNamedDimensions"]),
            self._dynamic_array_converter.from_json_to_numpy(json_object["dynamicArray"]),
            self._array_of_vectors_converter.from_json_to_numpy(json_object["arrayOfVectors"]),
        ) # type:ignore 


class _RecordWithArraysSimpleSyntaxConverter(_ndjson.JsonConverter[RecordWithArraysSimpleSyntax, np.void]):
    def __init__(self) -> None:
        self._default_array_converter = _ndjson.DynamicNDArrayConverter(_ndjson.int32_converter)
        self._default_array_with_empty_dimension_converter = _ndjson.DynamicNDArrayConverter(_ndjson.int32_converter)
        self._rank_1_array_converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 1)
        self._rank_2_array_converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        self._rank_2_array_with_named_dimensions_converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        self._rank_2_fixed_array_converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3, 4,))
        self._rank_2_fixed_array_with_named_dimensions_converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3, 4,))
        self._dynamic_array_converter = _ndjson.DynamicNDArrayConverter(_ndjson.int32_converter)
        self._array_of_vectors_converter = _ndjson.FixedNDArrayConverter(_ndjson.FixedVectorConverter(_ndjson.int32_converter, 4), (5,))
        super().__init__(np.dtype([
            ("default_array", self._default_array_converter.overall_dtype()),
            ("default_array_with_empty_dimension", self._default_array_with_empty_dimension_converter.overall_dtype()),
            ("rank_1_array", self._rank_1_array_converter.overall_dtype()),
            ("rank_2_array", self._rank_2_array_converter.overall_dtype()),
            ("rank_2_array_with_named_dimensions", self._rank_2_array_with_named_dimensions_converter.overall_dtype()),
            ("rank_2_fixed_array", self._rank_2_fixed_array_converter.overall_dtype()),
            ("rank_2_fixed_array_with_named_dimensions", self._rank_2_fixed_array_with_named_dimensions_converter.overall_dtype()),
            ("dynamic_array", self._dynamic_array_converter.overall_dtype()),
            ("array_of_vectors", self._array_of_vectors_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithArraysSimpleSyntax) -> object:
        if not isinstance(value, RecordWithArraysSimpleSyntax):
            raise TypeError("Expected 'RecordWithArraysSimpleSyntax' instance")
        json_object = {}

        json_object["defaultArray"] = self._default_array_converter.to_json(value.default_array)
        json_object["defaultArrayWithEmptyDimension"] = self._default_array_with_empty_dimension_converter.to_json(value.default_array_with_empty_dimension)
        json_object["rank1Array"] = self._rank_1_array_converter.to_json(value.rank_1_array)
        json_object["rank2Array"] = self._rank_2_array_converter.to_json(value.rank_2_array)
        json_object["rank2ArrayWithNamedDimensions"] = self._rank_2_array_with_named_dimensions_converter.to_json(value.rank_2_array_with_named_dimensions)
        json_object["rank2FixedArray"] = self._rank_2_fixed_array_converter.to_json(value.rank_2_fixed_array)
        json_object["rank2FixedArrayWithNamedDimensions"] = self._rank_2_fixed_array_with_named_dimensions_converter.to_json(value.rank_2_fixed_array_with_named_dimensions)
        json_object["dynamicArray"] = self._dynamic_array_converter.to_json(value.dynamic_array)
        json_object["arrayOfVectors"] = self._array_of_vectors_converter.to_json(value.array_of_vectors)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["defaultArray"] = self._default_array_converter.numpy_to_json(value["default_array"])
        json_object["defaultArrayWithEmptyDimension"] = self._default_array_with_empty_dimension_converter.numpy_to_json(value["default_array_with_empty_dimension"])
        json_object["rank1Array"] = self._rank_1_array_converter.numpy_to_json(value["rank_1_array"])
        json_object["rank2Array"] = self._rank_2_array_converter.numpy_to_json(value["rank_2_array"])
        json_object["rank2ArrayWithNamedDimensions"] = self._rank_2_array_with_named_dimensions_converter.numpy_to_json(value["rank_2_array_with_named_dimensions"])
        json_object["rank2FixedArray"] = self._rank_2_fixed_array_converter.numpy_to_json(value["rank_2_fixed_array"])
        json_object["rank2FixedArrayWithNamedDimensions"] = self._rank_2_fixed_array_with_named_dimensions_converter.numpy_to_json(value["rank_2_fixed_array_with_named_dimensions"])
        json_object["dynamicArray"] = self._dynamic_array_converter.numpy_to_json(value["dynamic_array"])
        json_object["arrayOfVectors"] = self._array_of_vectors_converter.numpy_to_json(value["array_of_vectors"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithArraysSimpleSyntax:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithArraysSimpleSyntax(
            default_array=self._default_array_converter.from_json(json_object["defaultArray"],),
            default_array_with_empty_dimension=self._default_array_with_empty_dimension_converter.from_json(json_object["defaultArrayWithEmptyDimension"],),
            rank_1_array=self._rank_1_array_converter.from_json(json_object["rank1Array"],),
            rank_2_array=self._rank_2_array_converter.from_json(json_object["rank2Array"],),
            rank_2_array_with_named_dimensions=self._rank_2_array_with_named_dimensions_converter.from_json(json_object["rank2ArrayWithNamedDimensions"],),
            rank_2_fixed_array=self._rank_2_fixed_array_converter.from_json(json_object["rank2FixedArray"],),
            rank_2_fixed_array_with_named_dimensions=self._rank_2_fixed_array_with_named_dimensions_converter.from_json(json_object["rank2FixedArrayWithNamedDimensions"],),
            dynamic_array=self._dynamic_array_converter.from_json(json_object["dynamicArray"],),
            array_of_vectors=self._array_of_vectors_converter.from_json(json_object["arrayOfVectors"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._default_array_converter.from_json_to_numpy(json_object["defaultArray"]),
            self._default_array_with_empty_dimension_converter.from_json_to_numpy(json_object["defaultArrayWithEmptyDimension"]),
            self._rank_1_array_converter.from_json_to_numpy(json_object["rank1Array"]),
            self._rank_2_array_converter.from_json_to_numpy(json_object["rank2Array"]),
            self._rank_2_array_with_named_dimensions_converter.from_json_to_numpy(json_object["rank2ArrayWithNamedDimensions"]),
            self._rank_2_fixed_array_converter.from_json_to_numpy(json_object["rank2FixedArray"]),
            self._rank_2_fixed_array_with_named_dimensions_converter.from_json_to_numpy(json_object["rank2FixedArrayWithNamedDimensions"]),
            self._dynamic_array_converter.from_json_to_numpy(json_object["dynamicArray"]),
            self._array_of_vectors_converter.from_json_to_numpy(json_object["arrayOfVectors"]),
        ) # type:ignore 


class _RecordWithOptionalFieldsConverter(_ndjson.JsonConverter[RecordWithOptionalFields, np.void]):
    def __init__(self) -> None:
        self._optional_int_converter = _ndjson.OptionalConverter(_ndjson.int32_converter)
        self._optional_int_alternate_syntax_converter = _ndjson.OptionalConverter(_ndjson.int32_converter)
        self._optional_time_converter = _ndjson.OptionalConverter(_ndjson.time_converter)
        super().__init__(np.dtype([
            ("optional_int", self._optional_int_converter.overall_dtype()),
            ("optional_int_alternate_syntax", self._optional_int_alternate_syntax_converter.overall_dtype()),
            ("optional_time", self._optional_time_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithOptionalFields) -> object:
        if not isinstance(value, RecordWithOptionalFields):
            raise TypeError("Expected 'RecordWithOptionalFields' instance")
        json_object = {}

        if value.optional_int is not None:
            json_object["optionalInt"] = self._optional_int_converter.to_json(value.optional_int)
        if value.optional_int_alternate_syntax is not None:
            json_object["optionalIntAlternateSyntax"] = self._optional_int_alternate_syntax_converter.to_json(value.optional_int_alternate_syntax)
        if value.optional_time is not None:
            json_object["optionalTime"] = self._optional_time_converter.to_json(value.optional_time)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        if (field_val := value["optional_int"]) is not None:
            json_object["optionalInt"] = self._optional_int_converter.numpy_to_json(field_val)
        if (field_val := value["optional_int_alternate_syntax"]) is not None:
            json_object["optionalIntAlternateSyntax"] = self._optional_int_alternate_syntax_converter.numpy_to_json(field_val)
        if (field_val := value["optional_time"]) is not None:
            json_object["optionalTime"] = self._optional_time_converter.numpy_to_json(field_val)
        return json_object

    def from_json(self, json_object: object) -> RecordWithOptionalFields:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithOptionalFields(
            optional_int=self._optional_int_converter.from_json(json_object.get("optionalInt")),
            optional_int_alternate_syntax=self._optional_int_alternate_syntax_converter.from_json(json_object.get("optionalIntAlternateSyntax")),
            optional_time=self._optional_time_converter.from_json(json_object.get("optionalTime")),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._optional_int_converter.from_json_to_numpy(json_object.get("optionalInt")),
            self._optional_int_alternate_syntax_converter.from_json_to_numpy(json_object.get("optionalIntAlternateSyntax")),
            self._optional_time_converter.from_json_to_numpy(json_object.get("optionalTime")),
        ) # type:ignore 


class _RecordWithVlensConverter(_ndjson.JsonConverter[RecordWithVlens, np.void]):
    def __init__(self) -> None:
        self._a_converter = _ndjson.VectorConverter(_SimpleRecordConverter())
        self._b_converter = _ndjson.int32_converter
        self._c_converter = _ndjson.int32_converter
        super().__init__(np.dtype([
            ("a", self._a_converter.overall_dtype()),
            ("b", self._b_converter.overall_dtype()),
            ("c", self._c_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithVlens) -> object:
        if not isinstance(value, RecordWithVlens):
            raise TypeError("Expected 'RecordWithVlens' instance")
        json_object = {}

        json_object["a"] = self._a_converter.to_json(value.a)
        json_object["b"] = self._b_converter.to_json(value.b)
        json_object["c"] = self._c_converter.to_json(value.c)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["a"] = self._a_converter.numpy_to_json(value["a"])
        json_object["b"] = self._b_converter.numpy_to_json(value["b"])
        json_object["c"] = self._c_converter.numpy_to_json(value["c"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithVlens:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithVlens(
            a=self._a_converter.from_json(json_object["a"],),
            b=self._b_converter.from_json(json_object["b"],),
            c=self._c_converter.from_json(json_object["c"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._a_converter.from_json_to_numpy(json_object["a"]),
            self._b_converter.from_json_to_numpy(json_object["b"]),
            self._c_converter.from_json_to_numpy(json_object["c"]),
        ) # type:ignore 


class _RecordWithStringsConverter(_ndjson.JsonConverter[RecordWithStrings, np.void]):
    def __init__(self) -> None:
        self._a_converter = _ndjson.string_converter
        self._b_converter = _ndjson.string_converter
        super().__init__(np.dtype([
            ("a", self._a_converter.overall_dtype()),
            ("b", self._b_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithStrings) -> object:
        if not isinstance(value, RecordWithStrings):
            raise TypeError("Expected 'RecordWithStrings' instance")
        json_object = {}

        json_object["a"] = self._a_converter.to_json(value.a)
        json_object["b"] = self._b_converter.to_json(value.b)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["a"] = self._a_converter.numpy_to_json(value["a"])
        json_object["b"] = self._b_converter.numpy_to_json(value["b"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithStrings:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithStrings(
            a=self._a_converter.from_json(json_object["a"],),
            b=self._b_converter.from_json(json_object["b"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._a_converter.from_json_to_numpy(json_object["a"]),
            self._b_converter.from_json_to_numpy(json_object["b"]),
        ) # type:ignore 


class _RecordWithOptionalVectorConverter(_ndjson.JsonConverter[RecordWithOptionalVector, np.void]):
    def __init__(self) -> None:
        self._optional_vector_converter = _ndjson.OptionalConverter(_ndjson.VectorConverter(_ndjson.int32_converter))
        super().__init__(np.dtype([
            ("optional_vector", self._optional_vector_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithOptionalVector) -> object:
        if not isinstance(value, RecordWithOptionalVector):
            raise TypeError("Expected 'RecordWithOptionalVector' instance")
        json_object = {}

        if value.optional_vector is not None:
            json_object["optionalVector"] = self._optional_vector_converter.to_json(value.optional_vector)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        if (field_val := value["optional_vector"]) is not None:
            json_object["optionalVector"] = self._optional_vector_converter.numpy_to_json(field_val)
        return json_object

    def from_json(self, json_object: object) -> RecordWithOptionalVector:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithOptionalVector(
            optional_vector=self._optional_vector_converter.from_json(json_object.get("optionalVector")),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._optional_vector_converter.from_json_to_numpy(json_object.get("optionalVector")),
        ) # type:ignore 


class _RecordWithFixedVectorsConverter(_ndjson.JsonConverter[RecordWithFixedVectors, np.void]):
    def __init__(self) -> None:
        self._fixed_int_vector_converter = _ndjson.FixedVectorConverter(_ndjson.int32_converter, 5)
        self._fixed_simple_record_vector_converter = _ndjson.FixedVectorConverter(_SimpleRecordConverter(), 3)
        self._fixed_record_with_vlens_vector_converter = _ndjson.FixedVectorConverter(_RecordWithVlensConverter(), 2)
        super().__init__(np.dtype([
            ("fixed_int_vector", self._fixed_int_vector_converter.overall_dtype()),
            ("fixed_simple_record_vector", self._fixed_simple_record_vector_converter.overall_dtype()),
            ("fixed_record_with_vlens_vector", self._fixed_record_with_vlens_vector_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithFixedVectors) -> object:
        if not isinstance(value, RecordWithFixedVectors):
            raise TypeError("Expected 'RecordWithFixedVectors' instance")
        json_object = {}

        json_object["fixedIntVector"] = self._fixed_int_vector_converter.to_json(value.fixed_int_vector)
        json_object["fixedSimpleRecordVector"] = self._fixed_simple_record_vector_converter.to_json(value.fixed_simple_record_vector)
        json_object["fixedRecordWithVlensVector"] = self._fixed_record_with_vlens_vector_converter.to_json(value.fixed_record_with_vlens_vector)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["fixedIntVector"] = self._fixed_int_vector_converter.numpy_to_json(value["fixed_int_vector"])
        json_object["fixedSimpleRecordVector"] = self._fixed_simple_record_vector_converter.numpy_to_json(value["fixed_simple_record_vector"])
        json_object["fixedRecordWithVlensVector"] = self._fixed_record_with_vlens_vector_converter.numpy_to_json(value["fixed_record_with_vlens_vector"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithFixedVectors:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithFixedVectors(
            fixed_int_vector=self._fixed_int_vector_converter.from_json(json_object["fixedIntVector"],),
            fixed_simple_record_vector=self._fixed_simple_record_vector_converter.from_json(json_object["fixedSimpleRecordVector"],),
            fixed_record_with_vlens_vector=self._fixed_record_with_vlens_vector_converter.from_json(json_object["fixedRecordWithVlensVector"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._fixed_int_vector_converter.from_json_to_numpy(json_object["fixedIntVector"]),
            self._fixed_simple_record_vector_converter.from_json_to_numpy(json_object["fixedSimpleRecordVector"]),
            self._fixed_record_with_vlens_vector_converter.from_json_to_numpy(json_object["fixedRecordWithVlensVector"]),
        ) # type:ignore 


class _RecordWithFixedArraysConverter(_ndjson.JsonConverter[RecordWithFixedArrays, np.void]):
    def __init__(self) -> None:
        self._ints_converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (2, 3,))
        self._fixed_simple_record_array_converter = _ndjson.FixedNDArrayConverter(_SimpleRecordConverter(), (3, 2,))
        self._fixed_record_with_vlens_array_converter = _ndjson.FixedNDArrayConverter(_RecordWithVlensConverter(), (2, 2,))
        super().__init__(np.dtype([
            ("ints", self._ints_converter.overall_dtype()),
            ("fixed_simple_record_array", self._fixed_simple_record_array_converter.overall_dtype()),
            ("fixed_record_with_vlens_array", self._fixed_record_with_vlens_array_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithFixedArrays) -> object:
        if not isinstance(value, RecordWithFixedArrays):
            raise TypeError("Expected 'RecordWithFixedArrays' instance")
        json_object = {}

        json_object["ints"] = self._ints_converter.to_json(value.ints)
        json_object["fixedSimpleRecordArray"] = self._fixed_simple_record_array_converter.to_json(value.fixed_simple_record_array)
        json_object["fixedRecordWithVlensArray"] = self._fixed_record_with_vlens_array_converter.to_json(value.fixed_record_with_vlens_array)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["ints"] = self._ints_converter.numpy_to_json(value["ints"])
        json_object["fixedSimpleRecordArray"] = self._fixed_simple_record_array_converter.numpy_to_json(value["fixed_simple_record_array"])
        json_object["fixedRecordWithVlensArray"] = self._fixed_record_with_vlens_array_converter.numpy_to_json(value["fixed_record_with_vlens_array"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithFixedArrays:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithFixedArrays(
            ints=self._ints_converter.from_json(json_object["ints"],),
            fixed_simple_record_array=self._fixed_simple_record_array_converter.from_json(json_object["fixedSimpleRecordArray"],),
            fixed_record_with_vlens_array=self._fixed_record_with_vlens_array_converter.from_json(json_object["fixedRecordWithVlensArray"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._ints_converter.from_json_to_numpy(json_object["ints"]),
            self._fixed_simple_record_array_converter.from_json_to_numpy(json_object["fixedSimpleRecordArray"]),
            self._fixed_record_with_vlens_array_converter.from_json_to_numpy(json_object["fixedRecordWithVlensArray"]),
        ) # type:ignore 


class _RecordWithNDArraysConverter(_ndjson.JsonConverter[RecordWithNDArrays, np.void]):
    def __init__(self) -> None:
        self._ints_converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        self._fixed_simple_record_array_converter = _ndjson.NDArrayConverter(_SimpleRecordConverter(), 2)
        self._fixed_record_with_vlens_array_converter = _ndjson.NDArrayConverter(_RecordWithVlensConverter(), 2)
        super().__init__(np.dtype([
            ("ints", self._ints_converter.overall_dtype()),
            ("fixed_simple_record_array", self._fixed_simple_record_array_converter.overall_dtype()),
            ("fixed_record_with_vlens_array", self._fixed_record_with_vlens_array_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithNDArrays) -> object:
        if not isinstance(value, RecordWithNDArrays):
            raise TypeError("Expected 'RecordWithNDArrays' instance")
        json_object = {}

        json_object["ints"] = self._ints_converter.to_json(value.ints)
        json_object["fixedSimpleRecordArray"] = self._fixed_simple_record_array_converter.to_json(value.fixed_simple_record_array)
        json_object["fixedRecordWithVlensArray"] = self._fixed_record_with_vlens_array_converter.to_json(value.fixed_record_with_vlens_array)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["ints"] = self._ints_converter.numpy_to_json(value["ints"])
        json_object["fixedSimpleRecordArray"] = self._fixed_simple_record_array_converter.numpy_to_json(value["fixed_simple_record_array"])
        json_object["fixedRecordWithVlensArray"] = self._fixed_record_with_vlens_array_converter.numpy_to_json(value["fixed_record_with_vlens_array"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithNDArrays:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithNDArrays(
            ints=self._ints_converter.from_json(json_object["ints"],),
            fixed_simple_record_array=self._fixed_simple_record_array_converter.from_json(json_object["fixedSimpleRecordArray"],),
            fixed_record_with_vlens_array=self._fixed_record_with_vlens_array_converter.from_json(json_object["fixedRecordWithVlensArray"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._ints_converter.from_json_to_numpy(json_object["ints"]),
            self._fixed_simple_record_array_converter.from_json_to_numpy(json_object["fixedSimpleRecordArray"]),
            self._fixed_record_with_vlens_array_converter.from_json_to_numpy(json_object["fixedRecordWithVlensArray"]),
        ) # type:ignore 


class _RecordWithNDArraysSingleDimensionConverter(_ndjson.JsonConverter[RecordWithNDArraysSingleDimension, np.void]):
    def __init__(self) -> None:
        self._ints_converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 1)
        self._fixed_simple_record_array_converter = _ndjson.NDArrayConverter(_SimpleRecordConverter(), 1)
        self._fixed_record_with_vlens_array_converter = _ndjson.NDArrayConverter(_RecordWithVlensConverter(), 1)
        super().__init__(np.dtype([
            ("ints", self._ints_converter.overall_dtype()),
            ("fixed_simple_record_array", self._fixed_simple_record_array_converter.overall_dtype()),
            ("fixed_record_with_vlens_array", self._fixed_record_with_vlens_array_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithNDArraysSingleDimension) -> object:
        if not isinstance(value, RecordWithNDArraysSingleDimension):
            raise TypeError("Expected 'RecordWithNDArraysSingleDimension' instance")
        json_object = {}

        json_object["ints"] = self._ints_converter.to_json(value.ints)
        json_object["fixedSimpleRecordArray"] = self._fixed_simple_record_array_converter.to_json(value.fixed_simple_record_array)
        json_object["fixedRecordWithVlensArray"] = self._fixed_record_with_vlens_array_converter.to_json(value.fixed_record_with_vlens_array)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["ints"] = self._ints_converter.numpy_to_json(value["ints"])
        json_object["fixedSimpleRecordArray"] = self._fixed_simple_record_array_converter.numpy_to_json(value["fixed_simple_record_array"])
        json_object["fixedRecordWithVlensArray"] = self._fixed_record_with_vlens_array_converter.numpy_to_json(value["fixed_record_with_vlens_array"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithNDArraysSingleDimension:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithNDArraysSingleDimension(
            ints=self._ints_converter.from_json(json_object["ints"],),
            fixed_simple_record_array=self._fixed_simple_record_array_converter.from_json(json_object["fixedSimpleRecordArray"],),
            fixed_record_with_vlens_array=self._fixed_record_with_vlens_array_converter.from_json(json_object["fixedRecordWithVlensArray"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._ints_converter.from_json_to_numpy(json_object["ints"]),
            self._fixed_simple_record_array_converter.from_json_to_numpy(json_object["fixedSimpleRecordArray"]),
            self._fixed_record_with_vlens_array_converter.from_json_to_numpy(json_object["fixedRecordWithVlensArray"]),
        ) # type:ignore 


class _RecordWithDynamicNDArraysConverter(_ndjson.JsonConverter[RecordWithDynamicNDArrays, np.void]):
    def __init__(self) -> None:
        self._ints_converter = _ndjson.DynamicNDArrayConverter(_ndjson.int32_converter)
        self._simple_record_array_converter = _ndjson.DynamicNDArrayConverter(_SimpleRecordConverter())
        self._record_with_vlens_array_converter = _ndjson.DynamicNDArrayConverter(_RecordWithVlensConverter())
        super().__init__(np.dtype([
            ("ints", self._ints_converter.overall_dtype()),
            ("simple_record_array", self._simple_record_array_converter.overall_dtype()),
            ("record_with_vlens_array", self._record_with_vlens_array_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithDynamicNDArrays) -> object:
        if not isinstance(value, RecordWithDynamicNDArrays):
            raise TypeError("Expected 'RecordWithDynamicNDArrays' instance")
        json_object = {}

        json_object["ints"] = self._ints_converter.to_json(value.ints)
        json_object["simpleRecordArray"] = self._simple_record_array_converter.to_json(value.simple_record_array)
        json_object["recordWithVlensArray"] = self._record_with_vlens_array_converter.to_json(value.record_with_vlens_array)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["ints"] = self._ints_converter.numpy_to_json(value["ints"])
        json_object["simpleRecordArray"] = self._simple_record_array_converter.numpy_to_json(value["simple_record_array"])
        json_object["recordWithVlensArray"] = self._record_with_vlens_array_converter.numpy_to_json(value["record_with_vlens_array"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithDynamicNDArrays:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithDynamicNDArrays(
            ints=self._ints_converter.from_json(json_object["ints"],),
            simple_record_array=self._simple_record_array_converter.from_json(json_object["simpleRecordArray"],),
            record_with_vlens_array=self._record_with_vlens_array_converter.from_json(json_object["recordWithVlensArray"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._ints_converter.from_json_to_numpy(json_object["ints"]),
            self._simple_record_array_converter.from_json_to_numpy(json_object["simpleRecordArray"]),
            self._record_with_vlens_array_converter.from_json_to_numpy(json_object["recordWithVlensArray"]),
        ) # type:ignore 


class _RecordWithFixedCollectionsConverter(_ndjson.JsonConverter[RecordWithFixedCollections, np.void]):
    def __init__(self) -> None:
        self._fixed_vector_converter = _ndjson.FixedVectorConverter(_ndjson.int32_converter, 3)
        self._fixed_array_converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (2, 3,))
        super().__init__(np.dtype([
            ("fixed_vector", self._fixed_vector_converter.overall_dtype()),
            ("fixed_array", self._fixed_array_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithFixedCollections) -> object:
        if not isinstance(value, RecordWithFixedCollections):
            raise TypeError("Expected 'RecordWithFixedCollections' instance")
        json_object = {}

        json_object["fixedVector"] = self._fixed_vector_converter.to_json(value.fixed_vector)
        json_object["fixedArray"] = self._fixed_array_converter.to_json(value.fixed_array)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["fixedVector"] = self._fixed_vector_converter.numpy_to_json(value["fixed_vector"])
        json_object["fixedArray"] = self._fixed_array_converter.numpy_to_json(value["fixed_array"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithFixedCollections:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithFixedCollections(
            fixed_vector=self._fixed_vector_converter.from_json(json_object["fixedVector"],),
            fixed_array=self._fixed_array_converter.from_json(json_object["fixedArray"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._fixed_vector_converter.from_json_to_numpy(json_object["fixedVector"]),
            self._fixed_array_converter.from_json_to_numpy(json_object["fixedArray"]),
        ) # type:ignore 


class _RecordWithVlenCollectionsConverter(_ndjson.JsonConverter[RecordWithVlenCollections, np.void]):
    def __init__(self) -> None:
        self._vector_converter = _ndjson.VectorConverter(_ndjson.int32_converter)
        self._array_converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        super().__init__(np.dtype([
            ("vector", self._vector_converter.overall_dtype()),
            ("array", self._array_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithVlenCollections) -> object:
        if not isinstance(value, RecordWithVlenCollections):
            raise TypeError("Expected 'RecordWithVlenCollections' instance")
        json_object = {}

        json_object["vector"] = self._vector_converter.to_json(value.vector)
        json_object["array"] = self._array_converter.to_json(value.array)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["vector"] = self._vector_converter.numpy_to_json(value["vector"])
        json_object["array"] = self._array_converter.numpy_to_json(value["array"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithVlenCollections:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithVlenCollections(
            vector=self._vector_converter.from_json(json_object["vector"],),
            array=self._array_converter.from_json(json_object["array"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._vector_converter.from_json_to_numpy(json_object["vector"]),
            self._array_converter.from_json_to_numpy(json_object["array"]),
        ) # type:ignore 


class _RecordWithUnionsConverter(_ndjson.JsonConverter[RecordWithUnions, np.void]):
    def __init__(self) -> None:
        self._null_or_int_or_string_converter = _ndjson.UnionConverter(Int32OrString, [None, (Int32OrString.Int32, _ndjson.int32_converter, [int, float]), (Int32OrString.String, _ndjson.string_converter, [str])], True)
        self._date_or_datetime_converter = _ndjson.UnionConverter(TimeOrDatetime, [(TimeOrDatetime.Time, _ndjson.time_converter, [int, float]), (TimeOrDatetime.Datetime, _ndjson.datetime_converter, [int, float])], False)
        super().__init__(np.dtype([
            ("null_or_int_or_string", self._null_or_int_or_string_converter.overall_dtype()),
            ("date_or_datetime", self._date_or_datetime_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithUnions) -> object:
        if not isinstance(value, RecordWithUnions):
            raise TypeError("Expected 'RecordWithUnions' instance")
        json_object = {}

        if value.null_or_int_or_string is not None:
            json_object["nullOrIntOrString"] = self._null_or_int_or_string_converter.to_json(value.null_or_int_or_string)
        json_object["dateOrDatetime"] = self._date_or_datetime_converter.to_json(value.date_or_datetime)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        if (field_val := value["null_or_int_or_string"]) is not None:
            json_object["nullOrIntOrString"] = self._null_or_int_or_string_converter.numpy_to_json(field_val)
        json_object["dateOrDatetime"] = self._date_or_datetime_converter.numpy_to_json(value["date_or_datetime"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithUnions:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithUnions(
            null_or_int_or_string=self._null_or_int_or_string_converter.from_json(json_object.get("nullOrIntOrString")),
            date_or_datetime=self._date_or_datetime_converter.from_json(json_object["dateOrDatetime"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._null_or_int_or_string_converter.from_json_to_numpy(json_object.get("nullOrIntOrString")),
            self._date_or_datetime_converter.from_json_to_numpy(json_object["dateOrDatetime"]),
        ) # type:ignore 


_fruits_name_to_value_map = {
    "apple": Fruits.APPLE,
    "banana": Fruits.BANANA,
    "pear": Fruits.PEAR,
}
_fruits_value_to_name_map = {v: n for n, v in _fruits_name_to_value_map.items()}

_u_int64_enum_name_to_value_map = {
    "a": UInt64Enum.A,
}
_u_int64_enum_value_to_name_map = {v: n for n, v in _u_int64_enum_name_to_value_map.items()}

_int64_enum_name_to_value_map = {
    "b": Int64Enum.B,
}
_int64_enum_value_to_name_map = {v: n for n, v in _int64_enum_name_to_value_map.items()}

_size_based_enum_name_to_value_map = {
    "a": SizeBasedEnum.A,
    "b": SizeBasedEnum.B,
    "c": SizeBasedEnum.C,
}
_size_based_enum_value_to_name_map = {v: n for n, v in _size_based_enum_name_to_value_map.items()}

_days_of_week_name_to_value_map = {
    "monday": DaysOfWeek.MONDAY,
    "tuesday": DaysOfWeek.TUESDAY,
    "wednesday": DaysOfWeek.WEDNESDAY,
    "thursday": DaysOfWeek.THURSDAY,
    "friday": DaysOfWeek.FRIDAY,
    "saturday": DaysOfWeek.SATURDAY,
    "sunday": DaysOfWeek.SUNDAY,
}
_days_of_week_value_to_name_map = {v: n for n, v in _days_of_week_name_to_value_map.items()}

_text_format_name_to_value_map = {
    "regular": TextFormat.REGULAR,
    "bold": TextFormat.BOLD,
    "italic": TextFormat.ITALIC,
    "underline": TextFormat.UNDERLINE,
    "strikethrough": TextFormat.STRIKETHROUGH,
}
_text_format_value_to_name_map = {v: n for n, v in _text_format_name_to_value_map.items()}

class _RecordWithEnumsConverter(_ndjson.JsonConverter[RecordWithEnums, np.void]):
    def __init__(self) -> None:
        self._enum_converter = _ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map)
        self._flags_converter = _ndjson.FlagsConverter(DaysOfWeek, np.int32, _days_of_week_name_to_value_map, _days_of_week_value_to_name_map)
        self._flags_2_converter = _ndjson.FlagsConverter(TextFormat, np.uint64, _text_format_name_to_value_map, _text_format_value_to_name_map)
        super().__init__(np.dtype([
            ("enum", self._enum_converter.overall_dtype()),
            ("flags", self._flags_converter.overall_dtype()),
            ("flags_2", self._flags_2_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithEnums) -> object:
        if not isinstance(value, RecordWithEnums):
            raise TypeError("Expected 'RecordWithEnums' instance")
        json_object = {}

        json_object["enum"] = self._enum_converter.to_json(value.enum)
        json_object["flags"] = self._flags_converter.to_json(value.flags)
        json_object["flags2"] = self._flags_2_converter.to_json(value.flags_2)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["enum"] = self._enum_converter.numpy_to_json(value["enum"])
        json_object["flags"] = self._flags_converter.numpy_to_json(value["flags"])
        json_object["flags2"] = self._flags_2_converter.numpy_to_json(value["flags_2"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithEnums:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithEnums(
            enum=self._enum_converter.from_json(json_object["enum"],),
            flags=self._flags_converter.from_json(json_object["flags"],),
            flags_2=self._flags_2_converter.from_json(json_object["flags2"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._enum_converter.from_json_to_numpy(json_object["enum"]),
            self._flags_converter.from_json_to_numpy(json_object["flags"]),
            self._flags_2_converter.from_json_to_numpy(json_object["flags2"]),
        ) # type:ignore 


class _GenericRecordConverter(typing.Generic[T1, T1_NP, T2, T2_NP], _ndjson.JsonConverter[GenericRecord[T1, T2, T2_NP], np.void]):
    def __init__(self, t1_converter: _ndjson.JsonConverter[T1, T1_NP], t2_converter: _ndjson.JsonConverter[T2, T2_NP]) -> None:
        self._scalar_1_converter = t1_converter
        self._scalar_1_supports_none = self._scalar_1_converter.supports_none()
        self._scalar_2_converter = t2_converter
        self._scalar_2_supports_none = self._scalar_2_converter.supports_none()
        self._vector_1_converter = _ndjson.VectorConverter(t1_converter)
        self._image_2_converter = _ndjson.NDArrayConverter(t2_converter, 2)
        super().__init__(np.dtype([
            ("scalar_1", self._scalar_1_converter.overall_dtype()),
            ("scalar_2", self._scalar_2_converter.overall_dtype()),
            ("vector_1", self._vector_1_converter.overall_dtype()),
            ("image_2", self._image_2_converter.overall_dtype()),
        ]))

    def to_json(self, value: GenericRecord[T1, T2, T2_NP]) -> object:
        if not isinstance(value, GenericRecord):
            raise TypeError("Expected 'GenericRecord[T1, T2, T2_NP]' instance")
        json_object = {}

        if not self._scalar_1_supports_none or value.scalar_1 is not None:
            json_object["scalar1"] = self._scalar_1_converter.to_json(value.scalar_1)
        if not self._scalar_2_supports_none or value.scalar_2 is not None:
            json_object["scalar2"] = self._scalar_2_converter.to_json(value.scalar_2)
        json_object["vector1"] = self._vector_1_converter.to_json(value.vector_1)
        json_object["image2"] = self._image_2_converter.to_json(value.image_2)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        if not self._scalar_1_supports_none or value["scalar_1"] is not None:
            json_object["scalar1"] = self._scalar_1_converter.numpy_to_json(value["scalar_1"])
        if not self._scalar_2_supports_none or value["scalar_2"] is not None:
            json_object["scalar2"] = self._scalar_2_converter.numpy_to_json(value["scalar_2"])
        json_object["vector1"] = self._vector_1_converter.numpy_to_json(value["vector_1"])
        json_object["image2"] = self._image_2_converter.numpy_to_json(value["image_2"])
        return json_object

    def from_json(self, json_object: object) -> GenericRecord[T1, T2, T2_NP]:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return GenericRecord[T1, T2, T2_NP](
            scalar_1=self._scalar_1_converter.from_json(json_object.get("scalar1") if self._scalar_1_supports_none else json_object["scalar1"]),
            scalar_2=self._scalar_2_converter.from_json(json_object.get("scalar2") if self._scalar_2_supports_none else json_object["scalar2"]),
            vector_1=self._vector_1_converter.from_json(json_object["vector1"],),
            image_2=self._image_2_converter.from_json(json_object["image2"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._scalar_1_converter.from_json_to_numpy(json_object.get("scalar1") if self._scalar_1_supports_none else json_object["scalar1"]),
            self._scalar_2_converter.from_json_to_numpy(json_object.get("scalar2") if self._scalar_2_supports_none else json_object["scalar2"]),
            self._vector_1_converter.from_json_to_numpy(json_object["vector1"]),
            self._image_2_converter.from_json_to_numpy(json_object["image2"]),
        ) # type:ignore 


class _MyTupleConverter(typing.Generic[T1, T1_NP, T2, T2_NP], _ndjson.JsonConverter[MyTuple[T1, T2], np.void]):
    def __init__(self, t1_converter: _ndjson.JsonConverter[T1, T1_NP], t2_converter: _ndjson.JsonConverter[T2, T2_NP]) -> None:
        self._v1_converter = t1_converter
        self._v1_supports_none = self._v1_converter.supports_none()
        self._v2_converter = t2_converter
        self._v2_supports_none = self._v2_converter.supports_none()
        super().__init__(np.dtype([
            ("v1", self._v1_converter.overall_dtype()),
            ("v2", self._v2_converter.overall_dtype()),
        ]))

    def to_json(self, value: MyTuple[T1, T2]) -> object:
        if not isinstance(value, MyTuple):
            raise TypeError("Expected 'MyTuple[T1, T2]' instance")
        json_object = {}

        if not self._v1_supports_none or value.v1 is not None:
            json_object["v1"] = self._v1_converter.to_json(value.v1)
        if not self._v2_supports_none or value.v2 is not None:
            json_object["v2"] = self._v2_converter.to_json(value.v2)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        if not self._v1_supports_none or value["v1"] is not None:
            json_object["v1"] = self._v1_converter.numpy_to_json(value["v1"])
        if not self._v2_supports_none or value["v2"] is not None:
            json_object["v2"] = self._v2_converter.numpy_to_json(value["v2"])
        return json_object

    def from_json(self, json_object: object) -> MyTuple[T1, T2]:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return MyTuple[T1, T2](
            v1=self._v1_converter.from_json(json_object.get("v1") if self._v1_supports_none else json_object["v1"]),
            v2=self._v2_converter.from_json(json_object.get("v2") if self._v2_supports_none else json_object["v2"]),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._v1_converter.from_json_to_numpy(json_object.get("v1") if self._v1_supports_none else json_object["v1"]),
            self._v2_converter.from_json_to_numpy(json_object.get("v2") if self._v2_supports_none else json_object["v2"]),
        ) # type:ignore 


class _GenericRecordWithComputedFieldsConverter(typing.Generic[T0, T0_NP, T1, T1_NP], _ndjson.JsonConverter[GenericRecordWithComputedFields[T0, T1], np.void]):
    def __init__(self, t0_converter: _ndjson.JsonConverter[T0, T0_NP], t1_converter: _ndjson.JsonConverter[T1, T1_NP]) -> None:
        self._f1_converter = _ndjson.UnionConverter(T0OrT1, [(T0OrT1[T0, T1].T0, t0_converter, [dict]), (T0OrT1[T0, T1].T1, t1_converter, [dict])], False)
        super().__init__(np.dtype([
            ("f1", self._f1_converter.overall_dtype()),
        ]))

    def to_json(self, value: GenericRecordWithComputedFields[T0, T1]) -> object:
        if not isinstance(value, GenericRecordWithComputedFields):
            raise TypeError("Expected 'GenericRecordWithComputedFields[T0, T1]' instance")
        json_object = {}

        json_object["f1"] = self._f1_converter.to_json(value.f1)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["f1"] = self._f1_converter.numpy_to_json(value["f1"])
        return json_object

    def from_json(self, json_object: object) -> GenericRecordWithComputedFields[T0, T1]:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return GenericRecordWithComputedFields[T0, T1](
            f1=self._f1_converter.from_json(json_object["f1"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._f1_converter.from_json_to_numpy(json_object["f1"]),
        ) # type:ignore 


class _RecordWithComputedFieldsConverter(_ndjson.JsonConverter[RecordWithComputedFields, np.void]):
    def __init__(self) -> None:
        self._array_field_converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        self._array_field_map_dimensions_converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        self._dynamic_array_field_converter = _ndjson.DynamicNDArrayConverter(_ndjson.int32_converter)
        self._fixed_array_field_converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3, 4,))
        self._int_field_converter = _ndjson.int32_converter
        self._string_field_converter = _ndjson.string_converter
        self._tuple_field_converter = _MyTupleConverter(_ndjson.int32_converter, _ndjson.int32_converter)
        self._vector_field_converter = _ndjson.VectorConverter(_ndjson.int32_converter)
        self._vector_of_vectors_field_converter = _ndjson.VectorConverter(_ndjson.VectorConverter(_ndjson.int32_converter))
        self._fixed_vector_field_converter = _ndjson.FixedVectorConverter(_ndjson.int32_converter, 3)
        self._optional_named_array_converter = _ndjson.OptionalConverter(_ndjson.NDArrayConverter(_ndjson.int32_converter, 2))
        self._int_float_union_converter = _ndjson.UnionConverter(Int32OrFloat32, [(Int32OrFloat32.Int32, _ndjson.int32_converter, [int, float]), (Int32OrFloat32.Float32, _ndjson.float32_converter, [int, float])], False)
        self._nullable_int_float_union_converter = _ndjson.UnionConverter(Int32OrFloat32, [None, (Int32OrFloat32.Int32, _ndjson.int32_converter, [int, float]), (Int32OrFloat32.Float32, _ndjson.float32_converter, [int, float])], False)
        self._union_with_nested_generic_union_converter = _ndjson.UnionConverter(IntOrGenericRecordWithComputedFields, [(IntOrGenericRecordWithComputedFields.Int, _ndjson.int32_converter, [int, float]), (IntOrGenericRecordWithComputedFields.GenericRecordWithComputedFields, _GenericRecordWithComputedFieldsConverter(_ndjson.string_converter, _ndjson.float32_converter), [dict])], True)
        self._map_field_converter = _ndjson.MapConverter(_ndjson.string_converter, _ndjson.string_converter)
        super().__init__(np.dtype([
            ("array_field", self._array_field_converter.overall_dtype()),
            ("array_field_map_dimensions", self._array_field_map_dimensions_converter.overall_dtype()),
            ("dynamic_array_field", self._dynamic_array_field_converter.overall_dtype()),
            ("fixed_array_field", self._fixed_array_field_converter.overall_dtype()),
            ("int_field", self._int_field_converter.overall_dtype()),
            ("string_field", self._string_field_converter.overall_dtype()),
            ("tuple_field", self._tuple_field_converter.overall_dtype()),
            ("vector_field", self._vector_field_converter.overall_dtype()),
            ("vector_of_vectors_field", self._vector_of_vectors_field_converter.overall_dtype()),
            ("fixed_vector_field", self._fixed_vector_field_converter.overall_dtype()),
            ("optional_named_array", self._optional_named_array_converter.overall_dtype()),
            ("int_float_union", self._int_float_union_converter.overall_dtype()),
            ("nullable_int_float_union", self._nullable_int_float_union_converter.overall_dtype()),
            ("union_with_nested_generic_union", self._union_with_nested_generic_union_converter.overall_dtype()),
            ("map_field", self._map_field_converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithComputedFields) -> object:
        if not isinstance(value, RecordWithComputedFields):
            raise TypeError("Expected 'RecordWithComputedFields' instance")
        json_object = {}

        json_object["arrayField"] = self._array_field_converter.to_json(value.array_field)
        json_object["arrayFieldMapDimensions"] = self._array_field_map_dimensions_converter.to_json(value.array_field_map_dimensions)
        json_object["dynamicArrayField"] = self._dynamic_array_field_converter.to_json(value.dynamic_array_field)
        json_object["fixedArrayField"] = self._fixed_array_field_converter.to_json(value.fixed_array_field)
        json_object["intField"] = self._int_field_converter.to_json(value.int_field)
        json_object["stringField"] = self._string_field_converter.to_json(value.string_field)
        json_object["tupleField"] = self._tuple_field_converter.to_json(value.tuple_field)
        json_object["vectorField"] = self._vector_field_converter.to_json(value.vector_field)
        json_object["vectorOfVectorsField"] = self._vector_of_vectors_field_converter.to_json(value.vector_of_vectors_field)
        json_object["fixedVectorField"] = self._fixed_vector_field_converter.to_json(value.fixed_vector_field)
        if value.optional_named_array is not None:
            json_object["optionalNamedArray"] = self._optional_named_array_converter.to_json(value.optional_named_array)
        json_object["intFloatUnion"] = self._int_float_union_converter.to_json(value.int_float_union)
        if value.nullable_int_float_union is not None:
            json_object["nullableIntFloatUnion"] = self._nullable_int_float_union_converter.to_json(value.nullable_int_float_union)
        json_object["unionWithNestedGenericUnion"] = self._union_with_nested_generic_union_converter.to_json(value.union_with_nested_generic_union)
        json_object["mapField"] = self._map_field_converter.to_json(value.map_field)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["arrayField"] = self._array_field_converter.numpy_to_json(value["array_field"])
        json_object["arrayFieldMapDimensions"] = self._array_field_map_dimensions_converter.numpy_to_json(value["array_field_map_dimensions"])
        json_object["dynamicArrayField"] = self._dynamic_array_field_converter.numpy_to_json(value["dynamic_array_field"])
        json_object["fixedArrayField"] = self._fixed_array_field_converter.numpy_to_json(value["fixed_array_field"])
        json_object["intField"] = self._int_field_converter.numpy_to_json(value["int_field"])
        json_object["stringField"] = self._string_field_converter.numpy_to_json(value["string_field"])
        json_object["tupleField"] = self._tuple_field_converter.numpy_to_json(value["tuple_field"])
        json_object["vectorField"] = self._vector_field_converter.numpy_to_json(value["vector_field"])
        json_object["vectorOfVectorsField"] = self._vector_of_vectors_field_converter.numpy_to_json(value["vector_of_vectors_field"])
        json_object["fixedVectorField"] = self._fixed_vector_field_converter.numpy_to_json(value["fixed_vector_field"])
        if (field_val := value["optional_named_array"]) is not None:
            json_object["optionalNamedArray"] = self._optional_named_array_converter.numpy_to_json(field_val)
        json_object["intFloatUnion"] = self._int_float_union_converter.numpy_to_json(value["int_float_union"])
        if (field_val := value["nullable_int_float_union"]) is not None:
            json_object["nullableIntFloatUnion"] = self._nullable_int_float_union_converter.numpy_to_json(field_val)
        json_object["unionWithNestedGenericUnion"] = self._union_with_nested_generic_union_converter.numpy_to_json(value["union_with_nested_generic_union"])
        json_object["mapField"] = self._map_field_converter.numpy_to_json(value["map_field"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithComputedFields:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithComputedFields(
            array_field=self._array_field_converter.from_json(json_object["arrayField"],),
            array_field_map_dimensions=self._array_field_map_dimensions_converter.from_json(json_object["arrayFieldMapDimensions"],),
            dynamic_array_field=self._dynamic_array_field_converter.from_json(json_object["dynamicArrayField"],),
            fixed_array_field=self._fixed_array_field_converter.from_json(json_object["fixedArrayField"],),
            int_field=self._int_field_converter.from_json(json_object["intField"],),
            string_field=self._string_field_converter.from_json(json_object["stringField"],),
            tuple_field=self._tuple_field_converter.from_json(json_object["tupleField"],),
            vector_field=self._vector_field_converter.from_json(json_object["vectorField"],),
            vector_of_vectors_field=self._vector_of_vectors_field_converter.from_json(json_object["vectorOfVectorsField"],),
            fixed_vector_field=self._fixed_vector_field_converter.from_json(json_object["fixedVectorField"],),
            optional_named_array=self._optional_named_array_converter.from_json(json_object.get("optionalNamedArray")),
            int_float_union=self._int_float_union_converter.from_json(json_object["intFloatUnion"],),
            nullable_int_float_union=self._nullable_int_float_union_converter.from_json(json_object.get("nullableIntFloatUnion")),
            union_with_nested_generic_union=self._union_with_nested_generic_union_converter.from_json(json_object["unionWithNestedGenericUnion"],),
            map_field=self._map_field_converter.from_json(json_object["mapField"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._array_field_converter.from_json_to_numpy(json_object["arrayField"]),
            self._array_field_map_dimensions_converter.from_json_to_numpy(json_object["arrayFieldMapDimensions"]),
            self._dynamic_array_field_converter.from_json_to_numpy(json_object["dynamicArrayField"]),
            self._fixed_array_field_converter.from_json_to_numpy(json_object["fixedArrayField"]),
            self._int_field_converter.from_json_to_numpy(json_object["intField"]),
            self._string_field_converter.from_json_to_numpy(json_object["stringField"]),
            self._tuple_field_converter.from_json_to_numpy(json_object["tupleField"]),
            self._vector_field_converter.from_json_to_numpy(json_object["vectorField"]),
            self._vector_of_vectors_field_converter.from_json_to_numpy(json_object["vectorOfVectorsField"]),
            self._fixed_vector_field_converter.from_json_to_numpy(json_object["fixedVectorField"]),
            self._optional_named_array_converter.from_json_to_numpy(json_object.get("optionalNamedArray")),
            self._int_float_union_converter.from_json_to_numpy(json_object["intFloatUnion"]),
            self._nullable_int_float_union_converter.from_json_to_numpy(json_object.get("nullableIntFloatUnion")),
            self._union_with_nested_generic_union_converter.from_json_to_numpy(json_object["unionWithNestedGenericUnion"]),
            self._map_field_converter.from_json_to_numpy(json_object["mapField"]),
        ) # type:ignore 


_enum_with_keyword_symbols_name_to_value_map = {
    "try": EnumWithKeywordSymbols.TRY,
    "catch": EnumWithKeywordSymbols.CATCH,
}
_enum_with_keyword_symbols_value_to_name_map = {v: n for n, v in _enum_with_keyword_symbols_name_to_value_map.items()}

class _RecordWithKeywordFieldsConverter(_ndjson.JsonConverter[RecordWithKeywordFields, np.void]):
    def __init__(self) -> None:
        self._int__converter = _ndjson.string_converter
        self._sizeof_converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        self._if__converter = _ndjson.EnumConverter(EnumWithKeywordSymbols, np.int32, _enum_with_keyword_symbols_name_to_value_map, _enum_with_keyword_symbols_value_to_name_map)
        super().__init__(np.dtype([
            ("int_", self._int__converter.overall_dtype()),
            ("sizeof", self._sizeof_converter.overall_dtype()),
            ("if_", self._if__converter.overall_dtype()),
        ]))

    def to_json(self, value: RecordWithKeywordFields) -> object:
        if not isinstance(value, RecordWithKeywordFields):
            raise TypeError("Expected 'RecordWithKeywordFields' instance")
        json_object = {}

        json_object["int"] = self._int__converter.to_json(value.int_)
        json_object["sizeof"] = self._sizeof_converter.to_json(value.sizeof)
        json_object["if"] = self._if__converter.to_json(value.if_)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void):
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        json_object["int"] = self._int__converter.numpy_to_json(value["int_"])
        json_object["sizeof"] = self._sizeof_converter.numpy_to_json(value["sizeof"])
        json_object["if"] = self._if__converter.numpy_to_json(value["if_"])
        return json_object

    def from_json(self, json_object: object) -> RecordWithKeywordFields:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return RecordWithKeywordFields(
            int_=self._int__converter.from_json(json_object["int"],),
            sizeof=self._sizeof_converter.from_json(json_object["sizeof"],),
            if_=self._if__converter.from_json(json_object["if"],),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._int__converter.from_json_to_numpy(json_object["int"]),
            self._sizeof_converter.from_json_to_numpy(json_object["sizeof"]),
            self._if__converter.from_json_to_numpy(json_object["if"]),
        ) # type:ignore 


class NDJsonBenchmarkFloat256x256Writer(_ndjson.NDJsonProtocolWriter, BenchmarkFloat256x256WriterBase):
    """NDJson writer for the BenchmarkFloat256x256 protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        BenchmarkFloat256x256WriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, BenchmarkFloat256x256WriterBase.schema)

    def _write_float256x256(self, value: collections.abc.Iterable[npt.NDArray[np.float32]]) -> None:
        converter = _ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (256, 256,))
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"float256x256": json_item})


class NDJsonBenchmarkFloat256x256Reader(_ndjson.NDJsonProtocolReader, BenchmarkFloat256x256ReaderBase):
    """NDJson writer for the BenchmarkFloat256x256 protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        BenchmarkFloat256x256ReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, BenchmarkFloat256x256ReaderBase.schema)

    def _read_float256x256(self) -> collections.abc.Iterable[npt.NDArray[np.float32]]:
        converter = _ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (256, 256,))
        while (json_object := self._read_json_line("float256x256", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

class NDJsonBenchmarkInt256x256Writer(_ndjson.NDJsonProtocolWriter, BenchmarkInt256x256WriterBase):
    """NDJson writer for the BenchmarkInt256x256 protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        BenchmarkInt256x256WriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, BenchmarkInt256x256WriterBase.schema)

    def _write_int256x256(self, value: collections.abc.Iterable[npt.NDArray[np.int32]]) -> None:
        converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (256, 256,))
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"int256x256": json_item})


class NDJsonBenchmarkInt256x256Reader(_ndjson.NDJsonProtocolReader, BenchmarkInt256x256ReaderBase):
    """NDJson writer for the BenchmarkInt256x256 protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        BenchmarkInt256x256ReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, BenchmarkInt256x256ReaderBase.schema)

    def _read_int256x256(self) -> collections.abc.Iterable[npt.NDArray[np.int32]]:
        converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (256, 256,))
        while (json_object := self._read_json_line("int256x256", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

class NDJsonBenchmarkFloatVlenWriter(_ndjson.NDJsonProtocolWriter, BenchmarkFloatVlenWriterBase):
    """NDJson writer for the BenchmarkFloatVlen protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        BenchmarkFloatVlenWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, BenchmarkFloatVlenWriterBase.schema)

    def _write_float_array(self, value: collections.abc.Iterable[npt.NDArray[np.float32]]) -> None:
        converter = _ndjson.NDArrayConverter(_ndjson.float32_converter, 2)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"floatArray": json_item})


class NDJsonBenchmarkFloatVlenReader(_ndjson.NDJsonProtocolReader, BenchmarkFloatVlenReaderBase):
    """NDJson writer for the BenchmarkFloatVlen protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        BenchmarkFloatVlenReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, BenchmarkFloatVlenReaderBase.schema)

    def _read_float_array(self) -> collections.abc.Iterable[npt.NDArray[np.float32]]:
        converter = _ndjson.NDArrayConverter(_ndjson.float32_converter, 2)
        while (json_object := self._read_json_line("floatArray", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

class NDJsonBenchmarkSmallRecordWriter(_ndjson.NDJsonProtocolWriter, BenchmarkSmallRecordWriterBase):
    """NDJson writer for the BenchmarkSmallRecord protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        BenchmarkSmallRecordWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, BenchmarkSmallRecordWriterBase.schema)

    def _write_small_record(self, value: collections.abc.Iterable[SmallBenchmarkRecord]) -> None:
        converter = _SmallBenchmarkRecordConverter()
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"smallRecord": json_item})


class NDJsonBenchmarkSmallRecordReader(_ndjson.NDJsonProtocolReader, BenchmarkSmallRecordReaderBase):
    """NDJson writer for the BenchmarkSmallRecord protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        BenchmarkSmallRecordReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, BenchmarkSmallRecordReaderBase.schema)

    def _read_small_record(self) -> collections.abc.Iterable[SmallBenchmarkRecord]:
        converter = _SmallBenchmarkRecordConverter()
        while (json_object := self._read_json_line("smallRecord", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

class NDJsonBenchmarkSmallRecordWithOptionalsWriter(_ndjson.NDJsonProtocolWriter, BenchmarkSmallRecordWithOptionalsWriterBase):
    """NDJson writer for the BenchmarkSmallRecordWithOptionals protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        BenchmarkSmallRecordWithOptionalsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, BenchmarkSmallRecordWithOptionalsWriterBase.schema)

    def _write_small_record(self, value: collections.abc.Iterable[SimpleEncodingCounters]) -> None:
        converter = _SimpleEncodingCountersConverter()
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"smallRecord": json_item})


class NDJsonBenchmarkSmallRecordWithOptionalsReader(_ndjson.NDJsonProtocolReader, BenchmarkSmallRecordWithOptionalsReaderBase):
    """NDJson writer for the BenchmarkSmallRecordWithOptionals protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        BenchmarkSmallRecordWithOptionalsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, BenchmarkSmallRecordWithOptionalsReaderBase.schema)

    def _read_small_record(self) -> collections.abc.Iterable[SimpleEncodingCounters]:
        converter = _SimpleEncodingCountersConverter()
        while (json_object := self._read_json_line("smallRecord", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

class NDJsonBenchmarkSimpleMrdWriter(_ndjson.NDJsonProtocolWriter, BenchmarkSimpleMrdWriterBase):
    """NDJson writer for the BenchmarkSimpleMrd protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        BenchmarkSimpleMrdWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, BenchmarkSimpleMrdWriterBase.schema)

    def _write_data(self, value: collections.abc.Iterable[AcquisitionOrImage]) -> None:
        converter = _ndjson.UnionConverter(AcquisitionOrImage, [(AcquisitionOrImage.Acquisition, _SimpleAcquisitionConverter(), [dict]), (AcquisitionOrImage.Image, _ndjson.NDArrayConverter(_ndjson.float32_converter, 2), [dict])], False)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"data": json_item})


class NDJsonBenchmarkSimpleMrdReader(_ndjson.NDJsonProtocolReader, BenchmarkSimpleMrdReaderBase):
    """NDJson writer for the BenchmarkSimpleMrd protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        BenchmarkSimpleMrdReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, BenchmarkSimpleMrdReaderBase.schema)

    def _read_data(self) -> collections.abc.Iterable[AcquisitionOrImage]:
        converter = _ndjson.UnionConverter(AcquisitionOrImage, [(AcquisitionOrImage.Acquisition, _SimpleAcquisitionConverter(), [dict]), (AcquisitionOrImage.Image, _ndjson.NDArrayConverter(_ndjson.float32_converter, 2), [dict])], False)
        while (json_object := self._read_json_line("data", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

class NDJsonScalarsWriter(_ndjson.NDJsonProtocolWriter, ScalarsWriterBase):
    """NDJson writer for the Scalars protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        ScalarsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, ScalarsWriterBase.schema)

    def _write_int32(self, value: yardl.Int32) -> None:
        converter = _ndjson.int32_converter
        json_value = converter.to_json(value)
        self._write_json_line({"int32": json_value})

    def _write_record(self, value: RecordWithPrimitives) -> None:
        converter = _RecordWithPrimitivesConverter()
        json_value = converter.to_json(value)
        self._write_json_line({"record": json_value})


class NDJsonScalarsReader(_ndjson.NDJsonProtocolReader, ScalarsReaderBase):
    """NDJson writer for the Scalars protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        ScalarsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, ScalarsReaderBase.schema)

    def _read_int32(self) -> yardl.Int32:
        json_object = self._read_json_line("int32", True)
        converter = _ndjson.int32_converter
        return converter.from_json(json_object)

    def _read_record(self) -> RecordWithPrimitives:
        json_object = self._read_json_line("record", True)
        converter = _RecordWithPrimitivesConverter()
        return converter.from_json(json_object)

class NDJsonScalarOptionalsWriter(_ndjson.NDJsonProtocolWriter, ScalarOptionalsWriterBase):
    """NDJson writer for the ScalarOptionals protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        ScalarOptionalsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, ScalarOptionalsWriterBase.schema)

    def _write_optional_int(self, value: typing.Optional[yardl.Int32]) -> None:
        converter = _ndjson.OptionalConverter(_ndjson.int32_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"optionalInt": json_value})

    def _write_optional_record(self, value: typing.Optional[SimpleRecord]) -> None:
        converter = _ndjson.OptionalConverter(_SimpleRecordConverter())
        json_value = converter.to_json(value)
        self._write_json_line({"optionalRecord": json_value})

    def _write_record_with_optional_fields(self, value: RecordWithOptionalFields) -> None:
        converter = _RecordWithOptionalFieldsConverter()
        json_value = converter.to_json(value)
        self._write_json_line({"recordWithOptionalFields": json_value})

    def _write_optional_record_with_optional_fields(self, value: typing.Optional[RecordWithOptionalFields]) -> None:
        converter = _ndjson.OptionalConverter(_RecordWithOptionalFieldsConverter())
        json_value = converter.to_json(value)
        self._write_json_line({"optionalRecordWithOptionalFields": json_value})


class NDJsonScalarOptionalsReader(_ndjson.NDJsonProtocolReader, ScalarOptionalsReaderBase):
    """NDJson writer for the ScalarOptionals protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        ScalarOptionalsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, ScalarOptionalsReaderBase.schema)

    def _read_optional_int(self) -> typing.Optional[yardl.Int32]:
        json_object = self._read_json_line("optionalInt", True)
        converter = _ndjson.OptionalConverter(_ndjson.int32_converter)
        return converter.from_json(json_object)

    def _read_optional_record(self) -> typing.Optional[SimpleRecord]:
        json_object = self._read_json_line("optionalRecord", True)
        converter = _ndjson.OptionalConverter(_SimpleRecordConverter())
        return converter.from_json(json_object)

    def _read_record_with_optional_fields(self) -> RecordWithOptionalFields:
        json_object = self._read_json_line("recordWithOptionalFields", True)
        converter = _RecordWithOptionalFieldsConverter()
        return converter.from_json(json_object)

    def _read_optional_record_with_optional_fields(self) -> typing.Optional[RecordWithOptionalFields]:
        json_object = self._read_json_line("optionalRecordWithOptionalFields", True)
        converter = _ndjson.OptionalConverter(_RecordWithOptionalFieldsConverter())
        return converter.from_json(json_object)

class NDJsonNestedRecordsWriter(_ndjson.NDJsonProtocolWriter, NestedRecordsWriterBase):
    """NDJson writer for the NestedRecords protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        NestedRecordsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, NestedRecordsWriterBase.schema)

    def _write_tuple_with_records(self, value: TupleWithRecords) -> None:
        converter = _TupleWithRecordsConverter()
        json_value = converter.to_json(value)
        self._write_json_line({"tupleWithRecords": json_value})


class NDJsonNestedRecordsReader(_ndjson.NDJsonProtocolReader, NestedRecordsReaderBase):
    """NDJson writer for the NestedRecords protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        NestedRecordsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, NestedRecordsReaderBase.schema)

    def _read_tuple_with_records(self) -> TupleWithRecords:
        json_object = self._read_json_line("tupleWithRecords", True)
        converter = _TupleWithRecordsConverter()
        return converter.from_json(json_object)

class NDJsonVlensWriter(_ndjson.NDJsonProtocolWriter, VlensWriterBase):
    """NDJson writer for the Vlens protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        VlensWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, VlensWriterBase.schema)

    def _write_int_vector(self, value: list[yardl.Int32]) -> None:
        converter = _ndjson.VectorConverter(_ndjson.int32_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"intVector": json_value})

    def _write_complex_vector(self, value: list[yardl.ComplexFloat]) -> None:
        converter = _ndjson.VectorConverter(_ndjson.complexfloat32_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"complexVector": json_value})

    def _write_record_with_vlens(self, value: RecordWithVlens) -> None:
        converter = _RecordWithVlensConverter()
        json_value = converter.to_json(value)
        self._write_json_line({"recordWithVlens": json_value})

    def _write_vlen_of_record_with_vlens(self, value: list[RecordWithVlens]) -> None:
        converter = _ndjson.VectorConverter(_RecordWithVlensConverter())
        json_value = converter.to_json(value)
        self._write_json_line({"vlenOfRecordWithVlens": json_value})


class NDJsonVlensReader(_ndjson.NDJsonProtocolReader, VlensReaderBase):
    """NDJson writer for the Vlens protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        VlensReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, VlensReaderBase.schema)

    def _read_int_vector(self) -> list[yardl.Int32]:
        json_object = self._read_json_line("intVector", True)
        converter = _ndjson.VectorConverter(_ndjson.int32_converter)
        return converter.from_json(json_object)

    def _read_complex_vector(self) -> list[yardl.ComplexFloat]:
        json_object = self._read_json_line("complexVector", True)
        converter = _ndjson.VectorConverter(_ndjson.complexfloat32_converter)
        return converter.from_json(json_object)

    def _read_record_with_vlens(self) -> RecordWithVlens:
        json_object = self._read_json_line("recordWithVlens", True)
        converter = _RecordWithVlensConverter()
        return converter.from_json(json_object)

    def _read_vlen_of_record_with_vlens(self) -> list[RecordWithVlens]:
        json_object = self._read_json_line("vlenOfRecordWithVlens", True)
        converter = _ndjson.VectorConverter(_RecordWithVlensConverter())
        return converter.from_json(json_object)

class NDJsonStringsWriter(_ndjson.NDJsonProtocolWriter, StringsWriterBase):
    """NDJson writer for the Strings protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        StringsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, StringsWriterBase.schema)

    def _write_single_string(self, value: str) -> None:
        converter = _ndjson.string_converter
        json_value = converter.to_json(value)
        self._write_json_line({"singleString": json_value})

    def _write_rec_with_string(self, value: RecordWithStrings) -> None:
        converter = _RecordWithStringsConverter()
        json_value = converter.to_json(value)
        self._write_json_line({"recWithString": json_value})


class NDJsonStringsReader(_ndjson.NDJsonProtocolReader, StringsReaderBase):
    """NDJson writer for the Strings protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        StringsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, StringsReaderBase.schema)

    def _read_single_string(self) -> str:
        json_object = self._read_json_line("singleString", True)
        converter = _ndjson.string_converter
        return converter.from_json(json_object)

    def _read_rec_with_string(self) -> RecordWithStrings:
        json_object = self._read_json_line("recWithString", True)
        converter = _RecordWithStringsConverter()
        return converter.from_json(json_object)

class NDJsonOptionalVectorsWriter(_ndjson.NDJsonProtocolWriter, OptionalVectorsWriterBase):
    """NDJson writer for the OptionalVectors protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        OptionalVectorsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, OptionalVectorsWriterBase.schema)

    def _write_record_with_optional_vector(self, value: RecordWithOptionalVector) -> None:
        converter = _RecordWithOptionalVectorConverter()
        json_value = converter.to_json(value)
        self._write_json_line({"recordWithOptionalVector": json_value})


class NDJsonOptionalVectorsReader(_ndjson.NDJsonProtocolReader, OptionalVectorsReaderBase):
    """NDJson writer for the OptionalVectors protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        OptionalVectorsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, OptionalVectorsReaderBase.schema)

    def _read_record_with_optional_vector(self) -> RecordWithOptionalVector:
        json_object = self._read_json_line("recordWithOptionalVector", True)
        converter = _RecordWithOptionalVectorConverter()
        return converter.from_json(json_object)

class NDJsonFixedVectorsWriter(_ndjson.NDJsonProtocolWriter, FixedVectorsWriterBase):
    """NDJson writer for the FixedVectors protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        FixedVectorsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, FixedVectorsWriterBase.schema)

    def _write_fixed_int_vector(self, value: list[yardl.Int32]) -> None:
        converter = _ndjson.FixedVectorConverter(_ndjson.int32_converter, 5)
        json_value = converter.to_json(value)
        self._write_json_line({"fixedIntVector": json_value})

    def _write_fixed_simple_record_vector(self, value: list[SimpleRecord]) -> None:
        converter = _ndjson.FixedVectorConverter(_SimpleRecordConverter(), 3)
        json_value = converter.to_json(value)
        self._write_json_line({"fixedSimpleRecordVector": json_value})

    def _write_fixed_record_with_vlens_vector(self, value: list[RecordWithVlens]) -> None:
        converter = _ndjson.FixedVectorConverter(_RecordWithVlensConverter(), 2)
        json_value = converter.to_json(value)
        self._write_json_line({"fixedRecordWithVlensVector": json_value})

    def _write_record_with_fixed_vectors(self, value: RecordWithFixedVectors) -> None:
        converter = _RecordWithFixedVectorsConverter()
        json_value = converter.to_json(value)
        self._write_json_line({"recordWithFixedVectors": json_value})


class NDJsonFixedVectorsReader(_ndjson.NDJsonProtocolReader, FixedVectorsReaderBase):
    """NDJson writer for the FixedVectors protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        FixedVectorsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, FixedVectorsReaderBase.schema)

    def _read_fixed_int_vector(self) -> list[yardl.Int32]:
        json_object = self._read_json_line("fixedIntVector", True)
        converter = _ndjson.FixedVectorConverter(_ndjson.int32_converter, 5)
        return converter.from_json(json_object)

    def _read_fixed_simple_record_vector(self) -> list[SimpleRecord]:
        json_object = self._read_json_line("fixedSimpleRecordVector", True)
        converter = _ndjson.FixedVectorConverter(_SimpleRecordConverter(), 3)
        return converter.from_json(json_object)

    def _read_fixed_record_with_vlens_vector(self) -> list[RecordWithVlens]:
        json_object = self._read_json_line("fixedRecordWithVlensVector", True)
        converter = _ndjson.FixedVectorConverter(_RecordWithVlensConverter(), 2)
        return converter.from_json(json_object)

    def _read_record_with_fixed_vectors(self) -> RecordWithFixedVectors:
        json_object = self._read_json_line("recordWithFixedVectors", True)
        converter = _RecordWithFixedVectorsConverter()
        return converter.from_json(json_object)

class NDJsonStreamsWriter(_ndjson.NDJsonProtocolWriter, StreamsWriterBase):
    """NDJson writer for the Streams protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        StreamsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, StreamsWriterBase.schema)

    def _write_int_data(self, value: collections.abc.Iterable[yardl.Int32]) -> None:
        converter = _ndjson.int32_converter
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"intData": json_item})

    def _write_optional_int_data(self, value: collections.abc.Iterable[typing.Optional[yardl.Int32]]) -> None:
        converter = _ndjson.OptionalConverter(_ndjson.int32_converter)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"optionalIntData": json_item})

    def _write_record_with_optional_vector_data(self, value: collections.abc.Iterable[RecordWithOptionalVector]) -> None:
        converter = _RecordWithOptionalVectorConverter()
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"recordWithOptionalVectorData": json_item})

    def _write_fixed_vector(self, value: collections.abc.Iterable[list[yardl.Int32]]) -> None:
        converter = _ndjson.FixedVectorConverter(_ndjson.int32_converter, 3)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"fixedVector": json_item})


class NDJsonStreamsReader(_ndjson.NDJsonProtocolReader, StreamsReaderBase):
    """NDJson writer for the Streams protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        StreamsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, StreamsReaderBase.schema)

    def _read_int_data(self) -> collections.abc.Iterable[yardl.Int32]:
        converter = _ndjson.int32_converter
        while (json_object := self._read_json_line("intData", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

    def _read_optional_int_data(self) -> collections.abc.Iterable[typing.Optional[yardl.Int32]]:
        converter = _ndjson.OptionalConverter(_ndjson.int32_converter)
        while (json_object := self._read_json_line("optionalIntData", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

    def _read_record_with_optional_vector_data(self) -> collections.abc.Iterable[RecordWithOptionalVector]:
        converter = _RecordWithOptionalVectorConverter()
        while (json_object := self._read_json_line("recordWithOptionalVectorData", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

    def _read_fixed_vector(self) -> collections.abc.Iterable[list[yardl.Int32]]:
        converter = _ndjson.FixedVectorConverter(_ndjson.int32_converter, 3)
        while (json_object := self._read_json_line("fixedVector", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

class NDJsonFixedArraysWriter(_ndjson.NDJsonProtocolWriter, FixedArraysWriterBase):
    """NDJson writer for the FixedArrays protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        FixedArraysWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, FixedArraysWriterBase.schema)

    def _write_ints(self, value: npt.NDArray[np.int32]) -> None:
        converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (2, 3,))
        json_value = converter.to_json(value)
        self._write_json_line({"ints": json_value})

    def _write_fixed_simple_record_array(self, value: npt.NDArray[np.void]) -> None:
        converter = _ndjson.FixedNDArrayConverter(_SimpleRecordConverter(), (3, 2,))
        json_value = converter.to_json(value)
        self._write_json_line({"fixedSimpleRecordArray": json_value})

    def _write_fixed_record_with_vlens_array(self, value: npt.NDArray[np.void]) -> None:
        converter = _ndjson.FixedNDArrayConverter(_RecordWithVlensConverter(), (2, 2,))
        json_value = converter.to_json(value)
        self._write_json_line({"fixedRecordWithVlensArray": json_value})

    def _write_record_with_fixed_arrays(self, value: RecordWithFixedArrays) -> None:
        converter = _RecordWithFixedArraysConverter()
        json_value = converter.to_json(value)
        self._write_json_line({"recordWithFixedArrays": json_value})

    def _write_named_array(self, value: NamedFixedNDArray) -> None:
        converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (2, 4,))
        json_value = converter.to_json(value)
        self._write_json_line({"namedArray": json_value})


class NDJsonFixedArraysReader(_ndjson.NDJsonProtocolReader, FixedArraysReaderBase):
    """NDJson writer for the FixedArrays protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        FixedArraysReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, FixedArraysReaderBase.schema)

    def _read_ints(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("ints", True)
        converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (2, 3,))
        return converter.from_json(json_object)

    def _read_fixed_simple_record_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("fixedSimpleRecordArray", True)
        converter = _ndjson.FixedNDArrayConverter(_SimpleRecordConverter(), (3, 2,))
        return converter.from_json(json_object)

    def _read_fixed_record_with_vlens_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("fixedRecordWithVlensArray", True)
        converter = _ndjson.FixedNDArrayConverter(_RecordWithVlensConverter(), (2, 2,))
        return converter.from_json(json_object)

    def _read_record_with_fixed_arrays(self) -> RecordWithFixedArrays:
        json_object = self._read_json_line("recordWithFixedArrays", True)
        converter = _RecordWithFixedArraysConverter()
        return converter.from_json(json_object)

    def _read_named_array(self) -> NamedFixedNDArray:
        json_object = self._read_json_line("namedArray", True)
        converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (2, 4,))
        return converter.from_json(json_object)

class NDJsonSubarraysWriter(_ndjson.NDJsonProtocolWriter, SubarraysWriterBase):
    """NDJson writer for the Subarrays protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        SubarraysWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, SubarraysWriterBase.schema)

    def _write_dynamic_with_fixed_int_subarray(self, value: npt.NDArray[np.int32]) -> None:
        converter = _ndjson.DynamicNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)))
        json_value = converter.to_json(value)
        self._write_json_line({"dynamicWithFixedIntSubarray": json_value})

    def _write_dynamic_with_fixed_float_subarray(self, value: npt.NDArray[np.float32]) -> None:
        converter = _ndjson.DynamicNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (3,)))
        json_value = converter.to_json(value)
        self._write_json_line({"dynamicWithFixedFloatSubarray": json_value})

    def _write_known_dim_count_with_fixed_int_subarray(self, value: npt.NDArray[np.int32]) -> None:
        converter = _ndjson.NDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), 1)
        json_value = converter.to_json(value)
        self._write_json_line({"knownDimCountWithFixedIntSubarray": json_value})

    def _write_known_dim_count_with_fixed_float_subarray(self, value: npt.NDArray[np.float32]) -> None:
        converter = _ndjson.NDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (3,)), 1)
        json_value = converter.to_json(value)
        self._write_json_line({"knownDimCountWithFixedFloatSubarray": json_value})

    def _write_fixed_with_fixed_int_subarray(self, value: npt.NDArray[np.int32]) -> None:
        converter = _ndjson.FixedNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), (2,))
        json_value = converter.to_json(value)
        self._write_json_line({"fixedWithFixedIntSubarray": json_value})

    def _write_fixed_with_fixed_float_subarray(self, value: npt.NDArray[np.float32]) -> None:
        converter = _ndjson.FixedNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (3,)), (2,))
        json_value = converter.to_json(value)
        self._write_json_line({"fixedWithFixedFloatSubarray": json_value})

    def _write_nested_subarray(self, value: npt.NDArray[np.int32]) -> None:
        converter = _ndjson.DynamicNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), (2,)))
        json_value = converter.to_json(value)
        self._write_json_line({"nestedSubarray": json_value})

    def _write_dynamic_with_fixed_vector_subarray(self, value: npt.NDArray[np.int32]) -> None:
        converter = _ndjson.DynamicNDArrayConverter(_ndjson.FixedVectorConverter(_ndjson.int32_converter, 3))
        json_value = converter.to_json(value)
        self._write_json_line({"dynamicWithFixedVectorSubarray": json_value})

    def _write_generic_subarray(self, value: Image[np.int32]) -> None:
        converter = _ndjson.NDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), 2)
        json_value = converter.to_json(value)
        self._write_json_line({"genericSubarray": json_value})


class NDJsonSubarraysReader(_ndjson.NDJsonProtocolReader, SubarraysReaderBase):
    """NDJson writer for the Subarrays protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        SubarraysReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, SubarraysReaderBase.schema)

    def _read_dynamic_with_fixed_int_subarray(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("dynamicWithFixedIntSubarray", True)
        converter = _ndjson.DynamicNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)))
        return converter.from_json(json_object)

    def _read_dynamic_with_fixed_float_subarray(self) -> npt.NDArray[np.float32]:
        json_object = self._read_json_line("dynamicWithFixedFloatSubarray", True)
        converter = _ndjson.DynamicNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (3,)))
        return converter.from_json(json_object)

    def _read_known_dim_count_with_fixed_int_subarray(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("knownDimCountWithFixedIntSubarray", True)
        converter = _ndjson.NDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), 1)
        return converter.from_json(json_object)

    def _read_known_dim_count_with_fixed_float_subarray(self) -> npt.NDArray[np.float32]:
        json_object = self._read_json_line("knownDimCountWithFixedFloatSubarray", True)
        converter = _ndjson.NDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (3,)), 1)
        return converter.from_json(json_object)

    def _read_fixed_with_fixed_int_subarray(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("fixedWithFixedIntSubarray", True)
        converter = _ndjson.FixedNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), (2,))
        return converter.from_json(json_object)

    def _read_fixed_with_fixed_float_subarray(self) -> npt.NDArray[np.float32]:
        json_object = self._read_json_line("fixedWithFixedFloatSubarray", True)
        converter = _ndjson.FixedNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (3,)), (2,))
        return converter.from_json(json_object)

    def _read_nested_subarray(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("nestedSubarray", True)
        converter = _ndjson.DynamicNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), (2,)))
        return converter.from_json(json_object)

    def _read_dynamic_with_fixed_vector_subarray(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("dynamicWithFixedVectorSubarray", True)
        converter = _ndjson.DynamicNDArrayConverter(_ndjson.FixedVectorConverter(_ndjson.int32_converter, 3))
        return converter.from_json(json_object)

    def _read_generic_subarray(self) -> Image[np.int32]:
        json_object = self._read_json_line("genericSubarray", True)
        converter = _ndjson.NDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), 2)
        return converter.from_json(json_object)

class NDJsonSubarraysInRecordsWriter(_ndjson.NDJsonProtocolWriter, SubarraysInRecordsWriterBase):
    """NDJson writer for the SubarraysInRecords protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        SubarraysInRecordsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, SubarraysInRecordsWriterBase.schema)

    def _write_with_fixed_subarrays(self, value: npt.NDArray[np.void]) -> None:
        converter = _ndjson.DynamicNDArrayConverter(_RecordWithFixedCollectionsConverter())
        json_value = converter.to_json(value)
        self._write_json_line({"withFixedSubarrays": json_value})

    def _write_with_vlen_subarrays(self, value: npt.NDArray[np.void]) -> None:
        converter = _ndjson.DynamicNDArrayConverter(_RecordWithVlenCollectionsConverter())
        json_value = converter.to_json(value)
        self._write_json_line({"withVlenSubarrays": json_value})


class NDJsonSubarraysInRecordsReader(_ndjson.NDJsonProtocolReader, SubarraysInRecordsReaderBase):
    """NDJson writer for the SubarraysInRecords protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        SubarraysInRecordsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, SubarraysInRecordsReaderBase.schema)

    def _read_with_fixed_subarrays(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("withFixedSubarrays", True)
        converter = _ndjson.DynamicNDArrayConverter(_RecordWithFixedCollectionsConverter())
        return converter.from_json(json_object)

    def _read_with_vlen_subarrays(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("withVlenSubarrays", True)
        converter = _ndjson.DynamicNDArrayConverter(_RecordWithVlenCollectionsConverter())
        return converter.from_json(json_object)

class NDJsonNDArraysWriter(_ndjson.NDJsonProtocolWriter, NDArraysWriterBase):
    """NDJson writer for the NDArrays protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        NDArraysWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, NDArraysWriterBase.schema)

    def _write_ints(self, value: npt.NDArray[np.int32]) -> None:
        converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        json_value = converter.to_json(value)
        self._write_json_line({"ints": json_value})

    def _write_simple_record_array(self, value: npt.NDArray[np.void]) -> None:
        converter = _ndjson.NDArrayConverter(_SimpleRecordConverter(), 2)
        json_value = converter.to_json(value)
        self._write_json_line({"simpleRecordArray": json_value})

    def _write_record_with_vlens_array(self, value: npt.NDArray[np.void]) -> None:
        converter = _ndjson.NDArrayConverter(_RecordWithVlensConverter(), 2)
        json_value = converter.to_json(value)
        self._write_json_line({"recordWithVlensArray": json_value})

    def _write_record_with_nd_arrays(self, value: RecordWithNDArrays) -> None:
        converter = _RecordWithNDArraysConverter()
        json_value = converter.to_json(value)
        self._write_json_line({"recordWithNDArrays": json_value})

    def _write_named_array(self, value: NamedNDArray) -> None:
        converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        json_value = converter.to_json(value)
        self._write_json_line({"namedArray": json_value})


class NDJsonNDArraysReader(_ndjson.NDJsonProtocolReader, NDArraysReaderBase):
    """NDJson writer for the NDArrays protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        NDArraysReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, NDArraysReaderBase.schema)

    def _read_ints(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("ints", True)
        converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        return converter.from_json(json_object)

    def _read_simple_record_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("simpleRecordArray", True)
        converter = _ndjson.NDArrayConverter(_SimpleRecordConverter(), 2)
        return converter.from_json(json_object)

    def _read_record_with_vlens_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("recordWithVlensArray", True)
        converter = _ndjson.NDArrayConverter(_RecordWithVlensConverter(), 2)
        return converter.from_json(json_object)

    def _read_record_with_nd_arrays(self) -> RecordWithNDArrays:
        json_object = self._read_json_line("recordWithNDArrays", True)
        converter = _RecordWithNDArraysConverter()
        return converter.from_json(json_object)

    def _read_named_array(self) -> NamedNDArray:
        json_object = self._read_json_line("namedArray", True)
        converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        return converter.from_json(json_object)

class NDJsonNDArraysSingleDimensionWriter(_ndjson.NDJsonProtocolWriter, NDArraysSingleDimensionWriterBase):
    """NDJson writer for the NDArraysSingleDimension protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        NDArraysSingleDimensionWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, NDArraysSingleDimensionWriterBase.schema)

    def _write_ints(self, value: npt.NDArray[np.int32]) -> None:
        converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 1)
        json_value = converter.to_json(value)
        self._write_json_line({"ints": json_value})

    def _write_simple_record_array(self, value: npt.NDArray[np.void]) -> None:
        converter = _ndjson.NDArrayConverter(_SimpleRecordConverter(), 1)
        json_value = converter.to_json(value)
        self._write_json_line({"simpleRecordArray": json_value})

    def _write_record_with_vlens_array(self, value: npt.NDArray[np.void]) -> None:
        converter = _ndjson.NDArrayConverter(_RecordWithVlensConverter(), 1)
        json_value = converter.to_json(value)
        self._write_json_line({"recordWithVlensArray": json_value})

    def _write_record_with_nd_arrays(self, value: RecordWithNDArraysSingleDimension) -> None:
        converter = _RecordWithNDArraysSingleDimensionConverter()
        json_value = converter.to_json(value)
        self._write_json_line({"recordWithNDArrays": json_value})


class NDJsonNDArraysSingleDimensionReader(_ndjson.NDJsonProtocolReader, NDArraysSingleDimensionReaderBase):
    """NDJson writer for the NDArraysSingleDimension protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        NDArraysSingleDimensionReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, NDArraysSingleDimensionReaderBase.schema)

    def _read_ints(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("ints", True)
        converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 1)
        return converter.from_json(json_object)

    def _read_simple_record_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("simpleRecordArray", True)
        converter = _ndjson.NDArrayConverter(_SimpleRecordConverter(), 1)
        return converter.from_json(json_object)

    def _read_record_with_vlens_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("recordWithVlensArray", True)
        converter = _ndjson.NDArrayConverter(_RecordWithVlensConverter(), 1)
        return converter.from_json(json_object)

    def _read_record_with_nd_arrays(self) -> RecordWithNDArraysSingleDimension:
        json_object = self._read_json_line("recordWithNDArrays", True)
        converter = _RecordWithNDArraysSingleDimensionConverter()
        return converter.from_json(json_object)

class NDJsonDynamicNDArraysWriter(_ndjson.NDJsonProtocolWriter, DynamicNDArraysWriterBase):
    """NDJson writer for the DynamicNDArrays protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        DynamicNDArraysWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, DynamicNDArraysWriterBase.schema)

    def _write_ints(self, value: npt.NDArray[np.int32]) -> None:
        converter = _ndjson.DynamicNDArrayConverter(_ndjson.int32_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"ints": json_value})

    def _write_simple_record_array(self, value: npt.NDArray[np.void]) -> None:
        converter = _ndjson.DynamicNDArrayConverter(_SimpleRecordConverter())
        json_value = converter.to_json(value)
        self._write_json_line({"simpleRecordArray": json_value})

    def _write_record_with_vlens_array(self, value: npt.NDArray[np.void]) -> None:
        converter = _ndjson.DynamicNDArrayConverter(_RecordWithVlensConverter())
        json_value = converter.to_json(value)
        self._write_json_line({"recordWithVlensArray": json_value})

    def _write_record_with_dynamic_nd_arrays(self, value: RecordWithDynamicNDArrays) -> None:
        converter = _RecordWithDynamicNDArraysConverter()
        json_value = converter.to_json(value)
        self._write_json_line({"recordWithDynamicNDArrays": json_value})


class NDJsonDynamicNDArraysReader(_ndjson.NDJsonProtocolReader, DynamicNDArraysReaderBase):
    """NDJson writer for the DynamicNDArrays protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        DynamicNDArraysReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, DynamicNDArraysReaderBase.schema)

    def _read_ints(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("ints", True)
        converter = _ndjson.DynamicNDArrayConverter(_ndjson.int32_converter)
        return converter.from_json(json_object)

    def _read_simple_record_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("simpleRecordArray", True)
        converter = _ndjson.DynamicNDArrayConverter(_SimpleRecordConverter())
        return converter.from_json(json_object)

    def _read_record_with_vlens_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("recordWithVlensArray", True)
        converter = _ndjson.DynamicNDArrayConverter(_RecordWithVlensConverter())
        return converter.from_json(json_object)

    def _read_record_with_dynamic_nd_arrays(self) -> RecordWithDynamicNDArrays:
        json_object = self._read_json_line("recordWithDynamicNDArrays", True)
        converter = _RecordWithDynamicNDArraysConverter()
        return converter.from_json(json_object)

class NDJsonMapsWriter(_ndjson.NDJsonProtocolWriter, MapsWriterBase):
    """NDJson writer for the Maps protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        MapsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, MapsWriterBase.schema)

    def _write_string_to_int(self, value: dict[str, yardl.Int32]) -> None:
        converter = _ndjson.MapConverter(_ndjson.string_converter, _ndjson.int32_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"stringToInt": json_value})

    def _write_int_to_string(self, value: dict[yardl.Int32, str]) -> None:
        converter = _ndjson.MapConverter(_ndjson.int32_converter, _ndjson.string_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"intToString": json_value})

    def _write_string_to_union(self, value: dict[str, StringOrInt32]) -> None:
        converter = _ndjson.MapConverter(_ndjson.string_converter, _ndjson.UnionConverter(StringOrInt32, [(StringOrInt32.String, _ndjson.string_converter, [str]), (StringOrInt32.Int32, _ndjson.int32_converter, [int, float])], True))
        json_value = converter.to_json(value)
        self._write_json_line({"stringToUnion": json_value})

    def _write_aliased_generic(self, value: AliasedMap[str, yardl.Int32]) -> None:
        converter = _ndjson.MapConverter(_ndjson.string_converter, _ndjson.int32_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"aliasedGeneric": json_value})


class NDJsonMapsReader(_ndjson.NDJsonProtocolReader, MapsReaderBase):
    """NDJson writer for the Maps protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        MapsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, MapsReaderBase.schema)

    def _read_string_to_int(self) -> dict[str, yardl.Int32]:
        json_object = self._read_json_line("stringToInt", True)
        converter = _ndjson.MapConverter(_ndjson.string_converter, _ndjson.int32_converter)
        return converter.from_json(json_object)

    def _read_int_to_string(self) -> dict[yardl.Int32, str]:
        json_object = self._read_json_line("intToString", True)
        converter = _ndjson.MapConverter(_ndjson.int32_converter, _ndjson.string_converter)
        return converter.from_json(json_object)

    def _read_string_to_union(self) -> dict[str, StringOrInt32]:
        json_object = self._read_json_line("stringToUnion", True)
        converter = _ndjson.MapConverter(_ndjson.string_converter, _ndjson.UnionConverter(StringOrInt32, [(StringOrInt32.String, _ndjson.string_converter, [str]), (StringOrInt32.Int32, _ndjson.int32_converter, [int, float])], True))
        return converter.from_json(json_object)

    def _read_aliased_generic(self) -> AliasedMap[str, yardl.Int32]:
        json_object = self._read_json_line("aliasedGeneric", True)
        converter = _ndjson.MapConverter(_ndjson.string_converter, _ndjson.int32_converter)
        return converter.from_json(json_object)

class NDJsonUnionsWriter(_ndjson.NDJsonProtocolWriter, UnionsWriterBase):
    """NDJson writer for the Unions protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        UnionsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, UnionsWriterBase.schema)

    def _write_int_or_simple_record(self, value: Int32OrSimpleRecord) -> None:
        converter = _ndjson.UnionConverter(Int32OrSimpleRecord, [(Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        json_value = converter.to_json(value)
        self._write_json_line({"intOrSimpleRecord": json_value})

    def _write_int_or_record_with_vlens(self, value: Int32OrRecordWithVlens) -> None:
        converter = _ndjson.UnionConverter(Int32OrRecordWithVlens, [(Int32OrRecordWithVlens.Int32, _ndjson.int32_converter, [int, float]), (Int32OrRecordWithVlens.RecordWithVlens, _RecordWithVlensConverter(), [dict])], True)
        json_value = converter.to_json(value)
        self._write_json_line({"intOrRecordWithVlens": json_value})

    def _write_monosotate_or_int_or_simple_record(self, value: typing.Optional[Int32OrSimpleRecord]) -> None:
        converter = _ndjson.UnionConverter(Int32OrSimpleRecord, [None, (Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        json_value = converter.to_json(value)
        self._write_json_line({"monosotateOrIntOrSimpleRecord": json_value})

    def _write_record_with_unions(self, value: RecordWithUnions) -> None:
        converter = _RecordWithUnionsConverter()
        json_value = converter.to_json(value)
        self._write_json_line({"recordWithUnions": json_value})


class NDJsonUnionsReader(_ndjson.NDJsonProtocolReader, UnionsReaderBase):
    """NDJson writer for the Unions protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        UnionsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, UnionsReaderBase.schema)

    def _read_int_or_simple_record(self) -> Int32OrSimpleRecord:
        json_object = self._read_json_line("intOrSimpleRecord", True)
        converter = _ndjson.UnionConverter(Int32OrSimpleRecord, [(Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        return converter.from_json(json_object)

    def _read_int_or_record_with_vlens(self) -> Int32OrRecordWithVlens:
        json_object = self._read_json_line("intOrRecordWithVlens", True)
        converter = _ndjson.UnionConverter(Int32OrRecordWithVlens, [(Int32OrRecordWithVlens.Int32, _ndjson.int32_converter, [int, float]), (Int32OrRecordWithVlens.RecordWithVlens, _RecordWithVlensConverter(), [dict])], True)
        return converter.from_json(json_object)

    def _read_monosotate_or_int_or_simple_record(self) -> typing.Optional[Int32OrSimpleRecord]:
        json_object = self._read_json_line("monosotateOrIntOrSimpleRecord", True)
        converter = _ndjson.UnionConverter(Int32OrSimpleRecord, [None, (Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        return converter.from_json(json_object)

    def _read_record_with_unions(self) -> RecordWithUnions:
        json_object = self._read_json_line("recordWithUnions", True)
        converter = _RecordWithUnionsConverter()
        return converter.from_json(json_object)

class NDJsonStreamsOfUnionsWriter(_ndjson.NDJsonProtocolWriter, StreamsOfUnionsWriterBase):
    """NDJson writer for the StreamsOfUnions protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        StreamsOfUnionsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, StreamsOfUnionsWriterBase.schema)

    def _write_int_or_simple_record(self, value: collections.abc.Iterable[Int32OrSimpleRecord]) -> None:
        converter = _ndjson.UnionConverter(Int32OrSimpleRecord, [(Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"intOrSimpleRecord": json_item})

    def _write_nullable_int_or_simple_record(self, value: collections.abc.Iterable[typing.Optional[Int32OrSimpleRecord]]) -> None:
        converter = _ndjson.UnionConverter(Int32OrSimpleRecord, [None, (Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"nullableIntOrSimpleRecord": json_item})


class NDJsonStreamsOfUnionsReader(_ndjson.NDJsonProtocolReader, StreamsOfUnionsReaderBase):
    """NDJson writer for the StreamsOfUnions protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        StreamsOfUnionsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, StreamsOfUnionsReaderBase.schema)

    def _read_int_or_simple_record(self) -> collections.abc.Iterable[Int32OrSimpleRecord]:
        converter = _ndjson.UnionConverter(Int32OrSimpleRecord, [(Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        while (json_object := self._read_json_line("intOrSimpleRecord", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

    def _read_nullable_int_or_simple_record(self) -> collections.abc.Iterable[typing.Optional[Int32OrSimpleRecord]]:
        converter = _ndjson.UnionConverter(Int32OrSimpleRecord, [None, (Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        while (json_object := self._read_json_line("nullableIntOrSimpleRecord", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

class NDJsonEnumsWriter(_ndjson.NDJsonProtocolWriter, EnumsWriterBase):
    """NDJson writer for the Enums protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        EnumsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, EnumsWriterBase.schema)

    def _write_single(self, value: Fruits) -> None:
        converter = _ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map)
        json_value = converter.to_json(value)
        self._write_json_line({"single": json_value})

    def _write_vec(self, value: list[Fruits]) -> None:
        converter = _ndjson.VectorConverter(_ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map))
        json_value = converter.to_json(value)
        self._write_json_line({"vec": json_value})

    def _write_size(self, value: SizeBasedEnum) -> None:
        converter = _ndjson.EnumConverter(SizeBasedEnum, np.uint64, _size_based_enum_name_to_value_map, _size_based_enum_value_to_name_map)
        json_value = converter.to_json(value)
        self._write_json_line({"size": json_value})


class NDJsonEnumsReader(_ndjson.NDJsonProtocolReader, EnumsReaderBase):
    """NDJson writer for the Enums protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        EnumsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, EnumsReaderBase.schema)

    def _read_single(self) -> Fruits:
        json_object = self._read_json_line("single", True)
        converter = _ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map)
        return converter.from_json(json_object)

    def _read_vec(self) -> list[Fruits]:
        json_object = self._read_json_line("vec", True)
        converter = _ndjson.VectorConverter(_ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map))
        return converter.from_json(json_object)

    def _read_size(self) -> SizeBasedEnum:
        json_object = self._read_json_line("size", True)
        converter = _ndjson.EnumConverter(SizeBasedEnum, np.uint64, _size_based_enum_name_to_value_map, _size_based_enum_value_to_name_map)
        return converter.from_json(json_object)

class NDJsonFlagsWriter(_ndjson.NDJsonProtocolWriter, FlagsWriterBase):
    """NDJson writer for the Flags protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        FlagsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, FlagsWriterBase.schema)

    def _write_days(self, value: collections.abc.Iterable[DaysOfWeek]) -> None:
        converter = _ndjson.FlagsConverter(DaysOfWeek, np.int32, _days_of_week_name_to_value_map, _days_of_week_value_to_name_map)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"days": json_item})

    def _write_formats(self, value: collections.abc.Iterable[TextFormat]) -> None:
        converter = _ndjson.FlagsConverter(TextFormat, np.uint64, _text_format_name_to_value_map, _text_format_value_to_name_map)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"formats": json_item})


class NDJsonFlagsReader(_ndjson.NDJsonProtocolReader, FlagsReaderBase):
    """NDJson writer for the Flags protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        FlagsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, FlagsReaderBase.schema)

    def _read_days(self) -> collections.abc.Iterable[DaysOfWeek]:
        converter = _ndjson.FlagsConverter(DaysOfWeek, np.int32, _days_of_week_name_to_value_map, _days_of_week_value_to_name_map)
        while (json_object := self._read_json_line("days", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

    def _read_formats(self) -> collections.abc.Iterable[TextFormat]:
        converter = _ndjson.FlagsConverter(TextFormat, np.uint64, _text_format_name_to_value_map, _text_format_value_to_name_map)
        while (json_object := self._read_json_line("formats", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

class NDJsonStateTestWriter(_ndjson.NDJsonProtocolWriter, StateTestWriterBase):
    """NDJson writer for the StateTest protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        StateTestWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, StateTestWriterBase.schema)

    def _write_an_int(self, value: yardl.Int32) -> None:
        converter = _ndjson.int32_converter
        json_value = converter.to_json(value)
        self._write_json_line({"anInt": json_value})

    def _write_a_stream(self, value: collections.abc.Iterable[yardl.Int32]) -> None:
        converter = _ndjson.int32_converter
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"aStream": json_item})

    def _write_another_int(self, value: yardl.Int32) -> None:
        converter = _ndjson.int32_converter
        json_value = converter.to_json(value)
        self._write_json_line({"anotherInt": json_value})


class NDJsonStateTestReader(_ndjson.NDJsonProtocolReader, StateTestReaderBase):
    """NDJson writer for the StateTest protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        StateTestReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, StateTestReaderBase.schema)

    def _read_an_int(self) -> yardl.Int32:
        json_object = self._read_json_line("anInt", True)
        converter = _ndjson.int32_converter
        return converter.from_json(json_object)

    def _read_a_stream(self) -> collections.abc.Iterable[yardl.Int32]:
        converter = _ndjson.int32_converter
        while (json_object := self._read_json_line("aStream", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

    def _read_another_int(self) -> yardl.Int32:
        json_object = self._read_json_line("anotherInt", True)
        converter = _ndjson.int32_converter
        return converter.from_json(json_object)

class NDJsonSimpleGenericsWriter(_ndjson.NDJsonProtocolWriter, SimpleGenericsWriterBase):
    """NDJson writer for the SimpleGenerics protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        SimpleGenericsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, SimpleGenericsWriterBase.schema)

    def _write_float_image(self, value: Image[np.float32]) -> None:
        converter = _ndjson.NDArrayConverter(_ndjson.float32_converter, 2)
        json_value = converter.to_json(value)
        self._write_json_line({"floatImage": json_value})

    def _write_int_image(self, value: Image[np.int32]) -> None:
        converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        json_value = converter.to_json(value)
        self._write_json_line({"intImage": json_value})

    def _write_int_image_alternate_syntax(self, value: Image[np.int32]) -> None:
        converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        json_value = converter.to_json(value)
        self._write_json_line({"intImageAlternateSyntax": json_value})

    def _write_string_image(self, value: Image[np.object_]) -> None:
        converter = _ndjson.NDArrayConverter(_ndjson.string_converter, 2)
        json_value = converter.to_json(value)
        self._write_json_line({"stringImage": json_value})

    def _write_int_float_tuple(self, value: MyTuple[yardl.Int32, yardl.Float32]) -> None:
        converter = _MyTupleConverter(_ndjson.int32_converter, _ndjson.float32_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"intFloatTuple": json_value})

    def _write_float_float_tuple(self, value: MyTuple[yardl.Float32, yardl.Float32]) -> None:
        converter = _MyTupleConverter(_ndjson.float32_converter, _ndjson.float32_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"floatFloatTuple": json_value})

    def _write_int_float_tuple_alternate_syntax(self, value: MyTuple[yardl.Int32, yardl.Float32]) -> None:
        converter = _MyTupleConverter(_ndjson.int32_converter, _ndjson.float32_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"intFloatTupleAlternateSyntax": json_value})

    def _write_int_string_tuple(self, value: MyTuple[yardl.Int32, str]) -> None:
        converter = _MyTupleConverter(_ndjson.int32_converter, _ndjson.string_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"intStringTuple": json_value})

    def _write_stream_of_type_variants(self, value: collections.abc.Iterable[ImageFloatOrImageDouble]) -> None:
        converter = _ndjson.UnionConverter(ImageFloatOrImageDouble, [(ImageFloatOrImageDouble.ImageFloat, _ndjson.NDArrayConverter(_ndjson.float32_converter, 2), [dict]), (ImageFloatOrImageDouble.ImageDouble, _ndjson.NDArrayConverter(_ndjson.float64_converter, 2), [dict])], False)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"streamOfTypeVariants": json_item})


class NDJsonSimpleGenericsReader(_ndjson.NDJsonProtocolReader, SimpleGenericsReaderBase):
    """NDJson writer for the SimpleGenerics protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        SimpleGenericsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, SimpleGenericsReaderBase.schema)

    def _read_float_image(self) -> Image[np.float32]:
        json_object = self._read_json_line("floatImage", True)
        converter = _ndjson.NDArrayConverter(_ndjson.float32_converter, 2)
        return converter.from_json(json_object)

    def _read_int_image(self) -> Image[np.int32]:
        json_object = self._read_json_line("intImage", True)
        converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        return converter.from_json(json_object)

    def _read_int_image_alternate_syntax(self) -> Image[np.int32]:
        json_object = self._read_json_line("intImageAlternateSyntax", True)
        converter = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2)
        return converter.from_json(json_object)

    def _read_string_image(self) -> Image[np.object_]:
        json_object = self._read_json_line("stringImage", True)
        converter = _ndjson.NDArrayConverter(_ndjson.string_converter, 2)
        return converter.from_json(json_object)

    def _read_int_float_tuple(self) -> MyTuple[yardl.Int32, yardl.Float32]:
        json_object = self._read_json_line("intFloatTuple", True)
        converter = _MyTupleConverter(_ndjson.int32_converter, _ndjson.float32_converter)
        return converter.from_json(json_object)

    def _read_float_float_tuple(self) -> MyTuple[yardl.Float32, yardl.Float32]:
        json_object = self._read_json_line("floatFloatTuple", True)
        converter = _MyTupleConverter(_ndjson.float32_converter, _ndjson.float32_converter)
        return converter.from_json(json_object)

    def _read_int_float_tuple_alternate_syntax(self) -> MyTuple[yardl.Int32, yardl.Float32]:
        json_object = self._read_json_line("intFloatTupleAlternateSyntax", True)
        converter = _MyTupleConverter(_ndjson.int32_converter, _ndjson.float32_converter)
        return converter.from_json(json_object)

    def _read_int_string_tuple(self) -> MyTuple[yardl.Int32, str]:
        json_object = self._read_json_line("intStringTuple", True)
        converter = _MyTupleConverter(_ndjson.int32_converter, _ndjson.string_converter)
        return converter.from_json(json_object)

    def _read_stream_of_type_variants(self) -> collections.abc.Iterable[ImageFloatOrImageDouble]:
        converter = _ndjson.UnionConverter(ImageFloatOrImageDouble, [(ImageFloatOrImageDouble.ImageFloat, _ndjson.NDArrayConverter(_ndjson.float32_converter, 2), [dict]), (ImageFloatOrImageDouble.ImageDouble, _ndjson.NDArrayConverter(_ndjson.float64_converter, 2), [dict])], False)
        while (json_object := self._read_json_line("streamOfTypeVariants", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

class NDJsonAdvancedGenericsWriter(_ndjson.NDJsonProtocolWriter, AdvancedGenericsWriterBase):
    """NDJson writer for the AdvancedGenerics protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        AdvancedGenericsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, AdvancedGenericsWriterBase.schema)

    def _write_float_image_image(self, value: Image[np.object_]) -> None:
        converter = _ndjson.NDArrayConverter(_ndjson.NDArrayConverter(_ndjson.float32_converter, 2), 2)
        json_value = converter.to_json(value)
        self._write_json_line({"floatImageImage": json_value})

    def _write_generic_record_1(self, value: GenericRecord[yardl.Int32, str, np.object_]) -> None:
        converter = _GenericRecordConverter(_ndjson.int32_converter, _ndjson.string_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"genericRecord1": json_value})

    def _write_tuple_of_optionals(self, value: MyTuple[typing.Optional[yardl.Int32], typing.Optional[str]]) -> None:
        converter = _MyTupleConverter(_ndjson.OptionalConverter(_ndjson.int32_converter), _ndjson.OptionalConverter(_ndjson.string_converter))
        json_value = converter.to_json(value)
        self._write_json_line({"tupleOfOptionals": json_value})

    def _write_tuple_of_optionals_alternate_syntax(self, value: MyTuple[typing.Optional[yardl.Int32], typing.Optional[str]]) -> None:
        converter = _MyTupleConverter(_ndjson.OptionalConverter(_ndjson.int32_converter), _ndjson.OptionalConverter(_ndjson.string_converter))
        json_value = converter.to_json(value)
        self._write_json_line({"tupleOfOptionalsAlternateSyntax": json_value})

    def _write_tuple_of_vectors(self, value: MyTuple[list[yardl.Int32], list[yardl.Float32]]) -> None:
        converter = _MyTupleConverter(_ndjson.VectorConverter(_ndjson.int32_converter), _ndjson.VectorConverter(_ndjson.float32_converter))
        json_value = converter.to_json(value)
        self._write_json_line({"tupleOfVectors": json_value})


class NDJsonAdvancedGenericsReader(_ndjson.NDJsonProtocolReader, AdvancedGenericsReaderBase):
    """NDJson writer for the AdvancedGenerics protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        AdvancedGenericsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, AdvancedGenericsReaderBase.schema)

    def _read_float_image_image(self) -> Image[np.object_]:
        json_object = self._read_json_line("floatImageImage", True)
        converter = _ndjson.NDArrayConverter(_ndjson.NDArrayConverter(_ndjson.float32_converter, 2), 2)
        return converter.from_json(json_object)

    def _read_generic_record_1(self) -> GenericRecord[yardl.Int32, str, np.object_]:
        json_object = self._read_json_line("genericRecord1", True)
        converter = _GenericRecordConverter(_ndjson.int32_converter, _ndjson.string_converter)
        return converter.from_json(json_object)

    def _read_tuple_of_optionals(self) -> MyTuple[typing.Optional[yardl.Int32], typing.Optional[str]]:
        json_object = self._read_json_line("tupleOfOptionals", True)
        converter = _MyTupleConverter(_ndjson.OptionalConverter(_ndjson.int32_converter), _ndjson.OptionalConverter(_ndjson.string_converter))
        return converter.from_json(json_object)

    def _read_tuple_of_optionals_alternate_syntax(self) -> MyTuple[typing.Optional[yardl.Int32], typing.Optional[str]]:
        json_object = self._read_json_line("tupleOfOptionalsAlternateSyntax", True)
        converter = _MyTupleConverter(_ndjson.OptionalConverter(_ndjson.int32_converter), _ndjson.OptionalConverter(_ndjson.string_converter))
        return converter.from_json(json_object)

    def _read_tuple_of_vectors(self) -> MyTuple[list[yardl.Int32], list[yardl.Float32]]:
        json_object = self._read_json_line("tupleOfVectors", True)
        converter = _MyTupleConverter(_ndjson.VectorConverter(_ndjson.int32_converter), _ndjson.VectorConverter(_ndjson.float32_converter))
        return converter.from_json(json_object)

class NDJsonAliasesWriter(_ndjson.NDJsonProtocolWriter, AliasesWriterBase):
    """NDJson writer for the Aliases protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        AliasesWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, AliasesWriterBase.schema)

    def _write_aliased_string(self, value: AliasedString) -> None:
        converter = _ndjson.string_converter
        json_value = converter.to_json(value)
        self._write_json_line({"aliasedString": json_value})

    def _write_aliased_enum(self, value: AliasedEnum) -> None:
        converter = _ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map)
        json_value = converter.to_json(value)
        self._write_json_line({"aliasedEnum": json_value})

    def _write_aliased_open_generic(self, value: AliasedOpenGeneric[AliasedString, AliasedEnum]) -> None:
        converter = _MyTupleConverter(_ndjson.string_converter, _ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map))
        json_value = converter.to_json(value)
        self._write_json_line({"aliasedOpenGeneric": json_value})

    def _write_aliased_closed_generic(self, value: AliasedClosedGeneric) -> None:
        converter = _MyTupleConverter(_ndjson.string_converter, _ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map))
        json_value = converter.to_json(value)
        self._write_json_line({"aliasedClosedGeneric": json_value})

    def _write_aliased_optional(self, value: typing.Optional[AliasedOptional]) -> None:
        converter = _ndjson.OptionalConverter(_ndjson.int32_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"aliasedOptional": json_value})

    def _write_aliased_generic_optional(self, value: typing.Optional[AliasedGenericOptional[yardl.Float32]]) -> None:
        converter = _ndjson.OptionalConverter(_ndjson.float32_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"aliasedGenericOptional": json_value})

    def _write_aliased_generic_union_2(self, value: AliasedGenericUnion2[AliasedString, AliasedEnum]) -> None:
        converter = _ndjson.UnionConverter(AliasedGenericUnion2, [(AliasedGenericUnion2.T1, _ndjson.string_converter, [str]), (AliasedGenericUnion2.T2, _ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map), [int, float, str])], False)
        json_value = converter.to_json(value)
        self._write_json_line({"aliasedGenericUnion2": json_value})

    def _write_aliased_generic_vector(self, value: AliasedGenericVector[yardl.Float32]) -> None:
        converter = _ndjson.VectorConverter(_ndjson.float32_converter)
        json_value = converter.to_json(value)
        self._write_json_line({"aliasedGenericVector": json_value})

    def _write_aliased_generic_fixed_vector(self, value: AliasedGenericFixedVector[yardl.Float32]) -> None:
        converter = _ndjson.FixedVectorConverter(_ndjson.float32_converter, 3)
        json_value = converter.to_json(value)
        self._write_json_line({"aliasedGenericFixedVector": json_value})

    def _write_stream_of_aliased_generic_union_2(self, value: collections.abc.Iterable[AliasedGenericUnion2[AliasedString, AliasedEnum]]) -> None:
        converter = _ndjson.UnionConverter(AliasedGenericUnion2, [(AliasedGenericUnion2.T1, _ndjson.string_converter, [str]), (AliasedGenericUnion2.T2, _ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map), [int, float, str])], False)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"streamOfAliasedGenericUnion2": json_item})


class NDJsonAliasesReader(_ndjson.NDJsonProtocolReader, AliasesReaderBase):
    """NDJson writer for the Aliases protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        AliasesReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, AliasesReaderBase.schema)

    def _read_aliased_string(self) -> AliasedString:
        json_object = self._read_json_line("aliasedString", True)
        converter = _ndjson.string_converter
        return converter.from_json(json_object)

    def _read_aliased_enum(self) -> AliasedEnum:
        json_object = self._read_json_line("aliasedEnum", True)
        converter = _ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map)
        return converter.from_json(json_object)

    def _read_aliased_open_generic(self) -> AliasedOpenGeneric[AliasedString, AliasedEnum]:
        json_object = self._read_json_line("aliasedOpenGeneric", True)
        converter = _MyTupleConverter(_ndjson.string_converter, _ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map))
        return converter.from_json(json_object)

    def _read_aliased_closed_generic(self) -> AliasedClosedGeneric:
        json_object = self._read_json_line("aliasedClosedGeneric", True)
        converter = _MyTupleConverter(_ndjson.string_converter, _ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map))
        return converter.from_json(json_object)

    def _read_aliased_optional(self) -> typing.Optional[AliasedOptional]:
        json_object = self._read_json_line("aliasedOptional", True)
        converter = _ndjson.OptionalConverter(_ndjson.int32_converter)
        return converter.from_json(json_object)

    def _read_aliased_generic_optional(self) -> typing.Optional[AliasedGenericOptional[yardl.Float32]]:
        json_object = self._read_json_line("aliasedGenericOptional", True)
        converter = _ndjson.OptionalConverter(_ndjson.float32_converter)
        return converter.from_json(json_object)

    def _read_aliased_generic_union_2(self) -> AliasedGenericUnion2[AliasedString, AliasedEnum]:
        json_object = self._read_json_line("aliasedGenericUnion2", True)
        converter = _ndjson.UnionConverter(AliasedGenericUnion2, [(AliasedGenericUnion2.T1, _ndjson.string_converter, [str]), (AliasedGenericUnion2.T2, _ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map), [int, float, str])], False)
        return converter.from_json(json_object)

    def _read_aliased_generic_vector(self) -> AliasedGenericVector[yardl.Float32]:
        json_object = self._read_json_line("aliasedGenericVector", True)
        converter = _ndjson.VectorConverter(_ndjson.float32_converter)
        return converter.from_json(json_object)

    def _read_aliased_generic_fixed_vector(self) -> AliasedGenericFixedVector[yardl.Float32]:
        json_object = self._read_json_line("aliasedGenericFixedVector", True)
        converter = _ndjson.FixedVectorConverter(_ndjson.float32_converter, 3)
        return converter.from_json(json_object)

    def _read_stream_of_aliased_generic_union_2(self) -> collections.abc.Iterable[AliasedGenericUnion2[AliasedString, AliasedEnum]]:
        converter = _ndjson.UnionConverter(AliasedGenericUnion2, [(AliasedGenericUnion2.T1, _ndjson.string_converter, [str]), (AliasedGenericUnion2.T2, _ndjson.EnumConverter(Fruits, np.int32, _fruits_name_to_value_map, _fruits_value_to_name_map), [int, float, str])], False)
        while (json_object := self._read_json_line("streamOfAliasedGenericUnion2", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

class NDJsonStreamsOfAliasedUnionsWriter(_ndjson.NDJsonProtocolWriter, StreamsOfAliasedUnionsWriterBase):
    """NDJson writer for the StreamsOfAliasedUnions protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        StreamsOfAliasedUnionsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, StreamsOfAliasedUnionsWriterBase.schema)

    def _write_int_or_simple_record(self, value: collections.abc.Iterable[AliasedIntOrSimpleRecord]) -> None:
        converter = _ndjson.UnionConverter(AliasedIntOrSimpleRecord, [(AliasedIntOrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (AliasedIntOrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"intOrSimpleRecord": json_item})

    def _write_nullable_int_or_simple_record(self, value: collections.abc.Iterable[typing.Optional[AliasedNullableIntSimpleRecord]]) -> None:
        converter = _ndjson.UnionConverter(AliasedNullableIntSimpleRecord, [None, (AliasedNullableIntSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (AliasedNullableIntSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"nullableIntOrSimpleRecord": json_item})


class NDJsonStreamsOfAliasedUnionsReader(_ndjson.NDJsonProtocolReader, StreamsOfAliasedUnionsReaderBase):
    """NDJson writer for the StreamsOfAliasedUnions protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        StreamsOfAliasedUnionsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, StreamsOfAliasedUnionsReaderBase.schema)

    def _read_int_or_simple_record(self) -> collections.abc.Iterable[AliasedIntOrSimpleRecord]:
        converter = _ndjson.UnionConverter(AliasedIntOrSimpleRecord, [(AliasedIntOrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (AliasedIntOrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        while (json_object := self._read_json_line("intOrSimpleRecord", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

    def _read_nullable_int_or_simple_record(self) -> collections.abc.Iterable[typing.Optional[AliasedNullableIntSimpleRecord]]:
        converter = _ndjson.UnionConverter(AliasedNullableIntSimpleRecord, [None, (AliasedNullableIntSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (AliasedNullableIntSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        while (json_object := self._read_json_line("nullableIntOrSimpleRecord", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

class NDJsonProtocolWithComputedFieldsWriter(_ndjson.NDJsonProtocolWriter, ProtocolWithComputedFieldsWriterBase):
    """NDJson writer for the ProtocolWithComputedFields protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        ProtocolWithComputedFieldsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, ProtocolWithComputedFieldsWriterBase.schema)

    def _write_record_with_computed_fields(self, value: RecordWithComputedFields) -> None:
        converter = _RecordWithComputedFieldsConverter()
        json_value = converter.to_json(value)
        self._write_json_line({"recordWithComputedFields": json_value})


class NDJsonProtocolWithComputedFieldsReader(_ndjson.NDJsonProtocolReader, ProtocolWithComputedFieldsReaderBase):
    """NDJson writer for the ProtocolWithComputedFields protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        ProtocolWithComputedFieldsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, ProtocolWithComputedFieldsReaderBase.schema)

    def _read_record_with_computed_fields(self) -> RecordWithComputedFields:
        json_object = self._read_json_line("recordWithComputedFields", True)
        converter = _RecordWithComputedFieldsConverter()
        return converter.from_json(json_object)

class NDJsonProtocolWithKeywordStepsWriter(_ndjson.NDJsonProtocolWriter, ProtocolWithKeywordStepsWriterBase):
    """NDJson writer for the ProtocolWithKeywordSteps protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        ProtocolWithKeywordStepsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, ProtocolWithKeywordStepsWriterBase.schema)

    def _write_int(self, value: collections.abc.Iterable[RecordWithKeywordFields]) -> None:
        converter = _RecordWithKeywordFieldsConverter()
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"int": json_item})

    def _write_float(self, value: EnumWithKeywordSymbols) -> None:
        converter = _ndjson.EnumConverter(EnumWithKeywordSymbols, np.int32, _enum_with_keyword_symbols_name_to_value_map, _enum_with_keyword_symbols_value_to_name_map)
        json_value = converter.to_json(value)
        self._write_json_line({"float": json_value})


class NDJsonProtocolWithKeywordStepsReader(_ndjson.NDJsonProtocolReader, ProtocolWithKeywordStepsReaderBase):
    """NDJson writer for the ProtocolWithKeywordSteps protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        ProtocolWithKeywordStepsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, ProtocolWithKeywordStepsReaderBase.schema)

    def _read_int(self) -> collections.abc.Iterable[RecordWithKeywordFields]:
        converter = _RecordWithKeywordFieldsConverter()
        while (json_object := self._read_json_line("int", False)) is not _ndjson.MISSING_SENTINEL:
            yield converter.from_json(json_object)

    def _read_float(self) -> EnumWithKeywordSymbols:
        json_object = self._read_json_line("float", True)
        converter = _ndjson.EnumConverter(EnumWithKeywordSymbols, np.int32, _enum_with_keyword_symbols_name_to_value_map, _enum_with_keyword_symbols_value_to_name_map)
        return converter.from_json(json_object)


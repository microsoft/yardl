# This file was generated by the "yardl" tool. DO NOT EDIT.


import abc
import collections.abc
import datetime
import numpy as np
import numpy.typing as npt
import typing
from . import *
from . import yardl_types as yardl

class P1WriterBase(abc.ABC):
    """Abstract writer for the P1 protocol."""

    schema = """{"protocol":{"name":"P1","sequence":[{"name":"complicatedArr","type":{"array":{"items":{"name":"Sandbox.MyStruct","typeArguments":["float32"]}}}}]},"types":[{"name":"MyStruct","typeParameters":["T"],"fields":[{"name":"points","type":{"array":{"items":{"name":"Sandbox.Point","typeArguments":["T"]},"dimensions":[{"length":2}]}}}]},{"name":"Point","typeParameters":["T"],"fields":[{"name":"x","type":"T"},{"name":"y","type":"T"}]}]}"""

    def write_complicated_arr(self, value: npt.NDArray[np.void]) -> None:
        """Ordinal 0

        anInt: uint
        aStream: !stream
          items: int
        optional: int?
        union: [null, int, uint]
        date: date
        flag: MyFlags
        vec: int*3
        arr: uint[]
        map: string->int
        point: Point
        points: Point[]
        genRec: MyRec<float>[(1)]
        myint: MyInt
        image: Image<int>
        intimage: IntImage
        """
        self._write_complicated_arr(value)

    @abc.abstractmethod
    def _write_complicated_arr(self, value: npt.NDArray[np.void]) -> None:
        raise NotImplementedError()

class P1ReaderBase(abc.ABC):
    """Abstract reader for the P1 protocol."""

    schema = P1WriterBase.schema

    def read_complicated_arr(self) -> npt.NDArray[np.void]:
        """Ordinal 0

        anInt: uint
        aStream: !stream
          items: int
        optional: int?
        union: [null, int, uint]
        date: date
        flag: MyFlags
        vec: int*3
        arr: uint[]
        map: string->int
        point: Point
        points: Point[]
        genRec: MyRec<float>[(1)]
        myint: MyInt
        image: Image<int>
        intimage: IntImage
        """
        return self._read_complicated_arr()

    @abc.abstractmethod
    def _read_complicated_arr(self) -> npt.NDArray[np.void]:
        raise NotImplementedError()


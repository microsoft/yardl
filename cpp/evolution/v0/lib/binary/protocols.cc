// This file was generated by the "yardl" tool. DO NOT EDIT.

#include "protocols.h"

#include <cstddef>

#include "../yardl/detail/binary/coded_stream.h"
#include "../yardl/detail/binary/serializers.h"

namespace yardl::binary {
#ifndef _MSC_VER
// Values of offsetof() are only used if types are standard-layout.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winvalid-offsetof"
#endif

template <>
struct IsTriviallySerializable<evo_test::UnchangedRecord> {
  using __T__ = evo_test::UnchangedRecord;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::name)>::value &&
    IsTriviallySerializable<decltype(__T__::age)>::value &&
    IsTriviallySerializable<decltype(__T__::meta)>::value &&
    (sizeof(__T__) == (sizeof(__T__::name) + sizeof(__T__::age) + sizeof(__T__::meta))) &&
    offsetof(__T__, name) < offsetof(__T__, age) && offsetof(__T__, age) < offsetof(__T__, meta);
};

template <>
struct IsTriviallySerializable<evo_test::RecordWithChanges> {
  using __T__ = evo_test::RecordWithChanges;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::int_to_long)>::value &&
    IsTriviallySerializable<decltype(__T__::deprecated_vector)>::value &&
    IsTriviallySerializable<decltype(__T__::float_to_double)>::value &&
    IsTriviallySerializable<decltype(__T__::deprecated_array)>::value &&
    IsTriviallySerializable<decltype(__T__::optional_long_to_string)>::value &&
    IsTriviallySerializable<decltype(__T__::deprecated_map)>::value &&
    IsTriviallySerializable<decltype(__T__::unchanged_record)>::value &&
    (sizeof(__T__) == (sizeof(__T__::int_to_long) + sizeof(__T__::deprecated_vector) + sizeof(__T__::float_to_double) + sizeof(__T__::deprecated_array) + sizeof(__T__::optional_long_to_string) + sizeof(__T__::deprecated_map) + sizeof(__T__::unchanged_record))) &&
    offsetof(__T__, int_to_long) < offsetof(__T__, deprecated_vector) && offsetof(__T__, deprecated_vector) < offsetof(__T__, float_to_double) && offsetof(__T__, float_to_double) < offsetof(__T__, deprecated_array) && offsetof(__T__, deprecated_array) < offsetof(__T__, optional_long_to_string) && offsetof(__T__, optional_long_to_string) < offsetof(__T__, deprecated_map) && offsetof(__T__, deprecated_map) < offsetof(__T__, unchanged_record);
};

template <>
struct IsTriviallySerializable<evo_test::RenamedRecord> {
  using __T__ = evo_test::RenamedRecord;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::i)>::value &&
    IsTriviallySerializable<decltype(__T__::s)>::value &&
    (sizeof(__T__) == (sizeof(__T__::i) + sizeof(__T__::s))) &&
    offsetof(__T__, i) < offsetof(__T__, s);
};

#ifndef _MSC_VER
#pragma GCC diagnostic pop // #pragma GCC diagnostic ignored "-Winvalid-offsetof" 
#endif
} //namespace yardl::binary 

namespace {
template<typename T0, yardl::binary::Writer<T0> WriteT0, typename T1, yardl::binary::Writer<T1> WriteT1>
void WriteUnion(yardl::binary::CodedOutputStream& stream, std::variant<T0, T1> const& value) {
  yardl::binary::WriteInteger(stream, value.index());
  switch (value.index()) {
  case 0: {
    T0 const& v = std::get<0>(value);
    WriteT0(stream, v);
    break;
  }
  case 1: {
    T1 const& v = std::get<1>(value);
    WriteT1(stream, v);
    break;
  }
  default: throw std::runtime_error("Invalid union index.");
  }
}

template<typename T0, yardl::binary::Reader<T0> ReadT0, typename T1, yardl::binary::Reader<T1> ReadT1>
void ReadUnion(yardl::binary::CodedInputStream& stream, std::variant<T0, T1>& value) {
  size_t index;
  yardl::binary::ReadInteger(stream, index);
  switch (index) {
    case 0: {
      T0 v;
      ReadT0(stream, v);
      value = std::move(v);
      break;
    }
    case 1: {
      T1 v;
      ReadT1(stream, v);
      value = std::move(v);
      break;
    }
    default: throw std::runtime_error("Invalid union index.");
  }
}

template<typename T0, yardl::binary::Writer<T0> WriteT0, typename T1, yardl::binary::Writer<T1> WriteT1, typename T2, yardl::binary::Writer<T2> WriteT2, typename T3, yardl::binary::Writer<T3> WriteT3>
void WriteUnion(yardl::binary::CodedOutputStream& stream, std::variant<T0, T1, T2, T3> const& value) {
  yardl::binary::WriteInteger(stream, value.index());
  switch (value.index()) {
  case 0: {
    T0 const& v = std::get<0>(value);
    WriteT0(stream, v);
    break;
  }
  case 1: {
    T1 const& v = std::get<1>(value);
    WriteT1(stream, v);
    break;
  }
  case 2: {
    T2 const& v = std::get<2>(value);
    WriteT2(stream, v);
    break;
  }
  case 3: {
    T3 const& v = std::get<3>(value);
    WriteT3(stream, v);
    break;
  }
  default: throw std::runtime_error("Invalid union index.");
  }
}

template<typename T0, yardl::binary::Reader<T0> ReadT0, typename T1, yardl::binary::Reader<T1> ReadT1, typename T2, yardl::binary::Reader<T2> ReadT2, typename T3, yardl::binary::Reader<T3> ReadT3>
void ReadUnion(yardl::binary::CodedInputStream& stream, std::variant<T0, T1, T2, T3>& value) {
  size_t index;
  yardl::binary::ReadInteger(stream, index);
  switch (index) {
    case 0: {
      T0 v;
      ReadT0(stream, v);
      value = std::move(v);
      break;
    }
    case 1: {
      T1 v;
      ReadT1(stream, v);
      value = std::move(v);
      break;
    }
    case 2: {
      T2 v;
      ReadT2(stream, v);
      value = std::move(v);
      break;
    }
    case 3: {
      T3 v;
      ReadT3(stream, v);
      value = std::move(v);
      break;
    }
    default: throw std::runtime_error("Invalid union index.");
  }
}
} // namespace

namespace evo_test::binary {
namespace {
[[maybe_unused]] static void WriteAliasedLongToString(yardl::binary::CodedOutputStream& stream, evo_test::AliasedLongToString const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedLongToString>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteInteger(stream, value);
}

[[maybe_unused]] static void ReadAliasedLongToString(yardl::binary::CodedInputStream& stream, evo_test::AliasedLongToString& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedLongToString>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadInteger(stream, value);
}

[[maybe_unused]] static void WriteUnchangedRecord(yardl::binary::CodedOutputStream& stream, evo_test::UnchangedRecord const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::UnchangedRecord>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteString(stream, value.name);
  yardl::binary::WriteInteger(stream, value.age);
  yardl::binary::WriteMap<std::string, double, yardl::binary::WriteString, yardl::binary::WriteFloatingPoint>(stream, value.meta);
}

[[maybe_unused]] static void ReadUnchangedRecord(yardl::binary::CodedInputStream& stream, evo_test::UnchangedRecord& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::UnchangedRecord>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadString(stream, value.name);
  yardl::binary::ReadInteger(stream, value.age);
  yardl::binary::ReadMap<std::string, double, yardl::binary::ReadString, yardl::binary::ReadFloatingPoint>(stream, value.meta);
}

[[maybe_unused]] static void WriteRecordWithChanges(yardl::binary::CodedOutputStream& stream, evo_test::RecordWithChanges const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RecordWithChanges>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteInteger(stream, value.int_to_long);
  yardl::binary::WriteVector<int32_t, yardl::binary::WriteInteger>(stream, value.deprecated_vector);
  yardl::binary::WriteFloatingPoint(stream, value.float_to_double);
  yardl::binary::WriteFixedNDArray<uint8_t, yardl::binary::WriteInteger, 7>(stream, value.deprecated_array);
  yardl::binary::WriteOptional<int64_t, yardl::binary::WriteInteger>(stream, value.optional_long_to_string);
  yardl::binary::WriteMap<std::string, std::vector<int32_t>, yardl::binary::WriteString, yardl::binary::WriteVector<int32_t, yardl::binary::WriteInteger>>(stream, value.deprecated_map);
  evo_test::binary::WriteUnchangedRecord(stream, value.unchanged_record);
}

[[maybe_unused]] static void ReadRecordWithChanges(yardl::binary::CodedInputStream& stream, evo_test::RecordWithChanges& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RecordWithChanges>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadInteger(stream, value.int_to_long);
  yardl::binary::ReadVector<int32_t, yardl::binary::ReadInteger>(stream, value.deprecated_vector);
  yardl::binary::ReadFloatingPoint(stream, value.float_to_double);
  yardl::binary::ReadFixedNDArray<uint8_t, yardl::binary::ReadInteger, 7>(stream, value.deprecated_array);
  yardl::binary::ReadOptional<int64_t, yardl::binary::ReadInteger>(stream, value.optional_long_to_string);
  yardl::binary::ReadMap<std::string, std::vector<int32_t>, yardl::binary::ReadString, yardl::binary::ReadVector<int32_t, yardl::binary::ReadInteger>>(stream, value.deprecated_map);
  evo_test::binary::ReadUnchangedRecord(stream, value.unchanged_record);
}

[[maybe_unused]] static void WriteAliasedRecordWithChanges(yardl::binary::CodedOutputStream& stream, evo_test::AliasedRecordWithChanges const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedRecordWithChanges>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteRecordWithChanges(stream, value);
}

[[maybe_unused]] static void ReadAliasedRecordWithChanges(yardl::binary::CodedInputStream& stream, evo_test::AliasedRecordWithChanges& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedRecordWithChanges>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadRecordWithChanges(stream, value);
}

[[maybe_unused]] static void WriteRenamedRecord(yardl::binary::CodedOutputStream& stream, evo_test::RenamedRecord const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RenamedRecord>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteInteger(stream, value.i);
  yardl::binary::WriteString(stream, value.s);
}

[[maybe_unused]] static void ReadRenamedRecord(yardl::binary::CodedInputStream& stream, evo_test::RenamedRecord& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RenamedRecord>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadInteger(stream, value.i);
  yardl::binary::ReadString(stream, value.s);
}

} // namespace

void ProtocolWithChangesWriter::WriteInt8ToIntImpl(int8_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteInt8ToLongImpl(int8_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteInt8ToUintImpl(int8_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteInt8ToUlongImpl(int8_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteInt8ToFloatImpl(int8_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteInt8ToDoubleImpl(int8_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntToUintImpl(int32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntToLongImpl(int32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntToFloatImpl(int32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntToDoubleImpl(int32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteUintToUlongImpl(uint32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteUintToFloatImpl(uint32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteUintToDoubleImpl(uint32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteFloatToDoubleImpl(float const& value) {
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntToStringImpl(int32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteUintToStringImpl(uint32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteLongToStringImpl(int64_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteUlongToStringImpl(uint64_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteFloatToStringImpl(float const& value) {
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesWriter::WriteDoubleToStringImpl(double const& value) {
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntToOptionalImpl(int32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteFloatToOptionalImpl(float const& value) {
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesWriter::WriteStringToOptionalImpl(std::string const& value) {
  yardl::binary::WriteString(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntToUnionImpl(int32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteFloatToUnionImpl(float const& value) {
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesWriter::WriteStringToUnionImpl(std::string const& value) {
  yardl::binary::WriteString(stream_, value);
}

void ProtocolWithChangesWriter::WriteOptionalIntToFloatImpl(std::optional<int32_t> const& value) {
  yardl::binary::WriteOptional<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesWriter::WriteOptionalFloatToStringImpl(std::optional<float> const& value) {
  yardl::binary::WriteOptional<float, yardl::binary::WriteFloatingPoint>(stream_, value);
}

void ProtocolWithChangesWriter::WriteAliasedLongToStringImpl(evo_test::AliasedLongToString const& value) {
  evo_test::binary::WriteAliasedLongToString(stream_, value);
}

void ProtocolWithChangesWriter::WriteStringToAliasedStringImpl(std::string const& value) {
  yardl::binary::WriteString(stream_, value);
}

void ProtocolWithChangesWriter::WriteStringToAliasedIntImpl(std::string const& value) {
  yardl::binary::WriteString(stream_, value);
}

void ProtocolWithChangesWriter::WriteOptionalIntToUnionImpl(std::optional<int32_t> const& value) {
  yardl::binary::WriteOptional<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesWriter::WriteOptionalRecordToUnionImpl(std::optional<evo_test::RecordWithChanges> const& value) {
  yardl::binary::WriteOptional<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordWithChangesImpl(evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteAliasedRecordWithChangesImpl(evo_test::AliasedRecordWithChanges const& value) {
  evo_test::binary::WriteAliasedRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordToRenamedRecordImpl(evo_test::RenamedRecord const& value) {
  evo_test::binary::WriteRenamedRecord(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordToAliasedRecordImpl(evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordToAliasedAliasImpl(evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteOptionalRecordWithChangesImpl(std::optional<evo_test::RecordWithChanges> const& value) {
  yardl::binary::WriteOptional<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesWriter::WriteAliasedOptionalRecordWithChangesImpl(std::optional<evo_test::AliasedRecordWithChanges> const& value) {
  yardl::binary::WriteOptional<evo_test::AliasedRecordWithChanges, evo_test::binary::WriteAliasedRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesWriter::WriteUnionRecordWithChangesImpl(std::variant<evo_test::RecordWithChanges, int32_t> const& value) {
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesWriter::WriteUnionWithSameTypesetImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string> const& value) {
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger, float, yardl::binary::WriteFloatingPoint, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesWriter::WriteUnionWithTypesAddedImpl(std::variant<evo_test::RecordWithChanges, float> const& value) {
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, float, yardl::binary::WriteFloatingPoint>(stream_, value);
}

void ProtocolWithChangesWriter::WriteUnionWithTypesRemovedImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string> const& value) {
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger, float, yardl::binary::WriteFloatingPoint, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordToOptionalImpl(evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordToAliasedOptionalImpl(evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordToUnionImpl(evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordToAliasedUnionImpl(evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteVectorRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges> const& value) {
  yardl::binary::WriteVector<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesWriter::WriteStreamedRecordWithChangesImpl(evo_test::RecordWithChanges const& value) {
  yardl::binary::WriteBlock<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesWriter::WriteStreamedRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges> const& values) {
  if (!values.empty()) {
    yardl::binary::WriteVector<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, values);
  }
}

void ProtocolWithChangesWriter::EndStreamedRecordWithChangesImpl() {
  yardl::binary::WriteInteger(stream_, 0U);
}

void ProtocolWithChangesWriter::Flush() {
  stream_.Flush();
}

void ProtocolWithChangesWriter::CloseImpl() {
  stream_.Flush();
}

void ProtocolWithChangesReader::ReadInt8ToIntImpl(int8_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadInt8ToLongImpl(int8_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadInt8ToUintImpl(int8_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadInt8ToUlongImpl(int8_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadInt8ToFloatImpl(int8_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadInt8ToDoubleImpl(int8_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadIntToUintImpl(int32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadIntToLongImpl(int32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadIntToFloatImpl(int32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadIntToDoubleImpl(int32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadUintToUlongImpl(uint32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadUintToFloatImpl(uint32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadUintToDoubleImpl(uint32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadFloatToDoubleImpl(float& value) {
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesReader::ReadIntToStringImpl(int32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadUintToStringImpl(uint32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadLongToStringImpl(int64_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadUlongToStringImpl(uint64_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadFloatToStringImpl(float& value) {
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesReader::ReadDoubleToStringImpl(double& value) {
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesReader::ReadIntToOptionalImpl(int32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadFloatToOptionalImpl(float& value) {
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesReader::ReadStringToOptionalImpl(std::string& value) {
  yardl::binary::ReadString(stream_, value);
}

void ProtocolWithChangesReader::ReadIntToUnionImpl(int32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadFloatToUnionImpl(float& value) {
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesReader::ReadStringToUnionImpl(std::string& value) {
  yardl::binary::ReadString(stream_, value);
}

void ProtocolWithChangesReader::ReadOptionalIntToFloatImpl(std::optional<int32_t>& value) {
  yardl::binary::ReadOptional<int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesReader::ReadOptionalFloatToStringImpl(std::optional<float>& value) {
  yardl::binary::ReadOptional<float, yardl::binary::ReadFloatingPoint>(stream_, value);
}

void ProtocolWithChangesReader::ReadAliasedLongToStringImpl(evo_test::AliasedLongToString& value) {
  evo_test::binary::ReadAliasedLongToString(stream_, value);
}

void ProtocolWithChangesReader::ReadStringToAliasedStringImpl(std::string& value) {
  yardl::binary::ReadString(stream_, value);
}

void ProtocolWithChangesReader::ReadStringToAliasedIntImpl(std::string& value) {
  yardl::binary::ReadString(stream_, value);
}

void ProtocolWithChangesReader::ReadOptionalIntToUnionImpl(std::optional<int32_t>& value) {
  yardl::binary::ReadOptional<int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesReader::ReadOptionalRecordToUnionImpl(std::optional<evo_test::RecordWithChanges>& value) {
  yardl::binary::ReadOptional<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordWithChangesImpl(evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadAliasedRecordWithChangesImpl(evo_test::AliasedRecordWithChanges& value) {
  evo_test::binary::ReadAliasedRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordToRenamedRecordImpl(evo_test::RenamedRecord& value) {
  evo_test::binary::ReadRenamedRecord(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordToAliasedRecordImpl(evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordToAliasedAliasImpl(evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadOptionalRecordWithChangesImpl(std::optional<evo_test::RecordWithChanges>& value) {
  yardl::binary::ReadOptional<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesReader::ReadAliasedOptionalRecordWithChangesImpl(std::optional<evo_test::AliasedRecordWithChanges>& value) {
  yardl::binary::ReadOptional<evo_test::AliasedRecordWithChanges, evo_test::binary::ReadAliasedRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesReader::ReadUnionRecordWithChangesImpl(std::variant<evo_test::RecordWithChanges, int32_t>& value) {
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesReader::ReadUnionWithSameTypesetImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string>& value) {
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger, float, yardl::binary::ReadFloatingPoint, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesReader::ReadUnionWithTypesAddedImpl(std::variant<evo_test::RecordWithChanges, float>& value) {
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, float, yardl::binary::ReadFloatingPoint>(stream_, value);
}

void ProtocolWithChangesReader::ReadUnionWithTypesRemovedImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string>& value) {
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger, float, yardl::binary::ReadFloatingPoint, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordToOptionalImpl(evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordToAliasedOptionalImpl(evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordToUnionImpl(evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordToAliasedUnionImpl(evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadVectorRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges>& value) {
  yardl::binary::ReadVector<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
}

bool ProtocolWithChangesReader::ReadStreamedRecordWithChangesImpl(evo_test::RecordWithChanges& value) {
  return yardl::binary::ReadBlock<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, current_block_remaining_, value);
}

bool ProtocolWithChangesReader::ReadStreamedRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges>& values) {
  yardl::binary::ReadBlocksIntoVector<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

void ProtocolWithChangesReader::CloseImpl() {
  stream_.VerifyFinished();
}

void UnusedProtocolWriter::WriteRecordsImpl(evo_test::UnchangedRecord const& value) {
  yardl::binary::WriteBlock<evo_test::UnchangedRecord, evo_test::binary::WriteUnchangedRecord>(stream_, value);
}

void UnusedProtocolWriter::WriteRecordsImpl(std::vector<evo_test::UnchangedRecord> const& values) {
  if (!values.empty()) {
    yardl::binary::WriteVector<evo_test::UnchangedRecord, evo_test::binary::WriteUnchangedRecord>(stream_, values);
  }
}

void UnusedProtocolWriter::EndRecordsImpl() {
  yardl::binary::WriteInteger(stream_, 0U);
}

void UnusedProtocolWriter::Flush() {
  stream_.Flush();
}

void UnusedProtocolWriter::CloseImpl() {
  stream_.Flush();
}

bool UnusedProtocolReader::ReadRecordsImpl(evo_test::UnchangedRecord& value) {
  return yardl::binary::ReadBlock<evo_test::UnchangedRecord, evo_test::binary::ReadUnchangedRecord>(stream_, current_block_remaining_, value);
}

bool UnusedProtocolReader::ReadRecordsImpl(std::vector<evo_test::UnchangedRecord>& values) {
  yardl::binary::ReadBlocksIntoVector<evo_test::UnchangedRecord, evo_test::binary::ReadUnchangedRecord>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

void UnusedProtocolReader::CloseImpl() {
  stream_.VerifyFinished();
}

} // namespace evo_test::binary


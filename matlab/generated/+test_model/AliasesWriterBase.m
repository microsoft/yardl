% This file was generated by the "yardl" tool. DO NOT EDIT.

% Abstract writer for protocol Aliases
classdef (Abstract) AliasesWriterBase < handle
  properties (Access=protected)
    state_
  end

  methods
    function self = AliasesWriterBase()
      self.state_ = 0;
    end

    function close(self)
      self.close_();
      if self.state_ ~= 11
        expected_method = self.state_to_method_name_(self.state_);
        throw(yardl.ProtocolError("Protocol writer closed before all steps were called. Expected call to '%s'.", expected_method));
      end
    end

    % Ordinal 0
    function write_aliased_string(self, value)
      if self.state_ ~= 0
        self.raise_unexpected_state_(0);
      end

      self.write_aliased_string_(value);
      self.state_ = 1;
    end

    % Ordinal 1
    function write_aliased_enum(self, value)
      if self.state_ ~= 1
        self.raise_unexpected_state_(1);
      end

      self.write_aliased_enum_(value);
      self.state_ = 2;
    end

    % Ordinal 2
    function write_aliased_open_generic(self, value)
      if self.state_ ~= 2
        self.raise_unexpected_state_(2);
      end

      self.write_aliased_open_generic_(value);
      self.state_ = 3;
    end

    % Ordinal 3
    function write_aliased_closed_generic(self, value)
      if self.state_ ~= 3
        self.raise_unexpected_state_(3);
      end

      self.write_aliased_closed_generic_(value);
      self.state_ = 4;
    end

    % Ordinal 4
    function write_aliased_optional(self, value)
      if self.state_ ~= 4
        self.raise_unexpected_state_(4);
      end

      self.write_aliased_optional_(value);
      self.state_ = 5;
    end

    % Ordinal 5
    function write_aliased_generic_optional(self, value)
      if self.state_ ~= 5
        self.raise_unexpected_state_(5);
      end

      self.write_aliased_generic_optional_(value);
      self.state_ = 6;
    end

    % Ordinal 6
    function write_aliased_generic_union_2(self, value)
      if self.state_ ~= 6
        self.raise_unexpected_state_(6);
      end

      self.write_aliased_generic_union_2_(value);
      self.state_ = 7;
    end

    % Ordinal 7
    function write_aliased_generic_vector(self, value)
      if self.state_ ~= 7
        self.raise_unexpected_state_(7);
      end

      self.write_aliased_generic_vector_(value);
      self.state_ = 8;
    end

    % Ordinal 8
    function write_aliased_generic_fixed_vector(self, value)
      if self.state_ ~= 8
        self.raise_unexpected_state_(8);
      end

      self.write_aliased_generic_fixed_vector_(value);
      self.state_ = 9;
    end

    % Ordinal 9
    function write_stream_of_aliased_generic_union_2(self, value)
      if self.state_ ~= 9
        self.raise_unexpected_state_(9);
      end

      self.write_stream_of_aliased_generic_union_2_(value);
    end

    function end_stream_of_aliased_generic_union_2(self)
      if self.state_ ~= 9
        self.raise_unexpected_state_(9);
      end

      self.end_stream_();
      self.state_ = 10;
    end

    % Ordinal 10
    function write_vectors(self, value)
      if self.state_ ~= 10
        self.raise_unexpected_state_(10);
      end

      self.write_vectors_(value);
      self.state_ = 11;
    end
  end

  methods (Static)
    function res = schema()
      res = string('{"protocol":{"name":"Aliases","sequence":[{"name":"aliasedString","type":"TestModel.AliasedString"},{"name":"aliasedEnum","type":"TestModel.AliasedEnum"},{"name":"aliasedOpenGeneric","type":{"name":"TestModel.AliasedOpenGeneric","typeArguments":["TestModel.AliasedString","TestModel.AliasedEnum"]}},{"name":"aliasedClosedGeneric","type":"TestModel.AliasedClosedGeneric"},{"name":"aliasedOptional","type":"TestModel.AliasedOptional"},{"name":"aliasedGenericOptional","type":{"name":"TestModel.AliasedGenericOptional","typeArguments":["float32"]}},{"name":"aliasedGenericUnion2","type":{"name":"TestModel.AliasedGenericUnion2","typeArguments":["TestModel.AliasedString","TestModel.AliasedEnum"]}},{"name":"aliasedGenericVector","type":{"name":"TestModel.AliasedGenericVector","typeArguments":["float32"]}},{"name":"aliasedGenericFixedVector","type":{"name":"TestModel.AliasedGenericFixedVector","typeArguments":["float32"]}},{"name":"streamOfAliasedGenericUnion2","type":{"stream":{"items":{"name":"TestModel.AliasedGenericUnion2","typeArguments":["TestModel.AliasedString","TestModel.AliasedEnum"]}}}},{"name":"vectors","type":{"vector":{"items":"TestModel.RecordContainingVectorsOfAliases"}}}]},"types":[{"name":"AliasedMap","typeParameters":["K","V"],"type":{"map":{"keys":"K","values":"V"}}},{"name":"Fruits","values":[{"symbol":"apple","value":1},{"symbol":"banana","value":2},{"symbol":"pear","value":3}]},{"name":"GenericUnion2","typeParameters":["T1","T2"],"type":[{"tag":"T1","type":"T1"},{"tag":"T2","type":"T2"}]},{"name":"GenericVector","typeParameters":["T"],"type":{"vector":{"items":"T"}}},{"name":"MyTuple","typeParameters":["T1","T2"],"type":{"name":"Tuples.Tuple","typeArguments":["T1","T2"]}},{"name":"Image","typeParameters":["T"],"type":{"array":{"items":"T","dimensions":[{"name":"x"},{"name":"y"}]}}},{"name":"AliasedClosedGeneric","type":{"name":"TestModel.AliasedTuple","typeArguments":["TestModel.AliasedString","TestModel.AliasedEnum"]}},{"name":"AliasedEnum","type":"TestModel.Fruits"},{"name":"AliasedGenericFixedVector","typeParameters":["T"],"type":{"vector":{"items":"T","length":3}}},{"name":"AliasedGenericOptional","typeParameters":["T"],"type":[null,"T"]},{"name":"AliasedGenericUnion2","typeParameters":["T1","T2"],"type":{"name":"BasicTypes.GenericUnion2","typeArguments":["T1","T2"]}},{"name":"AliasedGenericVector","typeParameters":["T"],"type":{"name":"BasicTypes.GenericVector","typeArguments":["T"]}},{"name":"AliasedMap","typeParameters":["K","V"],"type":{"name":"BasicTypes.AliasedMap","typeArguments":["K","V"]}},{"name":"AliasedOpenGeneric","typeParameters":["T1","T2"],"type":{"name":"TestModel.AliasedTuple","typeArguments":["T1","T2"]}},{"name":"AliasedOptional","type":[null,"int32"]},{"name":"AliasedString","type":"string"},{"name":"AliasedTuple","typeParameters":["T1","T2"],"type":{"name":"TestModel.MyTuple","typeArguments":["T1","T2"]}},{"name":"Fruits","type":"BasicTypes.Fruits"},{"name":"Image","typeParameters":["T"],"type":{"name":"Image.Image","typeArguments":["T"]}},{"name":"MyTuple","typeParameters":["T1","T2"],"type":{"name":"BasicTypes.MyTuple","typeArguments":["T1","T2"]}},{"name":"RecordContainingVectorsOfAliases","fields":[{"name":"strings","type":{"vector":{"items":"TestModel.AliasedString"}}},{"name":"maps","type":{"vector":{"items":{"name":"TestModel.AliasedMap","typeArguments":["string","int32"]}}}},{"name":"arrays","type":{"vector":{"items":{"name":"TestModel.Image","typeArguments":["float32"]}}}},{"name":"tuples","type":{"vector":{"items":{"name":"TestModel.MyTuple","typeArguments":["int32","TestModel.SimpleRecord"]}}}}]},{"name":"SimpleRecord","fields":[{"name":"x","type":"int32"},{"name":"y","type":"int32"},{"name":"z","type":"int32"}]},{"name":"Tuple","typeParameters":["T1","T2"],"fields":[{"name":"v1","type":"T1"},{"name":"v2","type":"T2"}]}]}');
    end
  end

  methods (Abstract, Access=protected)
    write_aliased_string_(self, value)
    write_aliased_enum_(self, value)
    write_aliased_open_generic_(self, value)
    write_aliased_closed_generic_(self, value)
    write_aliased_optional_(self, value)
    write_aliased_generic_optional_(self, value)
    write_aliased_generic_union_2_(self, value)
    write_aliased_generic_vector_(self, value)
    write_aliased_generic_fixed_vector_(self, value)
    write_stream_of_aliased_generic_union_2_(self, value)
    write_vectors_(self, value)

    end_stream_(self)
    close_(self)
  end

  methods (Access=private)
    function raise_unexpected_state_(self, actual)
      expected_method = self.state_to_method_name_(self.state_);
      actual_method = self.state_to_method_name_(actual);
      throw(yardl.ProtocolError("Expected call to '%s' but received call to '%s'", expected_method, actual_method));
    end

    function name = state_to_method_name_(self, state)
      if state == 0
        name = "write_aliased_string";
      elseif state == 1
        name = "write_aliased_enum";
      elseif state == 2
        name = "write_aliased_open_generic";
      elseif state == 3
        name = "write_aliased_closed_generic";
      elseif state == 4
        name = "write_aliased_optional";
      elseif state == 5
        name = "write_aliased_generic_optional";
      elseif state == 6
        name = "write_aliased_generic_union_2";
      elseif state == 7
        name = "write_aliased_generic_vector";
      elseif state == 8
        name = "write_aliased_generic_fixed_vector";
      elseif state == 9
        name = "write_stream_of_aliased_generic_union_2 or end_stream_of_aliased_generic_union_2";
      elseif state == 10
        name = "write_vectors";
      else
        name = '<unknown>';
      end
    end
  end
end

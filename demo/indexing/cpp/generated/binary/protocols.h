// This file was generated by the "yardl" tool. DO NOT EDIT.

#pragma once
#include <array>
#include <complex>
#include <memory>
#include <optional>
#include <variant>
#include <vector>

#include "../protocols.h"
#include "../yardl/detail/binary/reader_writer.h"

namespace sketch::binary {
// Binary writer for the MyProtocol protocol.
class MyProtocolWriter : public sketch::MyProtocolWriterBase, yardl::binary::BinaryWriter {
  public:
  MyProtocolWriter(std::ostream& stream, Version version = Version::Current)
      : yardl::binary::BinaryWriter(stream, sketch::MyProtocolWriterBase::SchemaFromVersion(version)), version_(version) {}

  MyProtocolWriter(std::string file_name, Version version = Version::Current)
      : yardl::binary::BinaryWriter(file_name, sketch::MyProtocolWriterBase::SchemaFromVersion(version)), version_(version) {}

  void Flush() override;

  protected:
  void WriteHeaderImpl(sketch::Header const& value) override;
  void WriteSamplesImpl(sketch::Sample const& value) override;
  void WriteSamplesImpl(std::vector<sketch::Sample> const& values) override;
  void EndSamplesImpl() override;
  void CloseImpl() override;

  Version version_;
};

// Binary indexed writer for the MyProtocol protocol.
class MyProtocolIndexedWriter : public sketch::MyProtocolWriterBase, yardl::binary::BinaryIndexedWriter {
  public:
  MyProtocolIndexedWriter(std::ostream& stream, Version version = Version::Current)
      : yardl::binary::BinaryIndexedWriter(stream, sketch::MyProtocolWriterBase::SchemaFromVersion(version)), version_(version) {}

  MyProtocolIndexedWriter(std::string file_name, Version version = Version::Current)
      : yardl::binary::BinaryIndexedWriter(file_name, sketch::MyProtocolWriterBase::SchemaFromVersion(version)), version_(version) {}

  void Flush() override;

  protected:
  void WriteHeaderImpl(sketch::Header const& value) override;
  void WriteSamplesImpl(sketch::Sample const& value) override;
  void WriteSamplesImpl(std::vector<sketch::Sample> const& values) override;
  void EndSamplesImpl() override;
  void CloseImpl() override;

  Version version_;
};

// Binary reader for the MyProtocol protocol.
class MyProtocolReader : public sketch::MyProtocolReaderBase, yardl::binary::BinaryReader {
  public:
  MyProtocolReader(std::istream& stream)
      : yardl::binary::BinaryReader(stream), version_(sketch::MyProtocolReaderBase::VersionFromSchema(schema_read_)) {}

  MyProtocolReader(std::string file_name)
      : yardl::binary::BinaryReader(file_name), version_(sketch::MyProtocolReaderBase::VersionFromSchema(schema_read_)) {}

  Version GetVersion() { return version_; }

  protected:
  void ReadHeaderImpl(sketch::Header& value) override;
  bool ReadSamplesImpl(sketch::Sample& value) override;
  bool ReadSamplesImpl(std::vector<sketch::Sample>& values) override;
  void CloseImpl() override;

  Version version_;

  private:
  size_t current_block_remaining_ = 0;
};

// Binary indexed reader for the MyProtocol protocol.
class MyProtocolIndexedReader : public sketch::MyProtocolIndexedReaderBase, yardl::binary::BinaryIndexedReader {
  public:
  MyProtocolIndexedReader(std::istream& stream)
      : yardl::binary::BinaryIndexedReader(stream), version_(sketch::MyProtocolIndexedReaderBase::VersionFromSchema(schema_read_)) {}

  MyProtocolIndexedReader(std::string file_name)
      : yardl::binary::BinaryIndexedReader(file_name), version_(sketch::MyProtocolIndexedReaderBase::VersionFromSchema(schema_read_)) {}

  Version GetVersion() { return version_; }

  protected:
  void ReadHeaderImpl(sketch::Header& value) override;
  bool ReadSamplesImpl(sketch::Sample& value) override;
  bool ReadSamplesImpl(std::vector<sketch::Sample>& values) override;
  bool ReadSamplesImpl(sketch::Sample& value, size_t idx) override;
  bool ReadSamplesImpl(std::vector<sketch::Sample>& values, size_t idx) override;
  size_t CountSamplesImpl() override;
  void CloseImpl() override;

  Version version_;

  private:
  size_t current_block_remaining_ = 0;
};

} // namespace sketch::binary

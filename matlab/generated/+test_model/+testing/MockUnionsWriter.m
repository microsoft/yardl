% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef MockUnionsWriter < matlab.mixin.Copyable & test_model.UnionsWriterBase
  properties
    testCase_
    expected_int_or_simple_record
    expected_int_or_record_with_vlens
    expected_monosotate_or_int_or_simple_record
    expected_record_with_unions
  end

  methods
    function obj = MockUnionsWriter(testCase)
      obj.testCase_ = testCase;
      obj.expected_int_or_simple_record = yardl.None;
      obj.expected_int_or_record_with_vlens = yardl.None;
      obj.expected_monosotate_or_int_or_simple_record = yardl.None;
      obj.expected_record_with_unions = yardl.None;
    end

    function expect_write_int_or_simple_record_(obj, value)
      obj.expected_int_or_simple_record = yardl.Optional(value);
    end

    function expect_write_int_or_record_with_vlens_(obj, value)
      obj.expected_int_or_record_with_vlens = yardl.Optional(value);
    end

    function expect_write_monosotate_or_int_or_simple_record_(obj, value)
      obj.expected_monosotate_or_int_or_simple_record = yardl.Optional(value);
    end

    function expect_write_record_with_unions_(obj, value)
      obj.expected_record_with_unions = yardl.Optional(value);
    end

    function verify(obj)
      obj.testCase_.verifyEqual(obj.expected_int_or_simple_record, yardl.None, "Expected call to write_int_or_simple_record_ was not received");
      obj.testCase_.verifyEqual(obj.expected_int_or_record_with_vlens, yardl.None, "Expected call to write_int_or_record_with_vlens_ was not received");
      obj.testCase_.verifyEqual(obj.expected_monosotate_or_int_or_simple_record, yardl.None, "Expected call to write_monosotate_or_int_or_simple_record_ was not received");
      obj.testCase_.verifyEqual(obj.expected_record_with_unions, yardl.None, "Expected call to write_record_with_unions_ was not received");
    end
  end

  methods (Access=protected)
    function write_int_or_simple_record_(obj, value)
      obj.testCase_.verifyTrue(obj.expected_int_or_simple_record.has_value(), "Unexpected call to write_int_or_simple_record_");
      obj.testCase_.verifyEqual(value, obj.expected_int_or_simple_record.value, "Unexpected argument value for call to write_int_or_simple_record_");
      obj.expected_int_or_simple_record = yardl.None;
    end

    function write_int_or_record_with_vlens_(obj, value)
      obj.testCase_.verifyTrue(obj.expected_int_or_record_with_vlens.has_value(), "Unexpected call to write_int_or_record_with_vlens_");
      obj.testCase_.verifyEqual(value, obj.expected_int_or_record_with_vlens.value, "Unexpected argument value for call to write_int_or_record_with_vlens_");
      obj.expected_int_or_record_with_vlens = yardl.None;
    end

    function write_monosotate_or_int_or_simple_record_(obj, value)
      obj.testCase_.verifyTrue(obj.expected_monosotate_or_int_or_simple_record.has_value(), "Unexpected call to write_monosotate_or_int_or_simple_record_");
      obj.testCase_.verifyEqual(value, obj.expected_monosotate_or_int_or_simple_record.value, "Unexpected argument value for call to write_monosotate_or_int_or_simple_record_");
      obj.expected_monosotate_or_int_or_simple_record = yardl.None;
    end

    function write_record_with_unions_(obj, value)
      obj.testCase_.verifyTrue(obj.expected_record_with_unions.has_value(), "Unexpected call to write_record_with_unions_");
      obj.testCase_.verifyEqual(value, obj.expected_record_with_unions.value, "Unexpected argument value for call to write_record_with_unions_");
      obj.expected_record_with_unions = yardl.None;
    end

    function close_(obj)
    end
    function end_stream_(obj)
    end
  end
end

# This file was generated by the "yardl" tool. DO NOT EDIT.

# pyright: reportUnusedClass=false

import collections.abc
import datetime
import io
import typing
import numpy as np
import numpy.typing as npt

from . import *
from . import _binary
from . import yardl_types as yardl

class BinaryHelloWorldWriter(_binary.BinaryProtocolWriter, HelloWorldWriterBase):
    """Binary writer for the HelloWorld protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        HelloWorldWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, HelloWorldWriterBase.schema)

    def _write_data(self, value: collections.abc.Iterable[npt.NDArray[np.complex128]]) -> None:
        _binary.StreamSerializer(_binary.FixedNDArraySerializer(_binary.complexfloat64_serializer, (2,))).write(self._stream, value)


class BinaryHelloWorldReader(_binary.BinaryProtocolReader, HelloWorldReaderBase):
    """Binary writer for the HelloWorld protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        HelloWorldReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, HelloWorldReaderBase.schema)

    def _read_data(self) -> collections.abc.Iterable[npt.NDArray[np.complex128]]:
        return _binary.StreamSerializer(_binary.FixedNDArraySerializer(_binary.complexfloat64_serializer, (2,))).read(self._stream, self._read_as_numpy)


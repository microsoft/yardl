# This file was generated by the "yardl" tool. DO NOT EDIT.


import abc
import collections.abc
import datetime
import typing
import numpy as np
import numpy.typing as npt

from . import *
from . import _binary
from . import yardl_types as yardl

# pyright: reportUnusedClass=false

T = typing.TypeVar('T')

class _MyRecDescriptor(_binary.RecordDescriptor[MyRec[T]]):
    def __init__(self, t_descriptor: _binary.TypeDescriptor[T]) -> None:
        super().__init__([("f1", _binary.int8_descriptor), ("f2", t_descriptor), ("f3", _binary.EnumDescriptor(_binary.uint8_descriptor))])

    def write(self, stream: _binary.CodedOutputStream, value: MyRec[T]) -> None:
        self._write(stream, value.f1, value.f2, value.f3)


class _PointDescriptor(_binary.RecordDescriptor[Point[T]]):
    def __init__(self, t_descriptor: _binary.TypeDescriptor[T]) -> None:
        super().__init__([("x", t_descriptor), ("y", t_descriptor)])

    def write(self, stream: _binary.CodedOutputStream, value: Point[T]) -> None:
        self._write(stream, value.x, value.y)


class _MyStructDescriptor(_binary.RecordDescriptor[MyStruct[T]]):
    def __init__(self, t_descriptor: _binary.TypeDescriptor[T]) -> None:
        super().__init__([("points", _binary.FixedNDArrayDescriptor(_PointDescriptor(t_descriptor), np.dtype([('x', t_descriptor.overall_dtype()), ('y', t_descriptor.overall_dtype())], align=True), False, (2,)))])

    def write(self, stream: _binary.CodedOutputStream, value: MyStruct[T]) -> None:
        self._write(stream, value.points)


class BinaryP1Writer(P1WriterBase, _binary.BinaryProtocolWriter):
    """Binary writer for the P1 protocol."""

    def __init__(self, stream: typing.BinaryIO | str) -> None:
        P1WriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, P1WriterBase.schema)

    def _write_complicated_arr(self, value: npt.NDArray[np.void]) -> None:
        _binary.DynamicNDArrayDescriptor(_MyStructDescriptor(_binary.float32_descriptor), np.dtype([('points', np.dtype([('x', np.float32), ('y', np.float32)], align=True), (2))], align=True), False).write(self._stream, value)


class BinaryP1Reader(P1ReaderBase):
    """Binary writer for the P1 protocol."""

    def _read_complicated_arr(self) -> npt.NDArray[np.void]:
        raise NotImplementedError()


% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef AliasesReader < yardl.binary.BinaryProtocolReader & test_model.AliasesReaderBase
  % Binary reader for the Aliases protocol
  properties (Access=protected)
    aliased_string_serializer
    aliased_enum_serializer
    aliased_open_generic_serializer
    aliased_closed_generic_serializer
    aliased_optional_serializer
    aliased_generic_optional_serializer
    aliased_generic_union_2_serializer
    aliased_generic_vector_serializer
    aliased_generic_fixed_vector_serializer
    stream_of_aliased_generic_union_2_serializer
    vectors_serializer
  end

  methods
    function self = AliasesReader(filename)
      self@test_model.AliasesReaderBase();
      self@yardl.binary.BinaryProtocolReader(filename, test_model.AliasesReaderBase.schema);
      self.aliased_string_serializer = yardl.binary.StringSerializer;
      self.aliased_enum_serializer = yardl.binary.EnumSerializer('basic_types.Fruits', @basic_types.Fruits, yardl.binary.Int32Serializer);
      self.aliased_open_generic_serializer = tuples.binary.TupleSerializer(yardl.binary.StringSerializer, yardl.binary.EnumSerializer('basic_types.Fruits', @basic_types.Fruits, yardl.binary.Int32Serializer));
      self.aliased_closed_generic_serializer = tuples.binary.TupleSerializer(yardl.binary.StringSerializer, yardl.binary.EnumSerializer('basic_types.Fruits', @basic_types.Fruits, yardl.binary.Int32Serializer));
      self.aliased_optional_serializer = yardl.binary.OptionalSerializer(yardl.binary.Int32Serializer);
      self.aliased_generic_optional_serializer = yardl.binary.OptionalSerializer(yardl.binary.Float32Serializer);
      self.aliased_generic_union_2_serializer = yardl.binary.UnionSerializer('basic_types.GenericUnion2', {yardl.binary.StringSerializer, yardl.binary.EnumSerializer('basic_types.Fruits', @basic_types.Fruits, yardl.binary.Int32Serializer)}, {@basic_types.GenericUnion2.T1, @basic_types.GenericUnion2.T2});
      self.aliased_generic_vector_serializer = yardl.binary.VectorSerializer(yardl.binary.Float32Serializer);
      self.aliased_generic_fixed_vector_serializer = yardl.binary.FixedVectorSerializer(yardl.binary.Float32Serializer, 3);
      self.stream_of_aliased_generic_union_2_serializer = yardl.binary.StreamSerializer(yardl.binary.UnionSerializer('basic_types.GenericUnion2', {yardl.binary.StringSerializer, yardl.binary.EnumSerializer('basic_types.Fruits', @basic_types.Fruits, yardl.binary.Int32Serializer)}, {@basic_types.GenericUnion2.T1, @basic_types.GenericUnion2.T2}));
      self.vectors_serializer = yardl.binary.VectorSerializer(test_model.binary.RecordContainingVectorsOfAliasesSerializer());
    end
  end

  methods (Access=protected)
    function value = read_aliased_string_(self)
      value = self.aliased_string_serializer.read(self.stream_);
    end

    function value = read_aliased_enum_(self)
      value = self.aliased_enum_serializer.read(self.stream_);
    end

    function value = read_aliased_open_generic_(self)
      value = self.aliased_open_generic_serializer.read(self.stream_);
    end

    function value = read_aliased_closed_generic_(self)
      value = self.aliased_closed_generic_serializer.read(self.stream_);
    end

    function value = read_aliased_optional_(self)
      value = self.aliased_optional_serializer.read(self.stream_);
    end

    function value = read_aliased_generic_optional_(self)
      value = self.aliased_generic_optional_serializer.read(self.stream_);
    end

    function value = read_aliased_generic_union_2_(self)
      value = self.aliased_generic_union_2_serializer.read(self.stream_);
    end

    function value = read_aliased_generic_vector_(self)
      value = self.aliased_generic_vector_serializer.read(self.stream_);
    end

    function value = read_aliased_generic_fixed_vector_(self)
      value = self.aliased_generic_fixed_vector_serializer.read(self.stream_);
    end

    function more = has_stream_of_aliased_generic_union_2_(self)
      more = self.stream_of_aliased_generic_union_2_serializer.hasnext(self.stream_);
    end

    function value = read_stream_of_aliased_generic_union_2_(self)
      value = self.stream_of_aliased_generic_union_2_serializer.read(self.stream_);
    end

    function value = read_vectors_(self)
      value = self.vectors_serializer.read(self.stream_);
    end
  end
end

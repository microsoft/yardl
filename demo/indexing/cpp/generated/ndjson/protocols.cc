// This file was generated by the "yardl" tool. DO NOT EDIT.

#include "../yardl/detail/ndjson/serializers.h"
#include "protocols.h"

namespace sketch {
using ordered_json = nlohmann::ordered_json;

void to_json(ordered_json& j, sketch::Header const& value);
void from_json(ordered_json const& j, sketch::Header& value);

void to_json(ordered_json& j, sketch::Sample const& value);
void from_json(ordered_json const& j, sketch::Sample& value);

} // namespace sketch

namespace sketch {
using ordered_json = nlohmann::ordered_json;

void to_json(ordered_json& j, sketch::Header const& value) {
  j = ordered_json::object();
  if (yardl::ndjson::ShouldSerializeFieldValue(value.subject)) {
    j.push_back({"subject", value.subject});
  }
}

void from_json(ordered_json const& j, sketch::Header& value) {
  if (auto it = j.find("subject"); it != j.end()) {
    it->get_to(value.subject);
  }
}

void to_json(ordered_json& j, sketch::Sample const& value) {
  j = ordered_json::object();
  if (yardl::ndjson::ShouldSerializeFieldValue(value.id)) {
    j.push_back({"id", value.id});
  }
  if (yardl::ndjson::ShouldSerializeFieldValue(value.data)) {
    j.push_back({"data", value.data});
  }
}

void from_json(ordered_json const& j, sketch::Sample& value) {
  if (auto it = j.find("id"); it != j.end()) {
    it->get_to(value.id);
  }
  if (auto it = j.find("data"); it != j.end()) {
    it->get_to(value.data);
  }
}

} // namespace sketch

namespace sketch::ndjson {
void MyProtocolWriter::WriteHeaderImpl(sketch::Header const& value) {
  ordered_json json_value = value;
  yardl::ndjson::WriteProtocolValue(stream_, "header", json_value);}

void MyProtocolWriter::WriteSamplesImpl(sketch::Sample const& value) {
  ordered_json json_value = value;
  yardl::ndjson::WriteProtocolValue(stream_, "samples", json_value);}

void MyProtocolWriter::Flush() {
  stream_.flush();
}

void MyProtocolWriter::CloseImpl() {
  stream_.flush();
}

void MyProtocolReader::ReadHeaderImpl(sketch::Header& value) {
  yardl::ndjson::ReadProtocolValue(stream_, line_, "header", true, unused_step_, value);
}

bool MyProtocolReader::ReadSamplesImpl(sketch::Sample& value) {
  return yardl::ndjson::ReadProtocolValue(stream_, line_, "samples", false, unused_step_, value);
}

void MyProtocolReader::CloseImpl() {
  VerifyFinished();
}

} // namespace sketch::ndjson


// This file was generated by the "yardl" tool. DO NOT EDIT.

#include "protocols.h"

#include <cstddef>

#include "../yardl/detail/binary/coded_stream.h"
#include "../yardl/detail/binary/serializers.h"

namespace yardl::binary {
#ifndef _MSC_VER
// Values of offsetof() are only used if types are standard-layout.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winvalid-offsetof"
#endif

template <>
struct IsTriviallySerializable<evo_test::UnchangedRecord> {
  using __T__ = evo_test::UnchangedRecord;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::name)>::value &&
    IsTriviallySerializable<decltype(__T__::age)>::value &&
    IsTriviallySerializable<decltype(__T__::meta)>::value &&
    (sizeof(__T__) == (sizeof(__T__::name) + sizeof(__T__::age) + sizeof(__T__::meta))) &&
    offsetof(__T__, name) < offsetof(__T__, age) && offsetof(__T__, age) < offsetof(__T__, meta);
};

template <>
struct IsTriviallySerializable<evo_test::RecordWithChanges> {
  using __T__ = evo_test::RecordWithChanges;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::int_to_long)>::value &&
    IsTriviallySerializable<decltype(__T__::deprecated_vector)>::value &&
    IsTriviallySerializable<decltype(__T__::float_to_double)>::value &&
    IsTriviallySerializable<decltype(__T__::deprecated_array)>::value &&
    IsTriviallySerializable<decltype(__T__::optional_long_to_string)>::value &&
    IsTriviallySerializable<decltype(__T__::deprecated_map)>::value &&
    IsTriviallySerializable<decltype(__T__::unchanged_record)>::value &&
    (sizeof(__T__) == (sizeof(__T__::int_to_long) + sizeof(__T__::deprecated_vector) + sizeof(__T__::float_to_double) + sizeof(__T__::deprecated_array) + sizeof(__T__::optional_long_to_string) + sizeof(__T__::deprecated_map) + sizeof(__T__::unchanged_record))) &&
    offsetof(__T__, int_to_long) < offsetof(__T__, deprecated_vector) && offsetof(__T__, deprecated_vector) < offsetof(__T__, float_to_double) && offsetof(__T__, float_to_double) < offsetof(__T__, deprecated_array) && offsetof(__T__, deprecated_array) < offsetof(__T__, optional_long_to_string) && offsetof(__T__, optional_long_to_string) < offsetof(__T__, deprecated_map) && offsetof(__T__, deprecated_map) < offsetof(__T__, unchanged_record);
};

template <>
struct IsTriviallySerializable<evo_test::RenamedRecord> {
  using __T__ = evo_test::RenamedRecord;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::i)>::value &&
    IsTriviallySerializable<decltype(__T__::s)>::value &&
    (sizeof(__T__) == (sizeof(__T__::i) + sizeof(__T__::s))) &&
    offsetof(__T__, i) < offsetof(__T__, s);
};

template <>
struct IsTriviallySerializable<evo_test::RC> {
  using __T__ = evo_test::RC;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::subject)>::value &&
    (sizeof(__T__) == (sizeof(__T__::subject)));
};

template <>
struct IsTriviallySerializable<evo_test::UnusedButChangedRecord> {
  using __T__ = evo_test::UnusedButChangedRecord;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::name)>::value &&
    IsTriviallySerializable<decltype(__T__::age)>::value &&
    (sizeof(__T__) == (sizeof(__T__::name) + sizeof(__T__::age))) &&
    offsetof(__T__, name) < offsetof(__T__, age);
};

template <typename T1, typename T2>
struct IsTriviallySerializable<evo_test::GenericRecord<T1, T2>> {
  using __T__ = evo_test::GenericRecord<T1, T2>;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::removed)>::value &&
    IsTriviallySerializable<decltype(__T__::field_1)>::value &&
    IsTriviallySerializable<decltype(__T__::field_2)>::value &&
    (sizeof(__T__) == (sizeof(__T__::removed) + sizeof(__T__::field_1) + sizeof(__T__::field_2))) &&
    offsetof(__T__, removed) < offsetof(__T__, field_1) && offsetof(__T__, field_1) < offsetof(__T__, field_2);
};

template <typename T>
struct IsTriviallySerializable<evo_test::GenericParentRecord<T>> {
  using __T__ = evo_test::GenericParentRecord<T>;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::record)>::value &&
    IsTriviallySerializable<decltype(__T__::record_of_union)>::value &&
    IsTriviallySerializable<decltype(__T__::union_of_record)>::value &&
    (sizeof(__T__) == (sizeof(__T__::record) + sizeof(__T__::record_of_union) + sizeof(__T__::union_of_record))) &&
    offsetof(__T__, record) < offsetof(__T__, record_of_union) && offsetof(__T__, record_of_union) < offsetof(__T__, union_of_record);
};

template <typename T2>
struct IsTriviallySerializable<evo_test::UnchangedGeneric<T2>> {
  using __T__ = evo_test::UnchangedGeneric<T2>;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::field)>::value &&
    (sizeof(__T__) == (sizeof(__T__::field)));
};

template <typename Y, typename Z>
struct IsTriviallySerializable<evo_test::ChangedGeneric<Y, Z>> {
  using __T__ = evo_test::ChangedGeneric<Y, Z>;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::y)>::value &&
    IsTriviallySerializable<decltype(__T__::z)>::value &&
    (sizeof(__T__) == (sizeof(__T__::y) + sizeof(__T__::z))) &&
    offsetof(__T__, y) < offsetof(__T__, z);
};

#ifndef _MSC_VER
#pragma GCC diagnostic pop // #pragma GCC diagnostic ignored "-Winvalid-offsetof" 
#endif
} //namespace yardl::binary 

namespace {
template<typename T0, yardl::binary::Writer<T0> WriteT0, typename T1, yardl::binary::Writer<T1> WriteT1>
void WriteUnion(yardl::binary::CodedOutputStream& stream, std::variant<T0, T1> const& value) {
  yardl::binary::WriteInteger(stream, value.index());
  switch (value.index()) {
  case 0: {
    T0 const& v = std::get<0>(value);
    WriteT0(stream, v);
    break;
  }
  case 1: {
    T1 const& v = std::get<1>(value);
    WriteT1(stream, v);
    break;
  }
  default: throw std::runtime_error("Invalid union index.");
  }
}

template<typename T0, yardl::binary::Reader<T0> ReadT0, typename T1, yardl::binary::Reader<T1> ReadT1>
void ReadUnion(yardl::binary::CodedInputStream& stream, std::variant<T0, T1>& value) {
  size_t index;
  yardl::binary::ReadInteger(stream, index);
  switch (index) {
    case 0: {
      T0 v;
      ReadT0(stream, v);
      value = std::move(v);
      break;
    }
    case 1: {
      T1 v;
      ReadT1(stream, v);
      value = std::move(v);
      break;
    }
    default: throw std::runtime_error("Invalid union index.");
  }
}

template<typename T0, yardl::binary::Writer<T0> WriteT0, typename T1, yardl::binary::Writer<T1> WriteT1, typename T2, yardl::binary::Writer<T2> WriteT2>
void WriteUnion(yardl::binary::CodedOutputStream& stream, std::variant<T0, T1, T2> const& value) {
  yardl::binary::WriteInteger(stream, value.index());
  switch (value.index()) {
  case 0: {
    T0 const& v = std::get<0>(value);
    WriteT0(stream, v);
    break;
  }
  case 1: {
    T1 const& v = std::get<1>(value);
    WriteT1(stream, v);
    break;
  }
  case 2: {
    T2 const& v = std::get<2>(value);
    WriteT2(stream, v);
    break;
  }
  default: throw std::runtime_error("Invalid union index.");
  }
}

template<typename T0, yardl::binary::Reader<T0> ReadT0, typename T1, yardl::binary::Reader<T1> ReadT1, typename T2, yardl::binary::Reader<T2> ReadT2>
void ReadUnion(yardl::binary::CodedInputStream& stream, std::variant<T0, T1, T2>& value) {
  size_t index;
  yardl::binary::ReadInteger(stream, index);
  switch (index) {
    case 0: {
      T0 v;
      ReadT0(stream, v);
      value = std::move(v);
      break;
    }
    case 1: {
      T1 v;
      ReadT1(stream, v);
      value = std::move(v);
      break;
    }
    case 2: {
      T2 v;
      ReadT2(stream, v);
      value = std::move(v);
      break;
    }
    default: throw std::runtime_error("Invalid union index.");
  }
}

template<typename T0, yardl::binary::Writer<T0> WriteT0, typename T1, yardl::binary::Writer<T1> WriteT1, typename T2, yardl::binary::Writer<T2> WriteT2, typename T3, yardl::binary::Writer<T3> WriteT3>
void WriteUnion(yardl::binary::CodedOutputStream& stream, std::variant<T0, T1, T2, T3> const& value) {
  yardl::binary::WriteInteger(stream, value.index());
  switch (value.index()) {
  case 0: {
    T0 const& v = std::get<0>(value);
    WriteT0(stream, v);
    break;
  }
  case 1: {
    T1 const& v = std::get<1>(value);
    WriteT1(stream, v);
    break;
  }
  case 2: {
    T2 const& v = std::get<2>(value);
    WriteT2(stream, v);
    break;
  }
  case 3: {
    T3 const& v = std::get<3>(value);
    WriteT3(stream, v);
    break;
  }
  default: throw std::runtime_error("Invalid union index.");
  }
}

template<typename T0, yardl::binary::Reader<T0> ReadT0, typename T1, yardl::binary::Reader<T1> ReadT1, typename T2, yardl::binary::Reader<T2> ReadT2, typename T3, yardl::binary::Reader<T3> ReadT3>
void ReadUnion(yardl::binary::CodedInputStream& stream, std::variant<T0, T1, T2, T3>& value) {
  size_t index;
  yardl::binary::ReadInteger(stream, index);
  switch (index) {
    case 0: {
      T0 v;
      ReadT0(stream, v);
      value = std::move(v);
      break;
    }
    case 1: {
      T1 v;
      ReadT1(stream, v);
      value = std::move(v);
      break;
    }
    case 2: {
      T2 v;
      ReadT2(stream, v);
      value = std::move(v);
      break;
    }
    case 3: {
      T3 v;
      ReadT3(stream, v);
      value = std::move(v);
      break;
    }
    default: throw std::runtime_error("Invalid union index.");
  }
}
} // namespace

namespace evo_test::binary {
namespace {
[[maybe_unused]] static void WriteAliasedString(yardl::binary::CodedOutputStream& stream, evo_test::AliasedString const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedString>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteString(stream, value);
}

[[maybe_unused]] static void ReadAliasedString(yardl::binary::CodedInputStream& stream, evo_test::AliasedString& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedString>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadString(stream, value);
}

[[maybe_unused]] static void WriteAliasedLongToString(yardl::binary::CodedOutputStream& stream, evo_test::AliasedLongToString const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedLongToString>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteInteger(stream, value);
}

[[maybe_unused]] static void ReadAliasedLongToString(yardl::binary::CodedInputStream& stream, evo_test::AliasedLongToString& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedLongToString>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadInteger(stream, value);
}

[[maybe_unused]] static void WriteUnchangedRecord(yardl::binary::CodedOutputStream& stream, evo_test::UnchangedRecord const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::UnchangedRecord>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteString(stream, value.name);
  yardl::binary::WriteInteger(stream, value.age);
  yardl::binary::WriteMap<std::string, double, yardl::binary::WriteString, yardl::binary::WriteFloatingPoint>(stream, value.meta);
}

[[maybe_unused]] static void ReadUnchangedRecord(yardl::binary::CodedInputStream& stream, evo_test::UnchangedRecord& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::UnchangedRecord>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadString(stream, value.name);
  yardl::binary::ReadInteger(stream, value.age);
  yardl::binary::ReadMap<std::string, double, yardl::binary::ReadString, yardl::binary::ReadFloatingPoint>(stream, value.meta);
}

[[maybe_unused]] static void WriteRecordWithChanges(yardl::binary::CodedOutputStream& stream, evo_test::RecordWithChanges const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RecordWithChanges>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteInteger(stream, value.int_to_long);
  yardl::binary::WriteVector<int32_t, yardl::binary::WriteInteger>(stream, value.deprecated_vector);
  yardl::binary::WriteFloatingPoint(stream, value.float_to_double);
  yardl::binary::WriteFixedNDArray<uint8_t, yardl::binary::WriteInteger, 7>(stream, value.deprecated_array);
  yardl::binary::WriteOptional<int64_t, yardl::binary::WriteInteger>(stream, value.optional_long_to_string);
  yardl::binary::WriteMap<std::string, std::vector<int32_t>, yardl::binary::WriteString, yardl::binary::WriteVector<int32_t, yardl::binary::WriteInteger>>(stream, value.deprecated_map);
  evo_test::binary::WriteUnchangedRecord(stream, value.unchanged_record);
}

[[maybe_unused]] static void ReadRecordWithChanges(yardl::binary::CodedInputStream& stream, evo_test::RecordWithChanges& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RecordWithChanges>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadInteger(stream, value.int_to_long);
  yardl::binary::ReadVector<int32_t, yardl::binary::ReadInteger>(stream, value.deprecated_vector);
  yardl::binary::ReadFloatingPoint(stream, value.float_to_double);
  yardl::binary::ReadFixedNDArray<uint8_t, yardl::binary::ReadInteger, 7>(stream, value.deprecated_array);
  yardl::binary::ReadOptional<int64_t, yardl::binary::ReadInteger>(stream, value.optional_long_to_string);
  yardl::binary::ReadMap<std::string, std::vector<int32_t>, yardl::binary::ReadString, yardl::binary::ReadVector<int32_t, yardl::binary::ReadInteger>>(stream, value.deprecated_map);
  evo_test::binary::ReadUnchangedRecord(stream, value.unchanged_record);
}

[[maybe_unused]] static void WriteAliasedRecordWithChanges(yardl::binary::CodedOutputStream& stream, evo_test::AliasedRecordWithChanges const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedRecordWithChanges>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteRecordWithChanges(stream, value);
}

[[maybe_unused]] static void ReadAliasedRecordWithChanges(yardl::binary::CodedInputStream& stream, evo_test::AliasedRecordWithChanges& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedRecordWithChanges>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadRecordWithChanges(stream, value);
}

[[maybe_unused]] static void WriteRenamedRecord(yardl::binary::CodedOutputStream& stream, evo_test::RenamedRecord const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RenamedRecord>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteInteger(stream, value.i);
  yardl::binary::WriteString(stream, value.s);
}

[[maybe_unused]] static void ReadRenamedRecord(yardl::binary::CodedInputStream& stream, evo_test::RenamedRecord& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RenamedRecord>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadInteger(stream, value.i);
  yardl::binary::ReadString(stream, value.s);
}

[[maybe_unused]] static void WriteRC(yardl::binary::CodedOutputStream& stream, evo_test::RC const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RC>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteString(stream, value.subject);
}

[[maybe_unused]] static void ReadRC(yardl::binary::CodedInputStream& stream, evo_test::RC& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RC>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadString(stream, value.subject);
}

[[maybe_unused]] static void WriteRB(yardl::binary::CodedOutputStream& stream, evo_test::RB const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RB>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteRC(stream, value);
}

[[maybe_unused]] static void ReadRB(yardl::binary::CodedInputStream& stream, evo_test::RB& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RB>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadRC(stream, value);
}

[[maybe_unused]] static void WriteRA(yardl::binary::CodedOutputStream& stream, evo_test::RA const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RA>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteRB(stream, value);
}

[[maybe_unused]] static void ReadRA(yardl::binary::CodedInputStream& stream, evo_test::RA& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RA>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadRB(stream, value);
}

[[maybe_unused]] static void WriteRLink(yardl::binary::CodedOutputStream& stream, evo_test::RLink const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RLink>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteRA(stream, value);
}

[[maybe_unused]] static void ReadRLink(yardl::binary::CodedInputStream& stream, evo_test::RLink& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RLink>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadRA(stream, value);
}

[[maybe_unused]] static void WriteUnusedButChangedRecord(yardl::binary::CodedOutputStream& stream, evo_test::UnusedButChangedRecord const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::UnusedButChangedRecord>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteString(stream, value.name);
  yardl::binary::WriteInteger(stream, value.age);
}

[[maybe_unused]] static void ReadUnusedButChangedRecord(yardl::binary::CodedInputStream& stream, evo_test::UnusedButChangedRecord& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::UnusedButChangedRecord>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadString(stream, value.name);
  yardl::binary::ReadInteger(stream, value.age);
}

template<typename T1, yardl::binary::Writer<T1> WriteT1, typename T2, yardl::binary::Writer<T2> WriteT2>
[[maybe_unused]] static void WriteGenericRecord(yardl::binary::CodedOutputStream& stream, evo_test::GenericRecord<T1, T2> const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::GenericRecord<T1, T2>>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteOptional<bool, yardl::binary::WriteInteger>(stream, value.removed);
  WriteT1(stream, value.field_1);
  WriteT2(stream, value.field_2);
}

template<typename T1, yardl::binary::Reader<T1> ReadT1, typename T2, yardl::binary::Reader<T2> ReadT2>
[[maybe_unused]] static void ReadGenericRecord(yardl::binary::CodedInputStream& stream, evo_test::GenericRecord<T1, T2>& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::GenericRecord<T1, T2>>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadOptional<bool, yardl::binary::ReadInteger>(stream, value.removed);
  ReadT1(stream, value.field_1);
  ReadT2(stream, value.field_2);
}

template<typename T1, yardl::binary::Writer<T1> WriteT1, typename T2, yardl::binary::Writer<T2> WriteT2>
[[maybe_unused]] static void WriteGenericUnion(yardl::binary::CodedOutputStream& stream, evo_test::GenericUnion<T1, T2> const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::GenericUnion<T1, T2>>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  WriteUnion<T1, WriteT1, T2, WriteT2>(stream, value);
}

template<typename T1, yardl::binary::Reader<T1> ReadT1, typename T2, yardl::binary::Reader<T2> ReadT2>
[[maybe_unused]] static void ReadGenericUnion(yardl::binary::CodedInputStream& stream, evo_test::GenericUnion<T1, T2>& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::GenericUnion<T1, T2>>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  ReadUnion<T1, ReadT1, T2, ReadT2>(stream, value);
}

template<typename T, yardl::binary::Writer<T> WriteT>
[[maybe_unused]] static void WriteGenericParentRecord(yardl::binary::CodedOutputStream& stream, evo_test::GenericParentRecord<T> const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::GenericParentRecord<T>>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteGenericRecord<T, WriteT, std::string, yardl::binary::WriteString>(stream, value.record);
  evo_test::binary::WriteGenericRecord<evo_test::GenericUnion<T, float>, evo_test::binary::WriteGenericUnion<T, WriteT, float, yardl::binary::WriteFloatingPoint>, std::string, yardl::binary::WriteString>(stream, value.record_of_union);
  evo_test::binary::WriteGenericUnion<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>, float, yardl::binary::WriteFloatingPoint>(stream, value.union_of_record);
}

template<typename T, yardl::binary::Reader<T> ReadT>
[[maybe_unused]] static void ReadGenericParentRecord(yardl::binary::CodedInputStream& stream, evo_test::GenericParentRecord<T>& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::GenericParentRecord<T>>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadGenericRecord<T, ReadT, std::string, yardl::binary::ReadString>(stream, value.record);
  evo_test::binary::ReadGenericRecord<evo_test::GenericUnion<T, float>, evo_test::binary::ReadGenericUnion<T, ReadT, float, yardl::binary::ReadFloatingPoint>, std::string, yardl::binary::ReadString>(stream, value.record_of_union);
  evo_test::binary::ReadGenericUnion<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>, float, yardl::binary::ReadFloatingPoint>(stream, value.union_of_record);
}

template<typename T, yardl::binary::Writer<T> WriteT>
[[maybe_unused]] static void WriteAliasedHalfClosedGenericUnion(yardl::binary::CodedOutputStream& stream, evo_test::AliasedHalfClosedGenericUnion<T> const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedHalfClosedGenericUnion<T>>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteGenericUnion<T, WriteT, float, yardl::binary::WriteFloatingPoint>(stream, value);
}

template<typename T, yardl::binary::Reader<T> ReadT>
[[maybe_unused]] static void ReadAliasedHalfClosedGenericUnion(yardl::binary::CodedInputStream& stream, evo_test::AliasedHalfClosedGenericUnion<T>& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedHalfClosedGenericUnion<T>>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadGenericUnion<T, ReadT, float, yardl::binary::ReadFloatingPoint>(stream, value);
}

[[maybe_unused]] static void WriteAliasedClosedGenericUnion(yardl::binary::CodedOutputStream& stream, evo_test::AliasedClosedGenericUnion const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedClosedGenericUnion>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteAliasedHalfClosedGenericUnion<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>>(stream, value);
}

[[maybe_unused]] static void ReadAliasedClosedGenericUnion(yardl::binary::CodedInputStream& stream, evo_test::AliasedClosedGenericUnion& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedClosedGenericUnion>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadAliasedHalfClosedGenericUnion<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream, value);
}

template<typename T, yardl::binary::Writer<T> WriteT>
[[maybe_unused]] static void WriteAliasedHalfClosedGenericRecord(yardl::binary::CodedOutputStream& stream, evo_test::AliasedHalfClosedGenericRecord<T> const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedHalfClosedGenericRecord<T>>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteGenericRecord<T, WriteT, std::string, yardl::binary::WriteString>(stream, value);
}

template<typename T, yardl::binary::Reader<T> ReadT>
[[maybe_unused]] static void ReadAliasedHalfClosedGenericRecord(yardl::binary::CodedInputStream& stream, evo_test::AliasedHalfClosedGenericRecord<T>& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedHalfClosedGenericRecord<T>>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadGenericRecord<T, ReadT, std::string, yardl::binary::ReadString>(stream, value);
}

[[maybe_unused]] static void WriteAliasedClosedGenericRecord(yardl::binary::CodedOutputStream& stream, evo_test::AliasedClosedGenericRecord const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedClosedGenericRecord>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteAliasedHalfClosedGenericRecord<int32_t, yardl::binary::WriteInteger>(stream, value);
}

[[maybe_unused]] static void ReadAliasedClosedGenericRecord(yardl::binary::CodedInputStream& stream, evo_test::AliasedClosedGenericRecord& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedClosedGenericRecord>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadAliasedHalfClosedGenericRecord<int32_t, yardl::binary::ReadInteger>(stream, value);
}

template<typename T2, yardl::binary::Writer<T2> WriteT2>
[[maybe_unused]] static void WriteUnchangedGeneric(yardl::binary::CodedOutputStream& stream, evo_test::UnchangedGeneric<T2> const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::UnchangedGeneric<T2>>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  WriteT2(stream, value.field);
}

template<typename T2, yardl::binary::Reader<T2> ReadT2>
[[maybe_unused]] static void ReadUnchangedGeneric(yardl::binary::CodedInputStream& stream, evo_test::UnchangedGeneric<T2>& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::UnchangedGeneric<T2>>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  ReadT2(stream, value.field);
}

template<typename Y, yardl::binary::Writer<Y> WriteY, typename Z, yardl::binary::Writer<Z> WriteZ>
[[maybe_unused]] static void WriteChangedGeneric(yardl::binary::CodedOutputStream& stream, evo_test::ChangedGeneric<Y, Z> const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::ChangedGeneric<Y, Z>>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  WriteY(stream, value.y);
  evo_test::binary::WriteUnchangedGeneric<Z, WriteZ>(stream, value.z);
}

template<typename Y, yardl::binary::Reader<Y> ReadY, typename Z, yardl::binary::Reader<Z> ReadZ>
[[maybe_unused]] static void ReadChangedGeneric(yardl::binary::CodedInputStream& stream, evo_test::ChangedGeneric<Y, Z>& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::ChangedGeneric<Y, Z>>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  ReadY(stream, value.y);
  evo_test::binary::ReadUnchangedGeneric<Z, ReadZ>(stream, value.z);
}

[[maybe_unused]] static void WriteAliasedLongToString_v1(yardl::binary::CodedOutputStream& stream, evo_test::AliasedLongToString const& value) {
  std::string aliased_long_to_string_v1;
  aliased_long_to_string_v1 = std::to_string(value);
  yardl::binary::WriteString(stream, aliased_long_to_string_v1);
}

[[maybe_unused]] static void ReadAliasedLongToString_v1(yardl::binary::CodedInputStream& stream, evo_test::AliasedLongToString& value) {
  std::string aliased_long_to_string_v1;
  yardl::binary::ReadString(stream, aliased_long_to_string_v1);
  value = std::stol(aliased_long_to_string_v1);
}

[[maybe_unused]] static void WriteRecordWithChanges_v1(yardl::binary::CodedOutputStream& stream, evo_test::RecordWithChanges const& value) {
  double float_to_double;
  float_to_double = static_cast<double>(value.float_to_double);
  yardl::binary::WriteFloatingPoint(stream, float_to_double);
  evo_test::binary::WriteUnchangedRecord(stream, value.unchanged_record);
  int64_t int_to_long;
  int_to_long = static_cast<int64_t>(value.int_to_long);
  yardl::binary::WriteInteger(stream, int_to_long);
  std::optional<std::string> optional_long_to_string;
  if (value.optional_long_to_string.has_value()) {
    optional_long_to_string = std::to_string(value.optional_long_to_string.value());
  }
  yardl::binary::WriteOptional<std::string, yardl::binary::WriteString>(stream, optional_long_to_string);
}

[[maybe_unused]] static void ReadRecordWithChanges_v1(yardl::binary::CodedInputStream& stream, evo_test::RecordWithChanges& value) {
  double float_to_double;
  yardl::binary::ReadFloatingPoint(stream, float_to_double);
  value.float_to_double = static_cast<float>(float_to_double);
  evo_test::binary::ReadUnchangedRecord(stream, value.unchanged_record);
  int64_t int_to_long;
  yardl::binary::ReadInteger(stream, int_to_long);
  value.int_to_long = static_cast<int32_t>(int_to_long);
  std::optional<std::string> optional_long_to_string;
  yardl::binary::ReadOptional<std::string, yardl::binary::ReadString>(stream, optional_long_to_string);
  std::optional<int64_t> tmp;
  if (optional_long_to_string.has_value()) {
    tmp = std::stol(optional_long_to_string.value());
  }
  value.optional_long_to_string = tmp;
}

[[maybe_unused]] static void WriteAliasedRecordWithChanges_v1(yardl::binary::CodedOutputStream& stream, evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges_v1(stream, value);
}

[[maybe_unused]] static void ReadAliasedRecordWithChanges_v1(yardl::binary::CodedInputStream& stream, evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges_v1(stream, value);
}

[[maybe_unused]] static void WriteAliasOfAliasedRecordWithChanges_v1(yardl::binary::CodedOutputStream& stream, evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteAliasedRecordWithChanges_v1(stream, value);
}

[[maybe_unused]] static void ReadAliasOfAliasedRecordWithChanges_v1(yardl::binary::CodedInputStream& stream, evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadAliasedRecordWithChanges_v1(stream, value);
}

[[maybe_unused]] static void WriteDeprecatedRecord_v1(yardl::binary::CodedOutputStream& stream, evo_test::RenamedRecord const& value) {
  yardl::binary::WriteString(stream, value.s);
  yardl::binary::WriteInteger(stream, value.i);
}

[[maybe_unused]] static void ReadDeprecatedRecord_v1(yardl::binary::CodedInputStream& stream, evo_test::RenamedRecord& value) {
  yardl::binary::ReadString(stream, value.s);
  yardl::binary::ReadInteger(stream, value.i);
}

[[maybe_unused]] static void WriteRenamedRecord_v1(yardl::binary::CodedOutputStream& stream, evo_test::RenamedRecord const& value) {
  evo_test::binary::WriteDeprecatedRecord_v1(stream, value);
}

[[maybe_unused]] static void ReadRenamedRecord_v1(yardl::binary::CodedInputStream& stream, evo_test::RenamedRecord& value) {
  evo_test::binary::ReadDeprecatedRecord_v1(stream, value);
}

[[maybe_unused]] static void WriteRZ_v1(yardl::binary::CodedOutputStream& stream, evo_test::RC const& value) {
  int32_t subject;
  subject = std::stoi(value.subject);
  yardl::binary::WriteInteger(stream, subject);
}

[[maybe_unused]] static void ReadRZ_v1(yardl::binary::CodedInputStream& stream, evo_test::RC& value) {
  int32_t subject;
  yardl::binary::ReadInteger(stream, subject);
  value.subject = std::to_string(subject);
}

[[maybe_unused]] static void WriteRY_v1(yardl::binary::CodedOutputStream& stream, evo_test::RC const& value) {
  evo_test::binary::WriteRZ_v1(stream, value);
}

[[maybe_unused]] static void ReadRY_v1(yardl::binary::CodedInputStream& stream, evo_test::RC& value) {
  evo_test::binary::ReadRZ_v1(stream, value);
}

[[maybe_unused]] static void WriteRNew_v1(yardl::binary::CodedOutputStream& stream, evo_test::RC const& value) {
  evo_test::binary::WriteRY_v1(stream, value);
}

[[maybe_unused]] static void ReadRNew_v1(yardl::binary::CodedInputStream& stream, evo_test::RC& value) {
  evo_test::binary::ReadRY_v1(stream, value);
}

[[maybe_unused]] static void WriteRLink_v1(yardl::binary::CodedOutputStream& stream, evo_test::RC const& value) {
  evo_test::binary::WriteRNew_v1(stream, value);
}

[[maybe_unused]] static void ReadRLink_v1(yardl::binary::CodedInputStream& stream, evo_test::RC& value) {
  evo_test::binary::ReadRNew_v1(stream, value);
}

[[maybe_unused]] static void WriteRX_v1(yardl::binary::CodedOutputStream& stream, evo_test::RC const& value) {
  evo_test::binary::WriteRLink_v1(stream, value);
}

[[maybe_unused]] static void ReadRX_v1(yardl::binary::CodedInputStream& stream, evo_test::RC& value) {
  evo_test::binary::ReadRLink_v1(stream, value);
}

[[maybe_unused]] static void WriteUnusedButChangedRecord_v1(yardl::binary::CodedOutputStream& stream, evo_test::UnusedButChangedRecord const& value) {
  float age;
  age = static_cast<float>(value.age);
  yardl::binary::WriteFloatingPoint(stream, age);
  yardl::binary::WriteString(stream, value.name);
}

[[maybe_unused]] static void ReadUnusedButChangedRecord_v1(yardl::binary::CodedInputStream& stream, evo_test::UnusedButChangedRecord& value) {
  float age;
  yardl::binary::ReadFloatingPoint(stream, age);
  value.age = static_cast<int32_t>(std::round(age));
  yardl::binary::ReadString(stream, value.name);
}

template<typename T1, yardl::binary::Writer<T1> WriteT1, typename T2, yardl::binary::Writer<T2> WriteT2>
[[maybe_unused]] static void WriteGenericRecord_v1(yardl::binary::CodedOutputStream& stream, evo_test::GenericRecord<T1, T2> const& value) {
  WriteT2(stream, value.field_2);
  WriteT1(stream, value.field_1);
  std::optional<bool> added;
  yardl::binary::WriteOptional<bool, yardl::binary::WriteInteger>(stream, added);
}

template<typename T1, yardl::binary::Reader<T1> ReadT1, typename T2, yardl::binary::Reader<T2> ReadT2>
[[maybe_unused]] static void ReadGenericRecord_v1(yardl::binary::CodedInputStream& stream, evo_test::GenericRecord<T1, T2>& value) {
  ReadT2(stream, value.field_2);
  ReadT1(stream, value.field_1);
  std::optional<bool> added;
  yardl::binary::ReadOptional<bool, yardl::binary::ReadInteger>(stream, added);
}

template<typename A, yardl::binary::Writer<A> WriteA, typename B, yardl::binary::Writer<B> WriteB>
[[maybe_unused]] static void WriteAliasedOpenGenericRecord_v1(yardl::binary::CodedOutputStream& stream, evo_test::GenericRecord<A, B> const& value) {
  evo_test::binary::WriteGenericRecord_v1<A, WriteA, B, WriteB>(stream, value);
}

template<typename A, yardl::binary::Reader<A> ReadA, typename B, yardl::binary::Reader<B> ReadB>
[[maybe_unused]] static void ReadAliasedOpenGenericRecord_v1(yardl::binary::CodedInputStream& stream, evo_test::GenericRecord<A, B>& value) {
  evo_test::binary::ReadGenericRecord_v1<A, ReadA, B, ReadB>(stream, value);
}

template<typename T, yardl::binary::Writer<T> WriteT>
[[maybe_unused]] static void WriteAliasedHalfClosedGenericRecord_v1(yardl::binary::CodedOutputStream& stream, evo_test::GenericRecord<T, std::string> const& value) {
  evo_test::binary::WriteAliasedOpenGenericRecord_v1<T, WriteT, std::string, yardl::binary::WriteString>(stream, value);
}

template<typename T, yardl::binary::Reader<T> ReadT>
[[maybe_unused]] static void ReadAliasedHalfClosedGenericRecord_v1(yardl::binary::CodedInputStream& stream, evo_test::GenericRecord<T, std::string>& value) {
  evo_test::binary::ReadAliasedOpenGenericRecord_v1<T, ReadT, std::string, yardl::binary::ReadString>(stream, value);
}

template<typename A, yardl::binary::Writer<A> WriteA, typename B, yardl::binary::Writer<B> WriteB>
[[maybe_unused]] static void WriteAliasedOpenGenericUnion_v1(yardl::binary::CodedOutputStream& stream, evo_test::GenericUnion<A, B> const& value) {
  evo_test::binary::WriteGenericUnion<A, WriteA, B, WriteB>(stream, value);
}

template<typename A, yardl::binary::Reader<A> ReadA, typename B, yardl::binary::Reader<B> ReadB>
[[maybe_unused]] static void ReadAliasedOpenGenericUnion_v1(yardl::binary::CodedInputStream& stream, evo_test::GenericUnion<A, B>& value) {
  evo_test::binary::ReadGenericUnion<A, ReadA, B, ReadB>(stream, value);
}

[[maybe_unused]] static void WriteAliasedClosedGenericUnion_v1(yardl::binary::CodedOutputStream& stream, evo_test::AliasedClosedGenericUnion const& value) {
  evo_test::binary::WriteAliasedHalfClosedGenericUnion<evo_test::GenericRecord_v1<int32_t, std::string>, evo_test::binary::WriteGenericRecord_v1<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>>(stream, value);
}

[[maybe_unused]] static void ReadAliasedClosedGenericUnion_v1(yardl::binary::CodedInputStream& stream, evo_test::AliasedClosedGenericUnion& value) {
  evo_test::binary::ReadAliasedHalfClosedGenericUnion<evo_test::GenericRecord_v1<int32_t, std::string>, evo_test::binary::ReadGenericRecord_v1<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream, value);
}

template<typename T, yardl::binary::Writer<T> WriteT>
[[maybe_unused]] static void WriteGenericParentRecord_v1(yardl::binary::CodedOutputStream& stream, evo_test::GenericParentRecord<T> const& value) {
  evo_test::binary::WriteAliasedHalfClosedGenericRecord_v1<T, WriteT>(stream, value.record);
  evo_test::binary::WriteAliasedOpenGenericRecord_v1<evo_test::AliasedOpenGenericUnion_v1<T, float>, evo_test::binary::WriteAliasedOpenGenericUnion_v1<T, WriteT, float, yardl::binary::WriteFloatingPoint>, std::string, yardl::binary::WriteString>(stream, value.record_of_union);
  evo_test::binary::WriteAliasedClosedGenericUnion_v1(stream, value.union_of_record);
}

template<typename T, yardl::binary::Reader<T> ReadT>
[[maybe_unused]] static void ReadGenericParentRecord_v1(yardl::binary::CodedInputStream& stream, evo_test::GenericParentRecord<T>& value) {
  evo_test::binary::ReadAliasedHalfClosedGenericRecord_v1<T, ReadT>(stream, value.record);
  evo_test::binary::ReadAliasedOpenGenericRecord_v1<evo_test::AliasedOpenGenericUnion_v1<T, float>, evo_test::binary::ReadAliasedOpenGenericUnion_v1<T, ReadT, float, yardl::binary::ReadFloatingPoint>, std::string, yardl::binary::ReadString>(stream, value.record_of_union);
  evo_test::binary::ReadAliasedClosedGenericUnion_v1(stream, value.union_of_record);
}

[[maybe_unused]] static void WriteAliasedClosedGenericRecord_v1(yardl::binary::CodedOutputStream& stream, evo_test::GenericRecord<int32_t, std::string> const& value) {
  evo_test::binary::WriteAliasedHalfClosedGenericRecord_v1<int32_t, yardl::binary::WriteInteger>(stream, value);
}

[[maybe_unused]] static void ReadAliasedClosedGenericRecord_v1(yardl::binary::CodedInputStream& stream, evo_test::GenericRecord<int32_t, std::string>& value) {
  evo_test::binary::ReadAliasedHalfClosedGenericRecord_v1<int32_t, yardl::binary::ReadInteger>(stream, value);
}

template<typename T2, yardl::binary::Writer<T2> WriteT2>
[[maybe_unused]] static void WriteOldUnchangedGeneric_v1(yardl::binary::CodedOutputStream& stream, evo_test::UnchangedGeneric<T2> const& value) {
  evo_test::binary::WriteUnchangedGeneric<T2, WriteT2>(stream, value);
}

template<typename T2, yardl::binary::Reader<T2> ReadT2>
[[maybe_unused]] static void ReadOldUnchangedGeneric_v1(yardl::binary::CodedInputStream& stream, evo_test::UnchangedGeneric<T2>& value) {
  evo_test::binary::ReadUnchangedGeneric<T2, ReadT2>(stream, value);
}

[[maybe_unused]] static void WriteUnchanged_v1(yardl::binary::CodedOutputStream& stream, evo_test::UnchangedGeneric<int32_t> const& value) {
  evo_test::binary::WriteUnchangedGeneric<int32_t, yardl::binary::WriteInteger>(stream, value);
}

[[maybe_unused]] static void ReadUnchanged_v1(yardl::binary::CodedInputStream& stream, evo_test::UnchangedGeneric<int32_t>& value) {
  evo_test::binary::ReadUnchangedGeneric<int32_t, yardl::binary::ReadInteger>(stream, value);
}

template<typename Y, yardl::binary::Writer<Y> WriteY, typename Z, yardl::binary::Writer<Z> WriteZ>
[[maybe_unused]] static void WriteOldChangedGeneric_v1(yardl::binary::CodedOutputStream& stream, evo_test::ChangedGeneric<Y, Z> const& value) {
  std::optional<Y> y;
  y = value.y;
  yardl::binary::WriteOptional<Y, WriteY>(stream, y);
  std::optional<evo_test::OldUnchangedGeneric_v1<Z>> z;
  z = value.z;
  yardl::binary::WriteOptional<evo_test::OldUnchangedGeneric_v1<Z>, evo_test::binary::WriteOldUnchangedGeneric_v1<Z, WriteZ>>(stream, z);
}

template<typename Y, yardl::binary::Reader<Y> ReadY, typename Z, yardl::binary::Reader<Z> ReadZ>
[[maybe_unused]] static void ReadOldChangedGeneric_v1(yardl::binary::CodedInputStream& stream, evo_test::ChangedGeneric<Y, Z>& value) {
  std::optional<Y> y;
  yardl::binary::ReadOptional<Y, ReadY>(stream, y);
  value.y = y.value();
  std::optional<evo_test::OldUnchangedGeneric_v1<Z>> z;
  yardl::binary::ReadOptional<evo_test::OldUnchangedGeneric_v1<Z>, evo_test::binary::ReadOldUnchangedGeneric_v1<Z, ReadZ>>(stream, z);
  value.z = z.value();
}

template<typename I, yardl::binary::Writer<I> WriteI, typename J, yardl::binary::Writer<J> WriteJ>
[[maybe_unused]] static void WriteChangedGeneric_v1(yardl::binary::CodedOutputStream& stream, evo_test::ChangedGeneric<I, J> const& value) {
  evo_test::binary::WriteOldChangedGeneric_v1<I, WriteI, J, WriteJ>(stream, value);
}

template<typename I, yardl::binary::Reader<I> ReadI, typename J, yardl::binary::Reader<J> ReadJ>
[[maybe_unused]] static void ReadChangedGeneric_v1(yardl::binary::CodedInputStream& stream, evo_test::ChangedGeneric<I, J>& value) {
  evo_test::binary::ReadOldChangedGeneric_v1<I, ReadI, J, ReadJ>(stream, value);
}

[[maybe_unused]] static void WriteChanged_v1(yardl::binary::CodedOutputStream& stream, evo_test::ChangedGeneric<std::string, int32_t> const& value) {
  evo_test::binary::WriteChangedGeneric_v1<std::string, yardl::binary::WriteString, int32_t, yardl::binary::WriteInteger>(stream, value);
}

[[maybe_unused]] static void ReadChanged_v1(yardl::binary::CodedInputStream& stream, evo_test::ChangedGeneric<std::string, int32_t>& value) {
  evo_test::binary::ReadChangedGeneric_v1<std::string, yardl::binary::ReadString, int32_t, yardl::binary::ReadInteger>(stream, value);
}

} // namespace

void ProtocolWithChangesWriter::WriteInt8ToIntImpl(int8_t const& value) {
  switch (version_) {
  case Version::v1: {
    int32_t int8_to_int;
    int8_to_int = static_cast<int32_t>(value);
    yardl::binary::WriteInteger(stream_, int8_to_int);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteInt8ToLongImpl(int8_t const& value) {
  switch (version_) {
  case Version::v1: {
    int64_t int8_to_long;
    int8_to_long = static_cast<int64_t>(value);
    yardl::binary::WriteInteger(stream_, int8_to_long);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteInt8ToUintImpl(int8_t const& value) {
  switch (version_) {
  case Version::v1: {
    uint32_t int8_to_uint;
    int8_to_uint = static_cast<uint32_t>(value);
    yardl::binary::WriteInteger(stream_, int8_to_uint);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteInt8ToUlongImpl(int8_t const& value) {
  switch (version_) {
  case Version::v1: {
    uint64_t int8_to_ulong;
    int8_to_ulong = static_cast<uint64_t>(value);
    yardl::binary::WriteInteger(stream_, int8_to_ulong);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteInt8ToFloatImpl(int8_t const& value) {
  switch (version_) {
  case Version::v1: {
    float int8_to_float;
    int8_to_float = static_cast<float>(value);
    yardl::binary::WriteFloatingPoint(stream_, int8_to_float);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteInt8ToDoubleImpl(int8_t const& value) {
  switch (version_) {
  case Version::v1: {
    double int8_to_double;
    int8_to_double = static_cast<double>(value);
    yardl::binary::WriteFloatingPoint(stream_, int8_to_double);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteIntToUintImpl(int32_t const& value) {
  switch (version_) {
  case Version::v1: {
    uint32_t int_to_uint;
    int_to_uint = static_cast<uint32_t>(value);
    yardl::binary::WriteInteger(stream_, int_to_uint);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteIntToLongImpl(int32_t const& value) {
  switch (version_) {
  case Version::v1: {
    int64_t int_to_long;
    int_to_long = static_cast<int64_t>(value);
    yardl::binary::WriteInteger(stream_, int_to_long);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteIntToFloatImpl(int32_t const& value) {
  switch (version_) {
  case Version::v1: {
    float int_to_float;
    int_to_float = static_cast<float>(value);
    yardl::binary::WriteFloatingPoint(stream_, int_to_float);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteIntToDoubleImpl(int32_t const& value) {
  switch (version_) {
  case Version::v1: {
    double int_to_double;
    int_to_double = static_cast<double>(value);
    yardl::binary::WriteFloatingPoint(stream_, int_to_double);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteUintToUlongImpl(uint32_t const& value) {
  switch (version_) {
  case Version::v1: {
    uint64_t uint_to_ulong;
    uint_to_ulong = static_cast<uint64_t>(value);
    yardl::binary::WriteInteger(stream_, uint_to_ulong);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteUintToFloatImpl(uint32_t const& value) {
  switch (version_) {
  case Version::v1: {
    float uint_to_float;
    uint_to_float = static_cast<float>(value);
    yardl::binary::WriteFloatingPoint(stream_, uint_to_float);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteUintToDoubleImpl(uint32_t const& value) {
  switch (version_) {
  case Version::v1: {
    double uint_to_double;
    uint_to_double = static_cast<double>(value);
    yardl::binary::WriteFloatingPoint(stream_, uint_to_double);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteFloatToDoubleImpl(float const& value) {
  switch (version_) {
  case Version::v1: {
    double float_to_double;
    float_to_double = static_cast<double>(value);
    yardl::binary::WriteFloatingPoint(stream_, float_to_double);
    break;
  }
  default:
    yardl::binary::WriteFloatingPoint(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteIntToStringImpl(int32_t const& value) {
  switch (version_) {
  case Version::v1: {
    std::string int_to_string;
    int_to_string = std::to_string(value);
    yardl::binary::WriteString(stream_, int_to_string);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteUintToStringImpl(uint32_t const& value) {
  switch (version_) {
  case Version::v1: {
    std::string uint_to_string;
    uint_to_string = std::to_string(value);
    yardl::binary::WriteString(stream_, uint_to_string);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteLongToStringImpl(int64_t const& value) {
  switch (version_) {
  case Version::v1: {
    std::string long_to_string;
    long_to_string = std::to_string(value);
    yardl::binary::WriteString(stream_, long_to_string);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteUlongToStringImpl(uint64_t const& value) {
  switch (version_) {
  case Version::v1: {
    std::string ulong_to_string;
    ulong_to_string = std::to_string(value);
    yardl::binary::WriteString(stream_, ulong_to_string);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteFloatToStringImpl(float const& value) {
  switch (version_) {
  case Version::v1: {
    std::string float_to_string;
    float_to_string = std::to_string(value);
    yardl::binary::WriteString(stream_, float_to_string);
    break;
  }
  default:
    yardl::binary::WriteFloatingPoint(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteDoubleToStringImpl(double const& value) {
  switch (version_) {
  case Version::v1: {
    std::string double_to_string;
    double_to_string = std::to_string(value);
    yardl::binary::WriteString(stream_, double_to_string);
    break;
  }
  default:
    yardl::binary::WriteFloatingPoint(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteIntToOptionalImpl(int32_t const& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<int32_t> int_to_optional;
    int_to_optional = value;
    yardl::binary::WriteOptional<int32_t, yardl::binary::WriteInteger>(stream_, int_to_optional);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteFloatToOptionalImpl(float const& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<float> float_to_optional;
    float_to_optional = value;
    yardl::binary::WriteOptional<float, yardl::binary::WriteFloatingPoint>(stream_, float_to_optional);
    break;
  }
  default:
    yardl::binary::WriteFloatingPoint(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteStringToOptionalImpl(std::string const& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<std::string> string_to_optional;
    string_to_optional = value;
    yardl::binary::WriteOptional<std::string, yardl::binary::WriteString>(stream_, string_to_optional);
    break;
  }
  default:
    yardl::binary::WriteString(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteIntToUnionImpl(int32_t const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<int32_t, bool> int_to_union;
    int_to_union = value;
    WriteUnion<int32_t, yardl::binary::WriteInteger, bool, yardl::binary::WriteInteger>(stream_, int_to_union);
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteFloatToUnionImpl(float const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<float, bool> float_to_union;
    float_to_union = value;
    WriteUnion<float, yardl::binary::WriteFloatingPoint, bool, yardl::binary::WriteInteger>(stream_, float_to_union);
    break;
  }
  default:
    yardl::binary::WriteFloatingPoint(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteStringToUnionImpl(std::string const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<std::string, bool> string_to_union;
    string_to_union = value;
    WriteUnion<std::string, yardl::binary::WriteString, bool, yardl::binary::WriteInteger>(stream_, string_to_union);
    break;
  }
  default:
    yardl::binary::WriteString(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteOptionalIntToFloatImpl(std::optional<int32_t> const& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<float> optional_int_to_float;
    if (value.has_value()) {
      optional_int_to_float = static_cast<float>(value.value());
    }
    yardl::binary::WriteOptional<float, yardl::binary::WriteFloatingPoint>(stream_, optional_int_to_float);
    break;
  }
  default:
    yardl::binary::WriteOptional<int32_t, yardl::binary::WriteInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteOptionalFloatToStringImpl(std::optional<float> const& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<std::string> optional_float_to_string;
    if (value.has_value()) {
      optional_float_to_string = std::to_string(value.value());
    }
    yardl::binary::WriteOptional<std::string, yardl::binary::WriteString>(stream_, optional_float_to_string);
    break;
  }
  default:
    yardl::binary::WriteOptional<float, yardl::binary::WriteFloatingPoint>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteAliasedLongToStringImpl(evo_test::AliasedLongToString const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteAliasedLongToString_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteAliasedLongToString(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteStringToAliasedStringImpl(std::string const& value) {
  yardl::binary::WriteString(stream_, value);
}

void ProtocolWithChangesWriter::WriteStringToAliasedIntImpl(std::string const& value) {
  switch (version_) {
  case Version::v1: {
    int32_t string_to_aliased_int;
    string_to_aliased_int = std::stoi(value);
    yardl::binary::WriteInteger(stream_, string_to_aliased_int);
    break;
  }
  default:
    yardl::binary::WriteString(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteOptionalIntToUnionImpl(std::optional<int32_t> const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<std::monostate, int32_t, std::string> optional_int_to_union;
    if (value.has_value()) {
      optional_int_to_union = value.value();
    } else {
      optional_int_to_union = std::monostate{};
    }
    WriteUnion<std::monostate, yardl::binary::WriteMonostate, int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, optional_int_to_union);
    break;
  }
  default:
    yardl::binary::WriteOptional<int32_t, yardl::binary::WriteInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteOptionalRecordToUnionImpl(std::optional<evo_test::RecordWithChanges> const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<std::monostate, evo_test::RecordWithChanges_v1, std::string> optional_record_to_union;
    if (value.has_value()) {
      optional_record_to_union = value.value();
    } else {
      optional_record_to_union = std::monostate{};
    }
    WriteUnion<std::monostate, yardl::binary::WriteMonostate, evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1, std::string, yardl::binary::WriteString>(stream_, optional_record_to_union);
    break;
  }
  default:
    yardl::binary::WriteOptional<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRecordWithChangesImpl(evo_test::RecordWithChanges const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRecordWithChanges_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteAliasedRecordWithChangesImpl(evo_test::AliasedRecordWithChanges const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteAliasedRecordWithChanges_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteAliasedRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRecordToRenamedRecordImpl(evo_test::RenamedRecord const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRenamedRecord_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRenamedRecord(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRecordToAliasedRecordImpl(evo_test::RecordWithChanges const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteAliasedRecordWithChanges_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRecordToAliasedAliasImpl(evo_test::RecordWithChanges const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteAliasOfAliasedRecordWithChanges_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRlinkImpl(evo_test::RLink const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRLink_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRLink(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRlinkRXImpl(evo_test::RLink const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRX_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRLink(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRlinkRYImpl(evo_test::RLink const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRY_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRLink(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRlinkRZImpl(evo_test::RLink const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRZ_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRLink(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRaRLinkImpl(evo_test::RA const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRLink_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRA(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRaRXImpl(evo_test::RA const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRX_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRA(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRaRYImpl(evo_test::RA const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRY_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRA(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRaRZImpl(evo_test::RA const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRZ_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRA(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRbRLinkImpl(evo_test::RB const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRLink_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRB(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRbRXImpl(evo_test::RB const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRX_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRB(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRbRYImpl(evo_test::RB const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRY_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRB(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRbRZImpl(evo_test::RB const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRZ_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRB(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRcRLinkImpl(evo_test::RC const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRLink_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRC(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRcRXImpl(evo_test::RC const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRX_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRC(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRcRYImpl(evo_test::RC const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRY_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRC(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRcRZImpl(evo_test::RC const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRZ_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRC(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRlinkRNewImpl(evo_test::RLink const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRNew_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRLink(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRaRNewImpl(evo_test::RA const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRNew_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRA(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRbRNewImpl(evo_test::RB const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRNew_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRB(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRcRNewImpl(evo_test::RC const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteRNew_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteRC(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRlinkRUnionImpl(evo_test::RLink const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RX_v1, std::string> rlink_r_union;
    rlink_r_union = value;
    WriteUnion<evo_test::RX_v1, evo_test::binary::WriteRX_v1, std::string, yardl::binary::WriteString>(stream_, rlink_r_union);
    break;
  }
  default:
    evo_test::binary::WriteRLink(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRaRUnionImpl(evo_test::RA const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RX_v1, std::string> ra_r_union;
    ra_r_union = value;
    WriteUnion<evo_test::RX_v1, evo_test::binary::WriteRX_v1, std::string, yardl::binary::WriteString>(stream_, ra_r_union);
    break;
  }
  default:
    evo_test::binary::WriteRA(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRbRUnionImpl(evo_test::RB const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RX_v1, std::string> rb_r_union;
    rb_r_union = value;
    WriteUnion<evo_test::RX_v1, evo_test::binary::WriteRX_v1, std::string, yardl::binary::WriteString>(stream_, rb_r_union);
    break;
  }
  default:
    evo_test::binary::WriteRB(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRcRUnionImpl(evo_test::RC const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RX_v1, std::string> rc_r_union;
    rc_r_union = value;
    WriteUnion<evo_test::RX_v1, evo_test::binary::WriteRX_v1, std::string, yardl::binary::WriteString>(stream_, rc_r_union);
    break;
  }
  default:
    evo_test::binary::WriteRC(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteOptionalRecordWithChangesImpl(std::optional<evo_test::RecordWithChanges> const& value) {
  switch (version_) {
  case Version::v1: {
    yardl::binary::WriteOptional<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1>(stream_, value);
    break;
  }
  default:
    yardl::binary::WriteOptional<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteAliasedOptionalRecordWithChangesImpl(std::optional<evo_test::AliasedRecordWithChanges> const& value) {
  switch (version_) {
  case Version::v1: {
    yardl::binary::WriteOptional<evo_test::AliasedRecordWithChanges_v1, evo_test::binary::WriteAliasedRecordWithChanges_v1>(stream_, value);
    break;
  }
  default:
    yardl::binary::WriteOptional<evo_test::AliasedRecordWithChanges, evo_test::binary::WriteAliasedRecordWithChanges>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteUnionRecordWithChangesImpl(std::variant<evo_test::RecordWithChanges, int32_t> const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges_v1, int32_t> union_record_with_changes;
    switch (value.index()) {
      case 0: {
        union_record_with_changes = std::get<0>(value);
        break;
      }
      case 1: {
        union_record_with_changes = std::get<1>(value);
        break;
      }
      default: throw new std::runtime_error("Invalid union index.");
    }
    WriteUnion<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1, int32_t, yardl::binary::WriteInteger>(stream_, union_record_with_changes);
    break;
  }
  default:
    WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteUnionWithSameTypesetImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string> const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<float, evo_test::RecordWithChanges_v1, std::string, int32_t> union_with_same_typeset;
    switch (value.index()) {
      case 0: {
        union_with_same_typeset = std::get<0>(value);
        break;
      }
      case 1: {
        union_with_same_typeset = std::get<1>(value);
        break;
      }
      case 2: {
        union_with_same_typeset = std::get<2>(value);
        break;
      }
      case 3: {
        union_with_same_typeset = std::get<3>(value);
        break;
      }
      default: throw new std::runtime_error("Invalid union index.");
    }
    WriteUnion<float, yardl::binary::WriteFloatingPoint, evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1, std::string, yardl::binary::WriteString, int32_t, yardl::binary::WriteInteger>(stream_, union_with_same_typeset);
    break;
  }
  default:
    WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger, float, yardl::binary::WriteFloatingPoint, std::string, yardl::binary::WriteString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteUnionWithTypesAddedImpl(std::variant<evo_test::RecordWithChanges, float> const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges_v1, int32_t, float, std::string> union_with_types_added;
    switch (value.index()) {
      case 0: {
        union_with_types_added = std::get<0>(value);
        break;
      }
      case 1: {
        union_with_types_added = std::get<1>(value);
        break;
      }
      default: throw new std::runtime_error("Invalid union index.");
    }
    WriteUnion<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1, int32_t, yardl::binary::WriteInteger, float, yardl::binary::WriteFloatingPoint, std::string, yardl::binary::WriteString>(stream_, union_with_types_added);
    break;
  }
  default:
    WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, float, yardl::binary::WriteFloatingPoint>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteUnionWithTypesRemovedImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string> const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges_v1, std::string> union_with_types_removed;
    switch (value.index()) {
      case 0: {
        union_with_types_removed = std::get<0>(value);
        break;
      }
      case 1: {
        throw new std::runtime_error("Union type incompatible with previous version of model");
        break;
      }
      case 2: {
        throw new std::runtime_error("Union type incompatible with previous version of model");
        break;
      }
      case 3: {
        union_with_types_removed = std::get<3>(value);
        break;
      }
      default: throw new std::runtime_error("Invalid union index.");
    }
    WriteUnion<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1, std::string, yardl::binary::WriteString>(stream_, union_with_types_removed);
    break;
  }
  default:
    WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger, float, yardl::binary::WriteFloatingPoint, std::string, yardl::binary::WriteString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRecordToOptionalImpl(evo_test::RecordWithChanges const& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<evo_test::RecordWithChanges_v1> record_to_optional;
    record_to_optional = value;
    yardl::binary::WriteOptional<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1>(stream_, record_to_optional);
    break;
  }
  default:
    evo_test::binary::WriteRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRecordToAliasedOptionalImpl(evo_test::RecordWithChanges const& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<evo_test::RecordWithChanges_v1> record_to_aliased_optional;
    record_to_aliased_optional = value;
    yardl::binary::WriteOptional<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1>(stream_, record_to_aliased_optional);
    break;
  }
  default:
    evo_test::binary::WriteRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRecordToUnionImpl(evo_test::RecordWithChanges const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges_v1, std::string> record_to_union;
    record_to_union = value;
    WriteUnion<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1, std::string, yardl::binary::WriteString>(stream_, record_to_union);
    break;
  }
  default:
    evo_test::binary::WriteRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteRecordToAliasedUnionImpl(evo_test::RecordWithChanges const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges_v1, std::string> record_to_aliased_union;
    record_to_aliased_union = value;
    WriteUnion<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1, std::string, yardl::binary::WriteString>(stream_, record_to_aliased_union);
    break;
  }
  default:
    evo_test::binary::WriteRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteUnionToAliasedUnionImpl(std::variant<evo_test::RecordWithChanges, int32_t> const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges_v1, int32_t> union_to_aliased_union;
    switch (value.index()) {
      case 0: {
        union_to_aliased_union = std::get<0>(value);
        break;
      }
      case 1: {
        union_to_aliased_union = std::get<1>(value);
        break;
      }
      default: throw new std::runtime_error("Invalid union index.");
    }
    WriteUnion<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1, int32_t, yardl::binary::WriteInteger>(stream_, union_to_aliased_union);
    break;
  }
  default:
    WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteUnionToAliasedUnionWithChangesImpl(std::variant<evo_test::RecordWithChanges, int32_t> const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges_v1, std::string> union_to_aliased_union_with_changes;
    switch (value.index()) {
      case 0: {
        union_to_aliased_union_with_changes = std::get<0>(value);
        break;
      }
      case 1: {
        throw new std::runtime_error("Union type incompatible with previous version of model");
        break;
      }
      default: throw new std::runtime_error("Invalid union index.");
    }
    WriteUnion<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1, std::string, yardl::binary::WriteString>(stream_, union_to_aliased_union_with_changes);
    break;
  }
  default:
    WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteOptionalToAliasedOptionalImpl(std::optional<evo_test::RecordWithChanges> const& value) {
  switch (version_) {
  case Version::v1: {
    yardl::binary::WriteOptional<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1>(stream_, value);
    break;
  }
  default:
    yardl::binary::WriteOptional<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteOptionalToAliasedOptionalWithChangesImpl(std::optional<int32_t> const& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<std::string> optional_to_aliased_optional_with_changes;
    if (value.has_value()) {
      optional_to_aliased_optional_with_changes = std::to_string(value.value());
    }
    yardl::binary::WriteOptional<std::string, yardl::binary::WriteString>(stream_, optional_to_aliased_optional_with_changes);
    break;
  }
  default:
    yardl::binary::WriteOptional<int32_t, yardl::binary::WriteInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteGenericRecordImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteGenericRecord_v1<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteGenericRecordToOpenAliasImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteAliasedOpenGenericRecord_v1<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteGenericRecordToClosedAliasImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteAliasedClosedGenericRecord_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteGenericRecordToHalfClosedAliasImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteAliasedHalfClosedGenericRecord_v1<int32_t, yardl::binary::WriteInteger>(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteAliasedGenericRecordToAliasImpl(evo_test::AliasedHalfClosedGenericRecord<int32_t> const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteAliasedOpenGenericRecord_v1<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteAliasedHalfClosedGenericRecord<int32_t, yardl::binary::WriteInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteClosedGenericRecordToUnionImpl(evo_test::AliasedClosedGenericRecord const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::GenericRecord_v1<int32_t, std::string>, std::string> closed_generic_record_to_union;
    closed_generic_record_to_union = value;
    WriteUnion<evo_test::GenericRecord_v1<int32_t, std::string>, evo_test::binary::WriteGenericRecord_v1<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>, std::string, yardl::binary::WriteString>(stream_, closed_generic_record_to_union);
    break;
  }
  default:
    evo_test::binary::WriteAliasedClosedGenericRecord(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteGenericRecordToAliasedUnionImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::GenericRecord_v1<int32_t, std::string>, std::string> generic_record_to_aliased_union;
    generic_record_to_aliased_union = value;
    WriteUnion<evo_test::GenericRecord_v1<int32_t, std::string>, evo_test::binary::WriteGenericRecord_v1<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>, std::string, yardl::binary::WriteString>(stream_, generic_record_to_aliased_union);
    break;
  }
  default:
    evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteGenericUnionOfChangedRecordImpl(evo_test::GenericUnion<evo_test::GenericRecord<int32_t, std::string>, float> const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteGenericUnion<evo_test::GenericRecord_v1<int32_t, std::string>, evo_test::binary::WriteGenericRecord_v1<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>, float, yardl::binary::WriteFloatingPoint>(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteGenericUnion<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>, float, yardl::binary::WriteFloatingPoint>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteGenericParentRecordImpl(evo_test::GenericParentRecord<int32_t> const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteGenericParentRecord_v1<int32_t, yardl::binary::WriteInteger>(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteGenericParentRecord<int32_t, yardl::binary::WriteInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteGenericNestedRecordsImpl(evo_test::GenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::ChangedGeneric<std::string, int32_t>> const& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::WriteGenericRecord_v1<evo_test::Unchanged_v1, evo_test::binary::WriteUnchanged_v1, evo_test::Changed_v1, evo_test::binary::WriteChanged_v1>(stream_, value);
    break;
  }
  default:
    evo_test::binary::WriteGenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::binary::WriteUnchangedGeneric<int32_t, yardl::binary::WriteInteger>, evo_test::ChangedGeneric<std::string, int32_t>, evo_test::binary::WriteChangedGeneric<std::string, yardl::binary::WriteString, int32_t, yardl::binary::WriteInteger>>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteGenericRecordStreamImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  switch (version_) {
  case Version::v1: {
    yardl::binary::WriteBlock<evo_test::AliasedClosedGenericRecord_v1, evo_test::binary::WriteAliasedClosedGenericRecord_v1>(stream_, value);
    break;
  }
  default:
    yardl::binary::WriteBlock<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteGenericRecordStreamImpl(std::vector<evo_test::GenericRecord<int32_t, std::string>> const& values) {
  if (!values.empty()) {
    switch (version_) {
    case Version::v1: {
      yardl::binary::WriteVector<evo_test::AliasedClosedGenericRecord_v1, evo_test::binary::WriteAliasedClosedGenericRecord_v1>(stream_, values);
      break;
    }
    default:
      yardl::binary::WriteVector<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>>(stream_, values);
      break;
    }
  }
}

void ProtocolWithChangesWriter::EndGenericRecordStreamImpl() {
  switch (version_) {
  default:
    yardl::binary::WriteInteger(stream_, 0U);
    break;
  }
}

void ProtocolWithChangesWriter::WriteGenericParentRecordStreamImpl(evo_test::GenericParentRecord<int32_t> const& value) {
  switch (version_) {
  case Version::v1: {
    yardl::binary::WriteBlock<evo_test::GenericParentRecord_v1<int32_t>, evo_test::binary::WriteGenericParentRecord_v1<int32_t, yardl::binary::WriteInteger>>(stream_, value);
    break;
  }
  default:
    yardl::binary::WriteBlock<evo_test::GenericParentRecord<int32_t>, evo_test::binary::WriteGenericParentRecord<int32_t, yardl::binary::WriteInteger>>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteGenericParentRecordStreamImpl(std::vector<evo_test::GenericParentRecord<int32_t>> const& values) {
  if (!values.empty()) {
    switch (version_) {
    case Version::v1: {
      yardl::binary::WriteVector<evo_test::GenericParentRecord_v1<int32_t>, evo_test::binary::WriteGenericParentRecord_v1<int32_t, yardl::binary::WriteInteger>>(stream_, values);
      break;
    }
    default:
      yardl::binary::WriteVector<evo_test::GenericParentRecord<int32_t>, evo_test::binary::WriteGenericParentRecord<int32_t, yardl::binary::WriteInteger>>(stream_, values);
      break;
    }
  }
}

void ProtocolWithChangesWriter::EndGenericParentRecordStreamImpl() {
  switch (version_) {
  default:
    yardl::binary::WriteInteger(stream_, 0U);
    break;
  }
}

void ProtocolWithChangesWriter::WriteVectorRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges> const& value) {
  switch (version_) {
  case Version::v1: {
    yardl::binary::WriteVector<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1>(stream_, value);
    break;
  }
  default:
    yardl::binary::WriteVector<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteStreamedRecordWithChangesImpl(evo_test::RecordWithChanges const& value) {
  switch (version_) {
  case Version::v1: {
    yardl::binary::WriteBlock<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1>(stream_, value);
    break;
  }
  default:
    yardl::binary::WriteBlock<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteStreamedRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges> const& values) {
  if (!values.empty()) {
    switch (version_) {
    case Version::v1: {
      yardl::binary::WriteVector<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1>(stream_, values);
      break;
    }
    default:
      yardl::binary::WriteVector<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, values);
      break;
    }
  }
}

void ProtocolWithChangesWriter::EndStreamedRecordWithChangesImpl() {
  switch (version_) {
  default:
    yardl::binary::WriteInteger(stream_, 0U);
    break;
  }
}

void ProtocolWithChangesWriter::WriteAddedStringVectorImpl(std::vector<evo_test::AliasedString> const& value) {
  switch (version_) {
  case Version::v0: {
    break;
  }
  case Version::v1: {
    break;
  }
  default:
    yardl::binary::WriteVector<evo_test::AliasedString, evo_test::binary::WriteAliasedString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteAddedOptionalImpl(std::optional<evo_test::RecordWithChanges> const& value) {
  switch (version_) {
  case Version::v0: {
    break;
  }
  case Version::v1: {
    yardl::binary::WriteOptional<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1>(stream_, value);
    break;
  }
  default:
    yardl::binary::WriteOptional<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteAddedMapImpl(std::unordered_map<std::string, std::string> const& value) {
  switch (version_) {
  case Version::v0: {
    break;
  }
  default:
    yardl::binary::WriteMap<std::string, std::string, yardl::binary::WriteString, yardl::binary::WriteString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteAddedUnionImpl(std::variant<std::monostate, evo_test::RecordWithChanges, std::string> const& value) {
  switch (version_) {
  case Version::v0: {
    break;
  }
  case Version::v1: {
    break;
  }
  default:
    WriteUnion<std::monostate, yardl::binary::WriteMonostate, evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, std::string, yardl::binary::WriteString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteAddedRecordStreamImpl(evo_test::RecordWithChanges const& value) {
  switch (version_) {
  case Version::v0: {
    break;
  }
  case Version::v1: {
    yardl::binary::WriteBlock<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1>(stream_, value);
    break;
  }
  default:
    yardl::binary::WriteBlock<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteAddedRecordStreamImpl(std::vector<evo_test::RecordWithChanges> const& values) {
  if (!values.empty()) {
    switch (version_) {
    case Version::v0: {
      break;
    }
    case Version::v1: {
      yardl::binary::WriteVector<evo_test::RecordWithChanges_v1, evo_test::binary::WriteRecordWithChanges_v1>(stream_, values);
      break;
    }
    default:
      yardl::binary::WriteVector<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, values);
      break;
    }
  }
}

void ProtocolWithChangesWriter::EndAddedRecordStreamImpl() {
  switch (version_) {
  case Version::v0: {
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, 0U);
    break;
  }
}

void ProtocolWithChangesWriter::WriteAddedUnionStreamImpl(std::variant<evo_test::RecordWithChanges, evo_test::RenamedRecord> const& value) {
  switch (version_) {
  case Version::v0: {
    break;
  }
  case Version::v1: {
    break;
  }
  default:
    yardl::binary::WriteBlock<std::variant<evo_test::RecordWithChanges, evo_test::RenamedRecord>, WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, evo_test::RenamedRecord, evo_test::binary::WriteRenamedRecord>>(stream_, value);
    break;
  }
}

void ProtocolWithChangesWriter::WriteAddedUnionStreamImpl(std::vector<std::variant<evo_test::RecordWithChanges, evo_test::RenamedRecord>> const& values) {
  if (!values.empty()) {
    switch (version_) {
    case Version::v0: {
      break;
    }
    case Version::v1: {
      break;
    }
    default:
      yardl::binary::WriteVector<std::variant<evo_test::RecordWithChanges, evo_test::RenamedRecord>, WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, evo_test::RenamedRecord, evo_test::binary::WriteRenamedRecord>>(stream_, values);
      break;
    }
  }
}

void ProtocolWithChangesWriter::EndAddedUnionStreamImpl() {
  switch (version_) {
  case Version::v0: {
    break;
  }
  case Version::v1: {
    break;
  }
  default:
    yardl::binary::WriteInteger(stream_, 0U);
    break;
  }
}

void ProtocolWithChangesWriter::Flush() {
  stream_.Flush();
}

void ProtocolWithChangesWriter::CloseImpl() {
  stream_.Flush();
}

void ProtocolWithChangesReader::ReadInt8ToIntImpl(int8_t& value) {
  switch (version_) {
  case Version::v1: {
    int32_t int8_to_int;
    yardl::binary::ReadInteger(stream_, int8_to_int);
    value = static_cast<int8_t>(int8_to_int);
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadInt8ToLongImpl(int8_t& value) {
  switch (version_) {
  case Version::v1: {
    int64_t int8_to_long;
    yardl::binary::ReadInteger(stream_, int8_to_long);
    value = static_cast<int8_t>(int8_to_long);
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadInt8ToUintImpl(int8_t& value) {
  switch (version_) {
  case Version::v1: {
    uint32_t int8_to_uint;
    yardl::binary::ReadInteger(stream_, int8_to_uint);
    value = static_cast<int8_t>(int8_to_uint);
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadInt8ToUlongImpl(int8_t& value) {
  switch (version_) {
  case Version::v1: {
    uint64_t int8_to_ulong;
    yardl::binary::ReadInteger(stream_, int8_to_ulong);
    value = static_cast<int8_t>(int8_to_ulong);
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadInt8ToFloatImpl(int8_t& value) {
  switch (version_) {
  case Version::v1: {
    float int8_to_float;
    yardl::binary::ReadFloatingPoint(stream_, int8_to_float);
    value = static_cast<int8_t>(std::round(int8_to_float));
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadInt8ToDoubleImpl(int8_t& value) {
  switch (version_) {
  case Version::v1: {
    double int8_to_double;
    yardl::binary::ReadFloatingPoint(stream_, int8_to_double);
    value = static_cast<int8_t>(std::round(int8_to_double));
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadIntToUintImpl(int32_t& value) {
  switch (version_) {
  case Version::v1: {
    uint32_t int_to_uint;
    yardl::binary::ReadInteger(stream_, int_to_uint);
    value = static_cast<int32_t>(int_to_uint);
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadIntToLongImpl(int32_t& value) {
  switch (version_) {
  case Version::v1: {
    int64_t int_to_long;
    yardl::binary::ReadInteger(stream_, int_to_long);
    value = static_cast<int32_t>(int_to_long);
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadIntToFloatImpl(int32_t& value) {
  switch (version_) {
  case Version::v1: {
    float int_to_float;
    yardl::binary::ReadFloatingPoint(stream_, int_to_float);
    value = static_cast<int32_t>(std::round(int_to_float));
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadIntToDoubleImpl(int32_t& value) {
  switch (version_) {
  case Version::v1: {
    double int_to_double;
    yardl::binary::ReadFloatingPoint(stream_, int_to_double);
    value = static_cast<int32_t>(std::round(int_to_double));
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadUintToUlongImpl(uint32_t& value) {
  switch (version_) {
  case Version::v1: {
    uint64_t uint_to_ulong;
    yardl::binary::ReadInteger(stream_, uint_to_ulong);
    value = static_cast<uint32_t>(uint_to_ulong);
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadUintToFloatImpl(uint32_t& value) {
  switch (version_) {
  case Version::v1: {
    float uint_to_float;
    yardl::binary::ReadFloatingPoint(stream_, uint_to_float);
    value = static_cast<uint32_t>(std::round(uint_to_float));
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadUintToDoubleImpl(uint32_t& value) {
  switch (version_) {
  case Version::v1: {
    double uint_to_double;
    yardl::binary::ReadFloatingPoint(stream_, uint_to_double);
    value = static_cast<uint32_t>(std::round(uint_to_double));
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadFloatToDoubleImpl(float& value) {
  switch (version_) {
  case Version::v1: {
    double float_to_double;
    yardl::binary::ReadFloatingPoint(stream_, float_to_double);
    value = static_cast<float>(float_to_double);
    break;
  }
  default:
    yardl::binary::ReadFloatingPoint(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadIntToStringImpl(int32_t& value) {
  switch (version_) {
  case Version::v1: {
    std::string int_to_string;
    yardl::binary::ReadString(stream_, int_to_string);
    value = std::stoi(int_to_string);
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadUintToStringImpl(uint32_t& value) {
  switch (version_) {
  case Version::v1: {
    std::string uint_to_string;
    yardl::binary::ReadString(stream_, uint_to_string);
    value = std::stoul(uint_to_string);
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadLongToStringImpl(int64_t& value) {
  switch (version_) {
  case Version::v1: {
    std::string long_to_string;
    yardl::binary::ReadString(stream_, long_to_string);
    value = std::stol(long_to_string);
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadUlongToStringImpl(uint64_t& value) {
  switch (version_) {
  case Version::v1: {
    std::string ulong_to_string;
    yardl::binary::ReadString(stream_, ulong_to_string);
    value = std::stoul(ulong_to_string);
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadFloatToStringImpl(float& value) {
  switch (version_) {
  case Version::v1: {
    std::string float_to_string;
    yardl::binary::ReadString(stream_, float_to_string);
    value = std::stof(float_to_string);
    break;
  }
  default:
    yardl::binary::ReadFloatingPoint(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadDoubleToStringImpl(double& value) {
  switch (version_) {
  case Version::v1: {
    std::string double_to_string;
    yardl::binary::ReadString(stream_, double_to_string);
    value = std::stod(double_to_string);
    break;
  }
  default:
    yardl::binary::ReadFloatingPoint(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadIntToOptionalImpl(int32_t& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<int32_t> int_to_optional;
    yardl::binary::ReadOptional<int32_t, yardl::binary::ReadInteger>(stream_, int_to_optional);
    value = int_to_optional.value();
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadFloatToOptionalImpl(float& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<float> float_to_optional;
    yardl::binary::ReadOptional<float, yardl::binary::ReadFloatingPoint>(stream_, float_to_optional);
    value = float_to_optional.value();
    break;
  }
  default:
    yardl::binary::ReadFloatingPoint(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadStringToOptionalImpl(std::string& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<std::string> string_to_optional;
    yardl::binary::ReadOptional<std::string, yardl::binary::ReadString>(stream_, string_to_optional);
    value = string_to_optional.value();
    break;
  }
  default:
    yardl::binary::ReadString(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadIntToUnionImpl(int32_t& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<int32_t, bool> int_to_union;
    ReadUnion<int32_t, yardl::binary::ReadInteger, bool, yardl::binary::ReadInteger>(stream_, int_to_union);
    value = std::get<0>(int_to_union);
    break;
  }
  default:
    yardl::binary::ReadInteger(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadFloatToUnionImpl(float& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<float, bool> float_to_union;
    ReadUnion<float, yardl::binary::ReadFloatingPoint, bool, yardl::binary::ReadInteger>(stream_, float_to_union);
    value = std::get<0>(float_to_union);
    break;
  }
  default:
    yardl::binary::ReadFloatingPoint(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadStringToUnionImpl(std::string& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<std::string, bool> string_to_union;
    ReadUnion<std::string, yardl::binary::ReadString, bool, yardl::binary::ReadInteger>(stream_, string_to_union);
    value = std::get<0>(string_to_union);
    break;
  }
  default:
    yardl::binary::ReadString(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadOptionalIntToFloatImpl(std::optional<int32_t>& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<float> optional_int_to_float;
    yardl::binary::ReadOptional<float, yardl::binary::ReadFloatingPoint>(stream_, optional_int_to_float);
    std::optional<int32_t> tmp;
    if (optional_int_to_float.has_value()) {
      tmp = static_cast<int32_t>(std::round(optional_int_to_float.value()));
    }
    value = tmp;
    break;
  }
  default:
    yardl::binary::ReadOptional<int32_t, yardl::binary::ReadInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadOptionalFloatToStringImpl(std::optional<float>& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<std::string> optional_float_to_string;
    yardl::binary::ReadOptional<std::string, yardl::binary::ReadString>(stream_, optional_float_to_string);
    std::optional<float> tmp;
    if (optional_float_to_string.has_value()) {
      tmp = std::stof(optional_float_to_string.value());
    }
    value = tmp;
    break;
  }
  default:
    yardl::binary::ReadOptional<float, yardl::binary::ReadFloatingPoint>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadAliasedLongToStringImpl(evo_test::AliasedLongToString& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadAliasedLongToString_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadAliasedLongToString(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadStringToAliasedStringImpl(std::string& value) {
  yardl::binary::ReadString(stream_, value);
}

void ProtocolWithChangesReader::ReadStringToAliasedIntImpl(std::string& value) {
  switch (version_) {
  case Version::v1: {
    int32_t string_to_aliased_int;
    yardl::binary::ReadInteger(stream_, string_to_aliased_int);
    value = std::to_string(string_to_aliased_int);
    break;
  }
  default:
    yardl::binary::ReadString(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadOptionalIntToUnionImpl(std::optional<int32_t>& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<std::monostate, int32_t, std::string> optional_int_to_union;
    ReadUnion<std::monostate, yardl::binary::ReadMonostate, int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, optional_int_to_union);
    if (optional_int_to_union.index() == 1) {
      value = std::get<1>(optional_int_to_union);
    }
    break;
  }
  default:
    yardl::binary::ReadOptional<int32_t, yardl::binary::ReadInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadOptionalRecordToUnionImpl(std::optional<evo_test::RecordWithChanges>& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<std::monostate, evo_test::RecordWithChanges_v1, std::string> optional_record_to_union;
    ReadUnion<std::monostate, yardl::binary::ReadMonostate, evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1, std::string, yardl::binary::ReadString>(stream_, optional_record_to_union);
    if (optional_record_to_union.index() == 1) {
      value = std::get<1>(optional_record_to_union);
    }
    break;
  }
  default:
    yardl::binary::ReadOptional<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRecordWithChangesImpl(evo_test::RecordWithChanges& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRecordWithChanges_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadAliasedRecordWithChangesImpl(evo_test::AliasedRecordWithChanges& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadAliasedRecordWithChanges_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadAliasedRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRecordToRenamedRecordImpl(evo_test::RenamedRecord& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRenamedRecord_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRenamedRecord(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRecordToAliasedRecordImpl(evo_test::RecordWithChanges& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadAliasedRecordWithChanges_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRecordToAliasedAliasImpl(evo_test::RecordWithChanges& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadAliasOfAliasedRecordWithChanges_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRlinkImpl(evo_test::RLink& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRLink_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRLink(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRlinkRXImpl(evo_test::RLink& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRX_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRLink(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRlinkRYImpl(evo_test::RLink& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRY_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRLink(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRlinkRZImpl(evo_test::RLink& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRZ_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRLink(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRaRLinkImpl(evo_test::RA& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRLink_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRA(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRaRXImpl(evo_test::RA& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRX_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRA(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRaRYImpl(evo_test::RA& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRY_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRA(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRaRZImpl(evo_test::RA& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRZ_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRA(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRbRLinkImpl(evo_test::RB& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRLink_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRB(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRbRXImpl(evo_test::RB& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRX_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRB(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRbRYImpl(evo_test::RB& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRY_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRB(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRbRZImpl(evo_test::RB& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRZ_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRB(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRcRLinkImpl(evo_test::RC& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRLink_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRC(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRcRXImpl(evo_test::RC& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRX_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRC(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRcRYImpl(evo_test::RC& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRY_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRC(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRcRZImpl(evo_test::RC& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRZ_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRC(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRlinkRNewImpl(evo_test::RLink& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRNew_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRLink(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRaRNewImpl(evo_test::RA& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRNew_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRA(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRbRNewImpl(evo_test::RB& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRNew_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRB(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRcRNewImpl(evo_test::RC& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadRNew_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadRC(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRlinkRUnionImpl(evo_test::RLink& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RX_v1, std::string> rlink_r_union;
    ReadUnion<evo_test::RX_v1, evo_test::binary::ReadRX_v1, std::string, yardl::binary::ReadString>(stream_, rlink_r_union);
    value = std::get<0>(rlink_r_union);
    break;
  }
  default:
    evo_test::binary::ReadRLink(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRaRUnionImpl(evo_test::RA& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RX_v1, std::string> ra_r_union;
    ReadUnion<evo_test::RX_v1, evo_test::binary::ReadRX_v1, std::string, yardl::binary::ReadString>(stream_, ra_r_union);
    value = std::get<0>(ra_r_union);
    break;
  }
  default:
    evo_test::binary::ReadRA(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRbRUnionImpl(evo_test::RB& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RX_v1, std::string> rb_r_union;
    ReadUnion<evo_test::RX_v1, evo_test::binary::ReadRX_v1, std::string, yardl::binary::ReadString>(stream_, rb_r_union);
    value = std::get<0>(rb_r_union);
    break;
  }
  default:
    evo_test::binary::ReadRB(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRcRUnionImpl(evo_test::RC& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RX_v1, std::string> rc_r_union;
    ReadUnion<evo_test::RX_v1, evo_test::binary::ReadRX_v1, std::string, yardl::binary::ReadString>(stream_, rc_r_union);
    value = std::get<0>(rc_r_union);
    break;
  }
  default:
    evo_test::binary::ReadRC(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadOptionalRecordWithChangesImpl(std::optional<evo_test::RecordWithChanges>& value) {
  switch (version_) {
  case Version::v1: {
    yardl::binary::ReadOptional<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1>(stream_, value);
    break;
  }
  default:
    yardl::binary::ReadOptional<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadAliasedOptionalRecordWithChangesImpl(std::optional<evo_test::AliasedRecordWithChanges>& value) {
  switch (version_) {
  case Version::v1: {
    yardl::binary::ReadOptional<evo_test::AliasedRecordWithChanges_v1, evo_test::binary::ReadAliasedRecordWithChanges_v1>(stream_, value);
    break;
  }
  default:
    yardl::binary::ReadOptional<evo_test::AliasedRecordWithChanges, evo_test::binary::ReadAliasedRecordWithChanges>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadUnionRecordWithChangesImpl(std::variant<evo_test::RecordWithChanges, int32_t>& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges_v1, int32_t> union_record_with_changes;
    ReadUnion<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1, int32_t, yardl::binary::ReadInteger>(stream_, union_record_with_changes);
    switch (union_record_with_changes.index()) {
      case 0: {
        value = std::get<0>(union_record_with_changes);
        break;
      }
      case 1: {
        value = std::get<1>(union_record_with_changes);
        break;
      }
      default: throw new std::runtime_error("Invalid union index.");
    }
    break;
  }
  default:
    ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadUnionWithSameTypesetImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string>& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<float, evo_test::RecordWithChanges_v1, std::string, int32_t> union_with_same_typeset;
    ReadUnion<float, yardl::binary::ReadFloatingPoint, evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1, std::string, yardl::binary::ReadString, int32_t, yardl::binary::ReadInteger>(stream_, union_with_same_typeset);
    switch (union_with_same_typeset.index()) {
      case 0: {
        value = std::get<0>(union_with_same_typeset);
        break;
      }
      case 1: {
        value = std::get<1>(union_with_same_typeset);
        break;
      }
      case 2: {
        value = std::get<2>(union_with_same_typeset);
        break;
      }
      case 3: {
        value = std::get<3>(union_with_same_typeset);
        break;
      }
      default: throw new std::runtime_error("Invalid union index.");
    }
    break;
  }
  default:
    ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger, float, yardl::binary::ReadFloatingPoint, std::string, yardl::binary::ReadString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadUnionWithTypesAddedImpl(std::variant<evo_test::RecordWithChanges, float>& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges_v1, int32_t, float, std::string> union_with_types_added;
    ReadUnion<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1, int32_t, yardl::binary::ReadInteger, float, yardl::binary::ReadFloatingPoint, std::string, yardl::binary::ReadString>(stream_, union_with_types_added);
    switch (union_with_types_added.index()) {
      case 0: {
        value = std::get<0>(union_with_types_added);
        break;
      }
      case 1: {
        throw new std::runtime_error("Union type incompatible with previous version of model");
        break;
      }
      case 2: {
        value = std::get<2>(union_with_types_added);
        break;
      }
      case 3: {
        throw new std::runtime_error("Union type incompatible with previous version of model");
        break;
      }
      default: throw new std::runtime_error("Invalid union index.");
    }
    break;
  }
  default:
    ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, float, yardl::binary::ReadFloatingPoint>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadUnionWithTypesRemovedImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string>& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges_v1, std::string> union_with_types_removed;
    ReadUnion<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1, std::string, yardl::binary::ReadString>(stream_, union_with_types_removed);
    switch (union_with_types_removed.index()) {
      case 0: {
        value = std::get<0>(union_with_types_removed);
        break;
      }
      case 1: {
        value = std::get<1>(union_with_types_removed);
        break;
      }
      default: throw new std::runtime_error("Invalid union index.");
    }
    break;
  }
  default:
    ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger, float, yardl::binary::ReadFloatingPoint, std::string, yardl::binary::ReadString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRecordToOptionalImpl(evo_test::RecordWithChanges& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<evo_test::RecordWithChanges_v1> record_to_optional;
    yardl::binary::ReadOptional<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1>(stream_, record_to_optional);
    value = record_to_optional.value();
    break;
  }
  default:
    evo_test::binary::ReadRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRecordToAliasedOptionalImpl(evo_test::RecordWithChanges& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<evo_test::RecordWithChanges_v1> record_to_aliased_optional;
    yardl::binary::ReadOptional<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1>(stream_, record_to_aliased_optional);
    value = record_to_aliased_optional.value();
    break;
  }
  default:
    evo_test::binary::ReadRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRecordToUnionImpl(evo_test::RecordWithChanges& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges_v1, std::string> record_to_union;
    ReadUnion<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1, std::string, yardl::binary::ReadString>(stream_, record_to_union);
    value = std::get<0>(record_to_union);
    break;
  }
  default:
    evo_test::binary::ReadRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadRecordToAliasedUnionImpl(evo_test::RecordWithChanges& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges_v1, std::string> record_to_aliased_union;
    ReadUnion<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1, std::string, yardl::binary::ReadString>(stream_, record_to_aliased_union);
    value = std::get<0>(record_to_aliased_union);
    break;
  }
  default:
    evo_test::binary::ReadRecordWithChanges(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadUnionToAliasedUnionImpl(std::variant<evo_test::RecordWithChanges, int32_t>& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges_v1, int32_t> union_to_aliased_union;
    ReadUnion<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1, int32_t, yardl::binary::ReadInteger>(stream_, union_to_aliased_union);
    switch (union_to_aliased_union.index()) {
      case 0: {
        value = std::get<0>(union_to_aliased_union);
        break;
      }
      case 1: {
        value = std::get<1>(union_to_aliased_union);
        break;
      }
      default: throw new std::runtime_error("Invalid union index.");
    }
    break;
  }
  default:
    ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadUnionToAliasedUnionWithChangesImpl(std::variant<evo_test::RecordWithChanges, int32_t>& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges_v1, std::string> union_to_aliased_union_with_changes;
    ReadUnion<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1, std::string, yardl::binary::ReadString>(stream_, union_to_aliased_union_with_changes);
    switch (union_to_aliased_union_with_changes.index()) {
      case 0: {
        value = std::get<0>(union_to_aliased_union_with_changes);
        break;
      }
      case 1: {
        throw new std::runtime_error("Union type incompatible with previous version of model");
        break;
      }
      default: throw new std::runtime_error("Invalid union index.");
    }
    break;
  }
  default:
    ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadOptionalToAliasedOptionalImpl(std::optional<evo_test::RecordWithChanges>& value) {
  switch (version_) {
  case Version::v1: {
    yardl::binary::ReadOptional<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1>(stream_, value);
    break;
  }
  default:
    yardl::binary::ReadOptional<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadOptionalToAliasedOptionalWithChangesImpl(std::optional<int32_t>& value) {
  switch (version_) {
  case Version::v1: {
    std::optional<std::string> optional_to_aliased_optional_with_changes;
    yardl::binary::ReadOptional<std::string, yardl::binary::ReadString>(stream_, optional_to_aliased_optional_with_changes);
    std::optional<int32_t> tmp;
    if (optional_to_aliased_optional_with_changes.has_value()) {
      tmp = std::stoi(optional_to_aliased_optional_with_changes.value());
    }
    value = tmp;
    break;
  }
  default:
    yardl::binary::ReadOptional<int32_t, yardl::binary::ReadInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadGenericRecordImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadGenericRecord_v1<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadGenericRecordToOpenAliasImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadAliasedOpenGenericRecord_v1<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadGenericRecordToClosedAliasImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadAliasedClosedGenericRecord_v1(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadGenericRecordToHalfClosedAliasImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadAliasedHalfClosedGenericRecord_v1<int32_t, yardl::binary::ReadInteger>(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadAliasedGenericRecordToAliasImpl(evo_test::AliasedHalfClosedGenericRecord<int32_t>& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadAliasedOpenGenericRecord_v1<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadAliasedHalfClosedGenericRecord<int32_t, yardl::binary::ReadInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadClosedGenericRecordToUnionImpl(evo_test::AliasedClosedGenericRecord& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::GenericRecord_v1<int32_t, std::string>, std::string> closed_generic_record_to_union;
    ReadUnion<evo_test::GenericRecord_v1<int32_t, std::string>, evo_test::binary::ReadGenericRecord_v1<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>, std::string, yardl::binary::ReadString>(stream_, closed_generic_record_to_union);
    value = std::get<0>(closed_generic_record_to_union);
    break;
  }
  default:
    evo_test::binary::ReadAliasedClosedGenericRecord(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadGenericRecordToAliasedUnionImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  switch (version_) {
  case Version::v1: {
    std::variant<evo_test::GenericRecord_v1<int32_t, std::string>, std::string> generic_record_to_aliased_union;
    ReadUnion<evo_test::GenericRecord_v1<int32_t, std::string>, evo_test::binary::ReadGenericRecord_v1<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>, std::string, yardl::binary::ReadString>(stream_, generic_record_to_aliased_union);
    value = std::get<0>(generic_record_to_aliased_union);
    break;
  }
  default:
    evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadGenericUnionOfChangedRecordImpl(evo_test::GenericUnion<evo_test::GenericRecord<int32_t, std::string>, float>& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadGenericUnion<evo_test::GenericRecord_v1<int32_t, std::string>, evo_test::binary::ReadGenericRecord_v1<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>, float, yardl::binary::ReadFloatingPoint>(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadGenericUnion<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>, float, yardl::binary::ReadFloatingPoint>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadGenericParentRecordImpl(evo_test::GenericParentRecord<int32_t>& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadGenericParentRecord_v1<int32_t, yardl::binary::ReadInteger>(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadGenericParentRecord<int32_t, yardl::binary::ReadInteger>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadGenericNestedRecordsImpl(evo_test::GenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::ChangedGeneric<std::string, int32_t>>& value) {
  switch (version_) {
  case Version::v1: {
    evo_test::binary::ReadGenericRecord_v1<evo_test::Unchanged_v1, evo_test::binary::ReadUnchanged_v1, evo_test::Changed_v1, evo_test::binary::ReadChanged_v1>(stream_, value);
    break;
  }
  default:
    evo_test::binary::ReadGenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::binary::ReadUnchangedGeneric<int32_t, yardl::binary::ReadInteger>, evo_test::ChangedGeneric<std::string, int32_t>, evo_test::binary::ReadChangedGeneric<std::string, yardl::binary::ReadString, int32_t, yardl::binary::ReadInteger>>(stream_, value);
    break;
  }
}

bool ProtocolWithChangesReader::ReadGenericRecordStreamImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  switch (version_) {
  case Version::v1: {
    return yardl::binary::ReadBlock<evo_test::AliasedClosedGenericRecord_v1, evo_test::binary::ReadAliasedClosedGenericRecord_v1>(stream_, current_block_remaining_, value);
    break;
  }
  default:
    return yardl::binary::ReadBlock<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream_, current_block_remaining_, value);
    break;
  }
}

bool ProtocolWithChangesReader::ReadGenericRecordStreamImpl(std::vector<evo_test::GenericRecord<int32_t, std::string>>& values) {
  switch (version_) {
  case Version::v1: {
    yardl::binary::ReadBlocksIntoVector<evo_test::AliasedClosedGenericRecord_v1, evo_test::binary::ReadAliasedClosedGenericRecord_v1>(stream_, current_block_remaining_, values);
    break;
  }
  default:
    yardl::binary::ReadBlocksIntoVector<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream_, current_block_remaining_, values);
    break;
  }
  return current_block_remaining_ != 0;
}

bool ProtocolWithChangesReader::ReadGenericParentRecordStreamImpl(evo_test::GenericParentRecord<int32_t>& value) {
  switch (version_) {
  case Version::v1: {
    return yardl::binary::ReadBlock<evo_test::GenericParentRecord_v1<int32_t>, evo_test::binary::ReadGenericParentRecord_v1<int32_t, yardl::binary::ReadInteger>>(stream_, current_block_remaining_, value);
    break;
  }
  default:
    return yardl::binary::ReadBlock<evo_test::GenericParentRecord<int32_t>, evo_test::binary::ReadGenericParentRecord<int32_t, yardl::binary::ReadInteger>>(stream_, current_block_remaining_, value);
    break;
  }
}

bool ProtocolWithChangesReader::ReadGenericParentRecordStreamImpl(std::vector<evo_test::GenericParentRecord<int32_t>>& values) {
  switch (version_) {
  case Version::v1: {
    yardl::binary::ReadBlocksIntoVector<evo_test::GenericParentRecord_v1<int32_t>, evo_test::binary::ReadGenericParentRecord_v1<int32_t, yardl::binary::ReadInteger>>(stream_, current_block_remaining_, values);
    break;
  }
  default:
    yardl::binary::ReadBlocksIntoVector<evo_test::GenericParentRecord<int32_t>, evo_test::binary::ReadGenericParentRecord<int32_t, yardl::binary::ReadInteger>>(stream_, current_block_remaining_, values);
    break;
  }
  return current_block_remaining_ != 0;
}

void ProtocolWithChangesReader::ReadVectorRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges>& value) {
  switch (version_) {
  case Version::v1: {
    yardl::binary::ReadVector<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1>(stream_, value);
    break;
  }
  default:
    yardl::binary::ReadVector<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
    break;
  }
}

bool ProtocolWithChangesReader::ReadStreamedRecordWithChangesImpl(evo_test::RecordWithChanges& value) {
  switch (version_) {
  case Version::v1: {
    return yardl::binary::ReadBlock<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1>(stream_, current_block_remaining_, value);
    break;
  }
  default:
    return yardl::binary::ReadBlock<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, current_block_remaining_, value);
    break;
  }
}

bool ProtocolWithChangesReader::ReadStreamedRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges>& values) {
  switch (version_) {
  case Version::v1: {
    yardl::binary::ReadBlocksIntoVector<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1>(stream_, current_block_remaining_, values);
    break;
  }
  default:
    yardl::binary::ReadBlocksIntoVector<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, current_block_remaining_, values);
    break;
  }
  return current_block_remaining_ != 0;
}

void ProtocolWithChangesReader::ReadAddedStringVectorImpl(std::vector<evo_test::AliasedString>& value) {
  switch (version_) {
  case Version::v0: {
    std::vector<evo_test::AliasedString> added_string_vector;
    value = std::move(added_string_vector);
    break;
  }
  case Version::v1: {
    std::vector<evo_test::AliasedString> added_string_vector;
    value = std::move(added_string_vector);
    break;
  }
  default:
    yardl::binary::ReadVector<evo_test::AliasedString, evo_test::binary::ReadAliasedString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadAddedOptionalImpl(std::optional<evo_test::RecordWithChanges>& value) {
  switch (version_) {
  case Version::v0: {
    std::optional<evo_test::RecordWithChanges> added_optional;
    value = std::move(added_optional);
    break;
  }
  case Version::v1: {
    yardl::binary::ReadOptional<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1>(stream_, value);
    break;
  }
  default:
    yardl::binary::ReadOptional<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadAddedMapImpl(std::unordered_map<std::string, std::string>& value) {
  switch (version_) {
  case Version::v0: {
    std::unordered_map<std::string, std::string> added_map;
    value = std::move(added_map);
    break;
  }
  default:
    yardl::binary::ReadMap<std::string, std::string, yardl::binary::ReadString, yardl::binary::ReadString>(stream_, value);
    break;
  }
}

void ProtocolWithChangesReader::ReadAddedUnionImpl(std::variant<std::monostate, evo_test::RecordWithChanges, std::string>& value) {
  switch (version_) {
  case Version::v0: {
    std::variant<std::monostate, evo_test::RecordWithChanges, std::string> added_union;
    value = std::move(added_union);
    break;
  }
  case Version::v1: {
    std::variant<std::monostate, evo_test::RecordWithChanges, std::string> added_union;
    value = std::move(added_union);
    break;
  }
  default:
    ReadUnion<std::monostate, yardl::binary::ReadMonostate, evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, std::string, yardl::binary::ReadString>(stream_, value);
    break;
  }
}

bool ProtocolWithChangesReader::ReadAddedRecordStreamImpl(evo_test::RecordWithChanges& value) {
  switch (version_) {
  case Version::v0: {
    evo_test::RecordWithChanges added_record_stream;
    value = std::move(added_record_stream);
    return false;
    break;
  }
  case Version::v1: {
    return yardl::binary::ReadBlock<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1>(stream_, current_block_remaining_, value);
    break;
  }
  default:
    return yardl::binary::ReadBlock<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, current_block_remaining_, value);
    break;
  }
}

bool ProtocolWithChangesReader::ReadAddedRecordStreamImpl(std::vector<evo_test::RecordWithChanges>& values) {
  switch (version_) {
  case Version::v0: {
    values.clear();
    break;
  }
  case Version::v1: {
    yardl::binary::ReadBlocksIntoVector<evo_test::RecordWithChanges_v1, evo_test::binary::ReadRecordWithChanges_v1>(stream_, current_block_remaining_, values);
    break;
  }
  default:
    yardl::binary::ReadBlocksIntoVector<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, current_block_remaining_, values);
    break;
  }
  return current_block_remaining_ != 0;
}

bool ProtocolWithChangesReader::ReadAddedUnionStreamImpl(std::variant<evo_test::RecordWithChanges, evo_test::RenamedRecord>& value) {
  switch (version_) {
  case Version::v0: {
    std::variant<evo_test::RecordWithChanges, evo_test::RenamedRecord> added_union_stream;
    value = std::move(added_union_stream);
    return false;
    break;
  }
  case Version::v1: {
    std::variant<evo_test::RecordWithChanges, evo_test::RenamedRecord> added_union_stream;
    value = std::move(added_union_stream);
    return false;
    break;
  }
  default:
    return yardl::binary::ReadBlock<std::variant<evo_test::RecordWithChanges, evo_test::RenamedRecord>, ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, evo_test::RenamedRecord, evo_test::binary::ReadRenamedRecord>>(stream_, current_block_remaining_, value);
    break;
  }
}

bool ProtocolWithChangesReader::ReadAddedUnionStreamImpl(std::vector<std::variant<evo_test::RecordWithChanges, evo_test::RenamedRecord>>& values) {
  switch (version_) {
  case Version::v0: {
    values.clear();
    break;
  }
  case Version::v1: {
    values.clear();
    break;
  }
  default:
    yardl::binary::ReadBlocksIntoVector<std::variant<evo_test::RecordWithChanges, evo_test::RenamedRecord>, ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, evo_test::RenamedRecord, evo_test::binary::ReadRenamedRecord>>(stream_, current_block_remaining_, values);
    break;
  }
  return current_block_remaining_ != 0;
}

void ProtocolWithChangesReader::CloseImpl() {
  stream_.VerifyFinished();
}

} // namespace evo_test::binary


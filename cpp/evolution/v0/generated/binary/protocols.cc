// This file was generated by the "yardl" tool. DO NOT EDIT.

#include "protocols.h"

#include <cstddef>

#include "../yardl/detail/binary/coded_stream.h"
#include "../yardl/detail/binary/serializers.h"

namespace yardl::binary {
#ifndef _MSC_VER
// Values of offsetof() are only used if types are standard-layout.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winvalid-offsetof"
#endif

template <>
struct IsTriviallySerializable<evo_test::UnchangedRecord> {
  using __T__ = evo_test::UnchangedRecord;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::name)>::value &&
    IsTriviallySerializable<decltype(__T__::age)>::value &&
    IsTriviallySerializable<decltype(__T__::meta)>::value &&
    (sizeof(__T__) == (sizeof(__T__::name) + sizeof(__T__::age) + sizeof(__T__::meta))) &&
    offsetof(__T__, name) < offsetof(__T__, age) && offsetof(__T__, age) < offsetof(__T__, meta);
};

template <>
struct IsTriviallySerializable<evo_test::RecordWithChanges> {
  using __T__ = evo_test::RecordWithChanges;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::deprecated_float)>::value &&
    IsTriviallySerializable<decltype(__T__::int_to_long)>::value &&
    IsTriviallySerializable<decltype(__T__::deprecated_vector)>::value &&
    IsTriviallySerializable<decltype(__T__::float_to_double)>::value &&
    IsTriviallySerializable<decltype(__T__::deprecated_array)>::value &&
    IsTriviallySerializable<decltype(__T__::optional_long_to_string)>::value &&
    IsTriviallySerializable<decltype(__T__::deprecated_map)>::value &&
    IsTriviallySerializable<decltype(__T__::unchanged_record)>::value &&
    (sizeof(__T__) == (sizeof(__T__::deprecated_float) + sizeof(__T__::int_to_long) + sizeof(__T__::deprecated_vector) + sizeof(__T__::float_to_double) + sizeof(__T__::deprecated_array) + sizeof(__T__::optional_long_to_string) + sizeof(__T__::deprecated_map) + sizeof(__T__::unchanged_record))) &&
    offsetof(__T__, deprecated_float) < offsetof(__T__, int_to_long) && offsetof(__T__, int_to_long) < offsetof(__T__, deprecated_vector) && offsetof(__T__, deprecated_vector) < offsetof(__T__, float_to_double) && offsetof(__T__, float_to_double) < offsetof(__T__, deprecated_array) && offsetof(__T__, deprecated_array) < offsetof(__T__, optional_long_to_string) && offsetof(__T__, optional_long_to_string) < offsetof(__T__, deprecated_map) && offsetof(__T__, deprecated_map) < offsetof(__T__, unchanged_record);
};

template <>
struct IsTriviallySerializable<evo_test::RenamedRecord> {
  using __T__ = evo_test::RenamedRecord;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::i)>::value &&
    IsTriviallySerializable<decltype(__T__::s)>::value &&
    (sizeof(__T__) == (sizeof(__T__::i) + sizeof(__T__::s))) &&
    offsetof(__T__, i) < offsetof(__T__, s);
};

template <>
struct IsTriviallySerializable<evo_test::RC> {
  using __T__ = evo_test::RC;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::subject)>::value &&
    (sizeof(__T__) == (sizeof(__T__::subject)));
};

template <>
struct IsTriviallySerializable<evo_test::UnusedButChangedRecord> {
  using __T__ = evo_test::UnusedButChangedRecord;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::name)>::value &&
    IsTriviallySerializable<decltype(__T__::age)>::value &&
    (sizeof(__T__) == (sizeof(__T__::name) + sizeof(__T__::age))) &&
    offsetof(__T__, name) < offsetof(__T__, age);
};

template <typename T1, typename T2>
struct IsTriviallySerializable<evo_test::GenericRecord<T1, T2>> {
  using __T__ = evo_test::GenericRecord<T1, T2>;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::removed)>::value &&
    IsTriviallySerializable<decltype(__T__::field_1)>::value &&
    IsTriviallySerializable<decltype(__T__::field_2)>::value &&
    (sizeof(__T__) == (sizeof(__T__::removed) + sizeof(__T__::field_1) + sizeof(__T__::field_2))) &&
    offsetof(__T__, removed) < offsetof(__T__, field_1) && offsetof(__T__, field_1) < offsetof(__T__, field_2);
};

template <typename T>
struct IsTriviallySerializable<evo_test::GenericParentRecord<T>> {
  using __T__ = evo_test::GenericParentRecord<T>;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::record)>::value &&
    IsTriviallySerializable<decltype(__T__::record_of_union)>::value &&
    IsTriviallySerializable<decltype(__T__::union_of_record)>::value &&
    (sizeof(__T__) == (sizeof(__T__::record) + sizeof(__T__::record_of_union) + sizeof(__T__::union_of_record))) &&
    offsetof(__T__, record) < offsetof(__T__, record_of_union) && offsetof(__T__, record_of_union) < offsetof(__T__, union_of_record);
};

template <typename T2>
struct IsTriviallySerializable<evo_test::UnchangedGeneric<T2>> {
  using __T__ = evo_test::UnchangedGeneric<T2>;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::field)>::value &&
    (sizeof(__T__) == (sizeof(__T__::field)));
};

template <typename Y, typename Z>
struct IsTriviallySerializable<evo_test::ChangedGeneric<Y, Z>> {
  using __T__ = evo_test::ChangedGeneric<Y, Z>;
  static constexpr bool value = 
    std::is_standard_layout_v<__T__> &&
    IsTriviallySerializable<decltype(__T__::y)>::value &&
    IsTriviallySerializable<decltype(__T__::z)>::value &&
    (sizeof(__T__) == (sizeof(__T__::y) + sizeof(__T__::z))) &&
    offsetof(__T__, y) < offsetof(__T__, z);
};

#ifndef _MSC_VER
#pragma GCC diagnostic pop // #pragma GCC diagnostic ignored "-Winvalid-offsetof" 
#endif
} //namespace yardl::binary 

namespace {
template<typename T0, yardl::binary::Writer<T0> WriteT0, typename T1, yardl::binary::Writer<T1> WriteT1>
void WriteUnion(yardl::binary::CodedOutputStream& stream, std::variant<T0, T1> const& value) {
  yardl::binary::WriteInteger(stream, value.index());
  switch (value.index()) {
  case 0: {
    T0 const& v = std::get<0>(value);
    WriteT0(stream, v);
    break;
  }
  case 1: {
    T1 const& v = std::get<1>(value);
    WriteT1(stream, v);
    break;
  }
  default: throw std::runtime_error("Invalid union index.");
  }
}

template<typename T0, yardl::binary::Reader<T0> ReadT0, typename T1, yardl::binary::Reader<T1> ReadT1>
void ReadUnion(yardl::binary::CodedInputStream& stream, std::variant<T0, T1>& value) {
  size_t index;
  yardl::binary::ReadInteger(stream, index);
  switch (index) {
    case 0: {
      T0 v;
      ReadT0(stream, v);
      value = std::move(v);
      break;
    }
    case 1: {
      T1 v;
      ReadT1(stream, v);
      value = std::move(v);
      break;
    }
    default: throw std::runtime_error("Invalid union index.");
  }
}

template<typename T0, yardl::binary::Writer<T0> WriteT0, typename T1, yardl::binary::Writer<T1> WriteT1, typename T2, yardl::binary::Writer<T2> WriteT2, typename T3, yardl::binary::Writer<T3> WriteT3>
void WriteUnion(yardl::binary::CodedOutputStream& stream, std::variant<T0, T1, T2, T3> const& value) {
  yardl::binary::WriteInteger(stream, value.index());
  switch (value.index()) {
  case 0: {
    T0 const& v = std::get<0>(value);
    WriteT0(stream, v);
    break;
  }
  case 1: {
    T1 const& v = std::get<1>(value);
    WriteT1(stream, v);
    break;
  }
  case 2: {
    T2 const& v = std::get<2>(value);
    WriteT2(stream, v);
    break;
  }
  case 3: {
    T3 const& v = std::get<3>(value);
    WriteT3(stream, v);
    break;
  }
  default: throw std::runtime_error("Invalid union index.");
  }
}

template<typename T0, yardl::binary::Reader<T0> ReadT0, typename T1, yardl::binary::Reader<T1> ReadT1, typename T2, yardl::binary::Reader<T2> ReadT2, typename T3, yardl::binary::Reader<T3> ReadT3>
void ReadUnion(yardl::binary::CodedInputStream& stream, std::variant<T0, T1, T2, T3>& value) {
  size_t index;
  yardl::binary::ReadInteger(stream, index);
  switch (index) {
    case 0: {
      T0 v;
      ReadT0(stream, v);
      value = std::move(v);
      break;
    }
    case 1: {
      T1 v;
      ReadT1(stream, v);
      value = std::move(v);
      break;
    }
    case 2: {
      T2 v;
      ReadT2(stream, v);
      value = std::move(v);
      break;
    }
    case 3: {
      T3 v;
      ReadT3(stream, v);
      value = std::move(v);
      break;
    }
    default: throw std::runtime_error("Invalid union index.");
  }
}
} // namespace

namespace evo_test::binary {
namespace {
[[maybe_unused]] void WriteAliasedLongToString(yardl::binary::CodedOutputStream& stream, evo_test::AliasedLongToString const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedLongToString>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteInteger(stream, value);
}

[[maybe_unused]] void ReadAliasedLongToString(yardl::binary::CodedInputStream& stream, evo_test::AliasedLongToString& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedLongToString>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadInteger(stream, value);
}

[[maybe_unused]] void WriteUnchangedRecord(yardl::binary::CodedOutputStream& stream, evo_test::UnchangedRecord const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::UnchangedRecord>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteString(stream, value.name);
  yardl::binary::WriteInteger(stream, value.age);
  yardl::binary::WriteMap<std::string, double, yardl::binary::WriteString, yardl::binary::WriteFloatingPoint>(stream, value.meta);
}

[[maybe_unused]] void ReadUnchangedRecord(yardl::binary::CodedInputStream& stream, evo_test::UnchangedRecord& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::UnchangedRecord>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadString(stream, value.name);
  yardl::binary::ReadInteger(stream, value.age);
  yardl::binary::ReadMap<std::string, double, yardl::binary::ReadString, yardl::binary::ReadFloatingPoint>(stream, value.meta);
}

[[maybe_unused]] void WriteRecordWithChanges(yardl::binary::CodedOutputStream& stream, evo_test::RecordWithChanges const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RecordWithChanges>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteFloatingPoint(stream, value.deprecated_float);
  yardl::binary::WriteInteger(stream, value.int_to_long);
  yardl::binary::WriteVector<int32_t, yardl::binary::WriteInteger>(stream, value.deprecated_vector);
  yardl::binary::WriteFloatingPoint(stream, value.float_to_double);
  yardl::binary::WriteFixedNDArray<uint8_t, yardl::binary::WriteInteger, 7>(stream, value.deprecated_array);
  yardl::binary::WriteOptional<int64_t, yardl::binary::WriteInteger>(stream, value.optional_long_to_string);
  yardl::binary::WriteMap<std::string, std::vector<int32_t>, yardl::binary::WriteString, yardl::binary::WriteVector<int32_t, yardl::binary::WriteInteger>>(stream, value.deprecated_map);
  evo_test::binary::WriteUnchangedRecord(stream, value.unchanged_record);
}

[[maybe_unused]] void ReadRecordWithChanges(yardl::binary::CodedInputStream& stream, evo_test::RecordWithChanges& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RecordWithChanges>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadFloatingPoint(stream, value.deprecated_float);
  yardl::binary::ReadInteger(stream, value.int_to_long);
  yardl::binary::ReadVector<int32_t, yardl::binary::ReadInteger>(stream, value.deprecated_vector);
  yardl::binary::ReadFloatingPoint(stream, value.float_to_double);
  yardl::binary::ReadFixedNDArray<uint8_t, yardl::binary::ReadInteger, 7>(stream, value.deprecated_array);
  yardl::binary::ReadOptional<int64_t, yardl::binary::ReadInteger>(stream, value.optional_long_to_string);
  yardl::binary::ReadMap<std::string, std::vector<int32_t>, yardl::binary::ReadString, yardl::binary::ReadVector<int32_t, yardl::binary::ReadInteger>>(stream, value.deprecated_map);
  evo_test::binary::ReadUnchangedRecord(stream, value.unchanged_record);
}

[[maybe_unused]] void WriteAliasedRecordWithChanges(yardl::binary::CodedOutputStream& stream, evo_test::AliasedRecordWithChanges const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedRecordWithChanges>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteRecordWithChanges(stream, value);
}

[[maybe_unused]] void ReadAliasedRecordWithChanges(yardl::binary::CodedInputStream& stream, evo_test::AliasedRecordWithChanges& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedRecordWithChanges>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadRecordWithChanges(stream, value);
}

[[maybe_unused]] void WriteRenamedRecord(yardl::binary::CodedOutputStream& stream, evo_test::RenamedRecord const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RenamedRecord>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteInteger(stream, value.i);
  yardl::binary::WriteString(stream, value.s);
}

[[maybe_unused]] void ReadRenamedRecord(yardl::binary::CodedInputStream& stream, evo_test::RenamedRecord& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RenamedRecord>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadInteger(stream, value.i);
  yardl::binary::ReadString(stream, value.s);
}

[[maybe_unused]] void WriteStreamItem(yardl::binary::CodedOutputStream& stream, evo_test::StreamItem const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::StreamItem>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteRecordWithChanges(stream, value);
}

[[maybe_unused]] void ReadStreamItem(yardl::binary::CodedInputStream& stream, evo_test::StreamItem& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::StreamItem>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadRecordWithChanges(stream, value);
}

[[maybe_unused]] void WriteRC(yardl::binary::CodedOutputStream& stream, evo_test::RC const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RC>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteString(stream, value.subject);
}

[[maybe_unused]] void ReadRC(yardl::binary::CodedInputStream& stream, evo_test::RC& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RC>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadString(stream, value.subject);
}

[[maybe_unused]] void WriteRB(yardl::binary::CodedOutputStream& stream, evo_test::RB const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RB>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteRC(stream, value);
}

[[maybe_unused]] void ReadRB(yardl::binary::CodedInputStream& stream, evo_test::RB& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RB>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadRC(stream, value);
}

[[maybe_unused]] void WriteRA(yardl::binary::CodedOutputStream& stream, evo_test::RA const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RA>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteRB(stream, value);
}

[[maybe_unused]] void ReadRA(yardl::binary::CodedInputStream& stream, evo_test::RA& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RA>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadRB(stream, value);
}

[[maybe_unused]] void WriteRLink(yardl::binary::CodedOutputStream& stream, evo_test::RLink const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RLink>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteRA(stream, value);
}

[[maybe_unused]] void ReadRLink(yardl::binary::CodedInputStream& stream, evo_test::RLink& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::RLink>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadRA(stream, value);
}

[[maybe_unused]] void WriteUnusedButChangedRecord(yardl::binary::CodedOutputStream& stream, evo_test::UnusedButChangedRecord const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::UnusedButChangedRecord>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteString(stream, value.name);
  yardl::binary::WriteInteger(stream, value.age);
}

[[maybe_unused]] void ReadUnusedButChangedRecord(yardl::binary::CodedInputStream& stream, evo_test::UnusedButChangedRecord& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::UnusedButChangedRecord>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadString(stream, value.name);
  yardl::binary::ReadInteger(stream, value.age);
}

template<typename T1, yardl::binary::Writer<T1> WriteT1, typename T2, yardl::binary::Writer<T2> WriteT2>
[[maybe_unused]] void WriteGenericRecord(yardl::binary::CodedOutputStream& stream, evo_test::GenericRecord<T1, T2> const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::GenericRecord<T1, T2>>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::WriteOptional<bool, yardl::binary::WriteInteger>(stream, value.removed);
  WriteT1(stream, value.field_1);
  WriteT2(stream, value.field_2);
}

template<typename T1, yardl::binary::Reader<T1> ReadT1, typename T2, yardl::binary::Reader<T2> ReadT2>
[[maybe_unused]] void ReadGenericRecord(yardl::binary::CodedInputStream& stream, evo_test::GenericRecord<T1, T2>& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::GenericRecord<T1, T2>>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  yardl::binary::ReadOptional<bool, yardl::binary::ReadInteger>(stream, value.removed);
  ReadT1(stream, value.field_1);
  ReadT2(stream, value.field_2);
}

template<typename T1, yardl::binary::Writer<T1> WriteT1, typename T2, yardl::binary::Writer<T2> WriteT2>
[[maybe_unused]] void WriteGenericUnion(yardl::binary::CodedOutputStream& stream, evo_test::GenericUnion<T1, T2> const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::GenericUnion<T1, T2>>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  WriteUnion<T1, WriteT1, T2, WriteT2>(stream, value);
}

template<typename T1, yardl::binary::Reader<T1> ReadT1, typename T2, yardl::binary::Reader<T2> ReadT2>
[[maybe_unused]] void ReadGenericUnion(yardl::binary::CodedInputStream& stream, evo_test::GenericUnion<T1, T2>& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::GenericUnion<T1, T2>>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  ReadUnion<T1, ReadT1, T2, ReadT2>(stream, value);
}

template<typename T, yardl::binary::Writer<T> WriteT>
[[maybe_unused]] void WriteGenericParentRecord(yardl::binary::CodedOutputStream& stream, evo_test::GenericParentRecord<T> const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::GenericParentRecord<T>>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteGenericRecord<T, WriteT, std::string, yardl::binary::WriteString>(stream, value.record);
  evo_test::binary::WriteGenericRecord<evo_test::GenericUnion<T, float>, evo_test::binary::WriteGenericUnion<T, WriteT, float, yardl::binary::WriteFloatingPoint>, std::string, yardl::binary::WriteString>(stream, value.record_of_union);
  evo_test::binary::WriteGenericUnion<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>, float, yardl::binary::WriteFloatingPoint>(stream, value.union_of_record);
}

template<typename T, yardl::binary::Reader<T> ReadT>
[[maybe_unused]] void ReadGenericParentRecord(yardl::binary::CodedInputStream& stream, evo_test::GenericParentRecord<T>& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::GenericParentRecord<T>>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadGenericRecord<T, ReadT, std::string, yardl::binary::ReadString>(stream, value.record);
  evo_test::binary::ReadGenericRecord<evo_test::GenericUnion<T, float>, evo_test::binary::ReadGenericUnion<T, ReadT, float, yardl::binary::ReadFloatingPoint>, std::string, yardl::binary::ReadString>(stream, value.record_of_union);
  evo_test::binary::ReadGenericUnion<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>, float, yardl::binary::ReadFloatingPoint>(stream, value.union_of_record);
}

template<typename T, yardl::binary::Writer<T> WriteT>
[[maybe_unused]] void WriteAliasedHalfClosedGenericUnion(yardl::binary::CodedOutputStream& stream, evo_test::AliasedHalfClosedGenericUnion<T> const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedHalfClosedGenericUnion<T>>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteGenericUnion<T, WriteT, float, yardl::binary::WriteFloatingPoint>(stream, value);
}

template<typename T, yardl::binary::Reader<T> ReadT>
[[maybe_unused]] void ReadAliasedHalfClosedGenericUnion(yardl::binary::CodedInputStream& stream, evo_test::AliasedHalfClosedGenericUnion<T>& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedHalfClosedGenericUnion<T>>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadGenericUnion<T, ReadT, float, yardl::binary::ReadFloatingPoint>(stream, value);
}

[[maybe_unused]] void WriteAliasedClosedGenericUnion(yardl::binary::CodedOutputStream& stream, evo_test::AliasedClosedGenericUnion const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedClosedGenericUnion>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteAliasedHalfClosedGenericUnion<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>>(stream, value);
}

[[maybe_unused]] void ReadAliasedClosedGenericUnion(yardl::binary::CodedInputStream& stream, evo_test::AliasedClosedGenericUnion& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedClosedGenericUnion>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadAliasedHalfClosedGenericUnion<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream, value);
}

template<typename T, yardl::binary::Writer<T> WriteT>
[[maybe_unused]] void WriteAliasedHalfClosedGenericRecord(yardl::binary::CodedOutputStream& stream, evo_test::AliasedHalfClosedGenericRecord<T> const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedHalfClosedGenericRecord<T>>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteGenericRecord<T, WriteT, std::string, yardl::binary::WriteString>(stream, value);
}

template<typename T, yardl::binary::Reader<T> ReadT>
[[maybe_unused]] void ReadAliasedHalfClosedGenericRecord(yardl::binary::CodedInputStream& stream, evo_test::AliasedHalfClosedGenericRecord<T>& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedHalfClosedGenericRecord<T>>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadGenericRecord<T, ReadT, std::string, yardl::binary::ReadString>(stream, value);
}

[[maybe_unused]] void WriteAliasedClosedGenericRecord(yardl::binary::CodedOutputStream& stream, evo_test::AliasedClosedGenericRecord const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedClosedGenericRecord>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::WriteAliasedHalfClosedGenericRecord<int32_t, yardl::binary::WriteInteger>(stream, value);
}

[[maybe_unused]] void ReadAliasedClosedGenericRecord(yardl::binary::CodedInputStream& stream, evo_test::AliasedClosedGenericRecord& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::AliasedClosedGenericRecord>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  evo_test::binary::ReadAliasedHalfClosedGenericRecord<int32_t, yardl::binary::ReadInteger>(stream, value);
}

template<typename T2, yardl::binary::Writer<T2> WriteT2>
[[maybe_unused]] void WriteUnchangedGeneric(yardl::binary::CodedOutputStream& stream, evo_test::UnchangedGeneric<T2> const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::UnchangedGeneric<T2>>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  WriteT2(stream, value.field);
}

template<typename T2, yardl::binary::Reader<T2> ReadT2>
[[maybe_unused]] void ReadUnchangedGeneric(yardl::binary::CodedInputStream& stream, evo_test::UnchangedGeneric<T2>& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::UnchangedGeneric<T2>>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  ReadT2(stream, value.field);
}

template<typename Y, yardl::binary::Writer<Y> WriteY, typename Z, yardl::binary::Writer<Z> WriteZ>
[[maybe_unused]] void WriteChangedGeneric(yardl::binary::CodedOutputStream& stream, evo_test::ChangedGeneric<Y, Z> const& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::ChangedGeneric<Y, Z>>::value) {
    yardl::binary::WriteTriviallySerializable(stream, value);
    return;
  }

  WriteY(stream, value.y);
  evo_test::binary::WriteUnchangedGeneric<Z, WriteZ>(stream, value.z);
}

template<typename Y, yardl::binary::Reader<Y> ReadY, typename Z, yardl::binary::Reader<Z> ReadZ>
[[maybe_unused]] void ReadChangedGeneric(yardl::binary::CodedInputStream& stream, evo_test::ChangedGeneric<Y, Z>& value) {
  if constexpr (yardl::binary::IsTriviallySerializable<evo_test::ChangedGeneric<Y, Z>>::value) {
    yardl::binary::ReadTriviallySerializable(stream, value);
    return;
  }

  ReadY(stream, value.y);
  evo_test::binary::ReadUnchangedGeneric<Z, ReadZ>(stream, value.z);
}

} // namespace

void ProtocolWithChangesWriter::WriteInt8ToIntImpl(int8_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteInt8ToLongImpl(int8_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteInt8ToUintImpl(int8_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteInt8ToUlongImpl(int8_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteInt8ToFloatImpl(int8_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteInt8ToDoubleImpl(int8_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntToUintImpl(int32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntToLongImpl(int32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntToFloatImpl(int32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntToDoubleImpl(int32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteUintToUlongImpl(uint32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteUintToFloatImpl(uint32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteUintToDoubleImpl(uint32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteFloatToDoubleImpl(float const& value) {
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesWriter::WriteComplexFloatToComplexDoubleImpl(std::complex<float> const& value) {
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntToStringImpl(int32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteUintToStringImpl(uint32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteLongToStringImpl(int64_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteUlongToStringImpl(uint64_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteFloatToStringImpl(float const& value) {
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesWriter::WriteDoubleToStringImpl(double const& value) {
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntToOptionalImpl(int32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteFloatToOptionalImpl(float const& value) {
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesWriter::WriteStringToOptionalImpl(std::string const& value) {
  yardl::binary::WriteString(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntToUnionImpl(int32_t const& value) {
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesWriter::WriteFloatToUnionImpl(float const& value) {
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesWriter::WriteStringToUnionImpl(std::string const& value) {
  yardl::binary::WriteString(stream_, value);
}

void ProtocolWithChangesWriter::WriteOptionalIntToFloatImpl(std::optional<int32_t> const& value) {
  yardl::binary::WriteOptional<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesWriter::WriteOptionalFloatToStringImpl(std::optional<float> const& value) {
  yardl::binary::WriteOptional<float, yardl::binary::WriteFloatingPoint>(stream_, value);
}

void ProtocolWithChangesWriter::WriteAliasedLongToStringImpl(evo_test::AliasedLongToString const& value) {
  evo_test::binary::WriteAliasedLongToString(stream_, value);
}

void ProtocolWithChangesWriter::WriteStringToAliasedStringImpl(std::string const& value) {
  yardl::binary::WriteString(stream_, value);
}

void ProtocolWithChangesWriter::WriteStringToAliasedIntImpl(std::string const& value) {
  yardl::binary::WriteString(stream_, value);
}

void ProtocolWithChangesWriter::WriteEnumToAliasedEnumImpl(evo_test::GrowingEnum const& value) {
  yardl::binary::WriteEnum<evo_test::GrowingEnum>(stream_, value);
}

void ProtocolWithChangesWriter::WriteOptionalIntToUnionImpl(std::optional<int32_t> const& value) {
  yardl::binary::WriteOptional<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesWriter::WriteOptionalRecordToUnionImpl(std::optional<evo_test::RecordWithChanges> const& value) {
  yardl::binary::WriteOptional<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordWithChangesImpl(evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteAliasedRecordWithChangesImpl(evo_test::AliasedRecordWithChanges const& value) {
  evo_test::binary::WriteAliasedRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordToRenamedRecordImpl(evo_test::RenamedRecord const& value) {
  evo_test::binary::WriteRenamedRecord(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordToAliasedRecordImpl(evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordToAliasedAliasImpl(evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteStreamIntToStringToFloatImpl(int32_t const& value) {
  yardl::binary::WriteBlock<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesWriter::WriteStreamIntToStringToFloatImpl(std::vector<int32_t> const& values) {
  if (!values.empty()) {
    yardl::binary::WriteVector<int32_t, yardl::binary::WriteInteger>(stream_, values);
  }
}

void ProtocolWithChangesWriter::EndStreamIntToStringToFloatImpl() {
  yardl::binary::WriteInteger(stream_, 0U);
}

void ProtocolWithChangesWriter::WriteVectorIntToStringToFloatImpl(std::vector<int32_t> const& value) {
  yardl::binary::WriteVector<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesWriter::WriteIntFloatUnionReorderedImpl(std::variant<int32_t, float> const& value) {
  WriteUnion<int32_t, yardl::binary::WriteInteger, float, yardl::binary::WriteFloatingPoint>(stream_, value);
}

void ProtocolWithChangesWriter::WriteVectorUnionReorderedImpl(std::vector<std::variant<int32_t, float>> const& value) {
  yardl::binary::WriteVector<std::variant<int32_t, float>, WriteUnion<int32_t, yardl::binary::WriteInteger, float, yardl::binary::WriteFloatingPoint>>(stream_, value);
}

void ProtocolWithChangesWriter::WriteStreamUnionReorderedImpl(std::variant<int32_t, std::string> const& value) {
  yardl::binary::WriteBlock<std::variant<int32_t, std::string>, WriteUnion<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>>(stream_, value);
}

void ProtocolWithChangesWriter::WriteStreamUnionReorderedImpl(std::vector<std::variant<int32_t, std::string>> const& values) {
  if (!values.empty()) {
    yardl::binary::WriteVector<std::variant<int32_t, std::string>, WriteUnion<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>>(stream_, values);
  }
}

void ProtocolWithChangesWriter::EndStreamUnionReorderedImpl() {
  yardl::binary::WriteInteger(stream_, 0U);
}

void ProtocolWithChangesWriter::WriteStreamOfAliasTypeChangeImpl(evo_test::StreamItem const& value) {
  yardl::binary::WriteBlock<evo_test::StreamItem, evo_test::binary::WriteStreamItem>(stream_, value);
}

void ProtocolWithChangesWriter::WriteStreamOfAliasTypeChangeImpl(std::vector<evo_test::StreamItem> const& values) {
  if (!values.empty()) {
    yardl::binary::WriteVector<evo_test::StreamItem, evo_test::binary::WriteStreamItem>(stream_, values);
  }
}

void ProtocolWithChangesWriter::EndStreamOfAliasTypeChangeImpl() {
  yardl::binary::WriteInteger(stream_, 0U);
}

void ProtocolWithChangesWriter::WriteRlinkImpl(evo_test::RLink const& value) {
  evo_test::binary::WriteRLink(stream_, value);
}

void ProtocolWithChangesWriter::WriteRlinkRXImpl(evo_test::RLink const& value) {
  evo_test::binary::WriteRLink(stream_, value);
}

void ProtocolWithChangesWriter::WriteRlinkRYImpl(evo_test::RLink const& value) {
  evo_test::binary::WriteRLink(stream_, value);
}

void ProtocolWithChangesWriter::WriteRlinkRZImpl(evo_test::RLink const& value) {
  evo_test::binary::WriteRLink(stream_, value);
}

void ProtocolWithChangesWriter::WriteRaRLinkImpl(evo_test::RA const& value) {
  evo_test::binary::WriteRA(stream_, value);
}

void ProtocolWithChangesWriter::WriteRaRXImpl(evo_test::RA const& value) {
  evo_test::binary::WriteRA(stream_, value);
}

void ProtocolWithChangesWriter::WriteRaRYImpl(evo_test::RA const& value) {
  evo_test::binary::WriteRA(stream_, value);
}

void ProtocolWithChangesWriter::WriteRaRZImpl(evo_test::RA const& value) {
  evo_test::binary::WriteRA(stream_, value);
}

void ProtocolWithChangesWriter::WriteRbRLinkImpl(evo_test::RB const& value) {
  evo_test::binary::WriteRB(stream_, value);
}

void ProtocolWithChangesWriter::WriteRbRXImpl(evo_test::RB const& value) {
  evo_test::binary::WriteRB(stream_, value);
}

void ProtocolWithChangesWriter::WriteRbRYImpl(evo_test::RB const& value) {
  evo_test::binary::WriteRB(stream_, value);
}

void ProtocolWithChangesWriter::WriteRbRZImpl(evo_test::RB const& value) {
  evo_test::binary::WriteRB(stream_, value);
}

void ProtocolWithChangesWriter::WriteRcRLinkImpl(evo_test::RC const& value) {
  evo_test::binary::WriteRC(stream_, value);
}

void ProtocolWithChangesWriter::WriteRcRXImpl(evo_test::RC const& value) {
  evo_test::binary::WriteRC(stream_, value);
}

void ProtocolWithChangesWriter::WriteRcRYImpl(evo_test::RC const& value) {
  evo_test::binary::WriteRC(stream_, value);
}

void ProtocolWithChangesWriter::WriteRcRZImpl(evo_test::RC const& value) {
  evo_test::binary::WriteRC(stream_, value);
}

void ProtocolWithChangesWriter::WriteRlinkRNewImpl(evo_test::RLink const& value) {
  evo_test::binary::WriteRLink(stream_, value);
}

void ProtocolWithChangesWriter::WriteRaRNewImpl(evo_test::RA const& value) {
  evo_test::binary::WriteRA(stream_, value);
}

void ProtocolWithChangesWriter::WriteRbRNewImpl(evo_test::RB const& value) {
  evo_test::binary::WriteRB(stream_, value);
}

void ProtocolWithChangesWriter::WriteRcRNewImpl(evo_test::RC const& value) {
  evo_test::binary::WriteRC(stream_, value);
}

void ProtocolWithChangesWriter::WriteRlinkRUnionImpl(evo_test::RLink const& value) {
  evo_test::binary::WriteRLink(stream_, value);
}

void ProtocolWithChangesWriter::WriteRaRUnionImpl(evo_test::RA const& value) {
  evo_test::binary::WriteRA(stream_, value);
}

void ProtocolWithChangesWriter::WriteRbRUnionImpl(evo_test::RB const& value) {
  evo_test::binary::WriteRB(stream_, value);
}

void ProtocolWithChangesWriter::WriteRcRUnionImpl(evo_test::RC const& value) {
  evo_test::binary::WriteRC(stream_, value);
}

void ProtocolWithChangesWriter::WriteOptionalRecordWithChangesImpl(std::optional<evo_test::RecordWithChanges> const& value) {
  yardl::binary::WriteOptional<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesWriter::WriteAliasedOptionalRecordWithChangesImpl(std::optional<evo_test::AliasedRecordWithChanges> const& value) {
  yardl::binary::WriteOptional<evo_test::AliasedRecordWithChanges, evo_test::binary::WriteAliasedRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesWriter::WriteUnionRecordWithChangesImpl(std::variant<evo_test::RecordWithChanges, int32_t> const& value) {
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesWriter::WriteUnionWithSameTypesetImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string> const& value) {
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger, float, yardl::binary::WriteFloatingPoint, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesWriter::WriteUnionWithTypesAddedImpl(std::variant<evo_test::RecordWithChanges, float> const& value) {
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, float, yardl::binary::WriteFloatingPoint>(stream_, value);
}

void ProtocolWithChangesWriter::WriteUnionWithTypesRemovedImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string> const& value) {
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger, float, yardl::binary::WriteFloatingPoint, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordToOptionalImpl(evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordToAliasedOptionalImpl(evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordToUnionImpl(evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteRecordToAliasedUnionImpl(evo_test::RecordWithChanges const& value) {
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesWriter::WriteUnionToAliasedUnionImpl(std::variant<evo_test::RecordWithChanges, int32_t> const& value) {
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesWriter::WriteUnionToAliasedUnionWithChangesImpl(std::variant<evo_test::RecordWithChanges, int32_t> const& value) {
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesWriter::WriteOptionalToAliasedOptionalImpl(std::optional<evo_test::RecordWithChanges> const& value) {
  yardl::binary::WriteOptional<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesWriter::WriteOptionalToAliasedOptionalWithChangesImpl(std::optional<int32_t> const& value) {
  yardl::binary::WriteOptional<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesWriter::WriteGenericRecordImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesWriter::WriteGenericRecordToOpenAliasImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesWriter::WriteGenericRecordToClosedAliasImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesWriter::WriteGenericRecordToHalfClosedAliasImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesWriter::WriteAliasedGenericRecordToAliasImpl(evo_test::AliasedHalfClosedGenericRecord<int32_t> const& value) {
  evo_test::binary::WriteAliasedHalfClosedGenericRecord<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesWriter::WriteGenericRecordToReversedImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesWriter::WriteClosedGenericRecordToUnionImpl(evo_test::AliasedClosedGenericRecord const& value) {
  evo_test::binary::WriteAliasedClosedGenericRecord(stream_, value);
}

void ProtocolWithChangesWriter::WriteGenericRecordToAliasedUnionImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesWriter::WriteGenericUnionToReversedImpl(evo_test::AliasedClosedGenericUnion const& value) {
  evo_test::binary::WriteAliasedClosedGenericUnion(stream_, value);
}

void ProtocolWithChangesWriter::WriteGenericUnionOfChangedRecordImpl(evo_test::AliasedClosedGenericUnion const& value) {
  evo_test::binary::WriteAliasedClosedGenericUnion(stream_, value);
}

void ProtocolWithChangesWriter::WriteGenericParentRecordImpl(evo_test::GenericParentRecord<int32_t> const& value) {
  evo_test::binary::WriteGenericParentRecord<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesWriter::WriteGenericNestedRecordsImpl(evo_test::GenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::ChangedGeneric<std::string, int32_t>> const& value) {
  evo_test::binary::WriteGenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::binary::WriteUnchangedGeneric<int32_t, yardl::binary::WriteInteger>, evo_test::ChangedGeneric<std::string, int32_t>, evo_test::binary::WriteChangedGeneric<std::string, yardl::binary::WriteString, int32_t, yardl::binary::WriteInteger>>(stream_, value);
}

void ProtocolWithChangesWriter::WriteGenericRecordStreamImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  yardl::binary::WriteBlock<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>>(stream_, value);
}

void ProtocolWithChangesWriter::WriteGenericRecordStreamImpl(std::vector<evo_test::GenericRecord<int32_t, std::string>> const& values) {
  if (!values.empty()) {
    yardl::binary::WriteVector<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>>(stream_, values);
  }
}

void ProtocolWithChangesWriter::EndGenericRecordStreamImpl() {
  yardl::binary::WriteInteger(stream_, 0U);
}

void ProtocolWithChangesWriter::WriteGenericParentRecordStreamImpl(evo_test::GenericParentRecord<int32_t> const& value) {
  yardl::binary::WriteBlock<evo_test::GenericParentRecord<int32_t>, evo_test::binary::WriteGenericParentRecord<int32_t, yardl::binary::WriteInteger>>(stream_, value);
}

void ProtocolWithChangesWriter::WriteGenericParentRecordStreamImpl(std::vector<evo_test::GenericParentRecord<int32_t>> const& values) {
  if (!values.empty()) {
    yardl::binary::WriteVector<evo_test::GenericParentRecord<int32_t>, evo_test::binary::WriteGenericParentRecord<int32_t, yardl::binary::WriteInteger>>(stream_, values);
  }
}

void ProtocolWithChangesWriter::EndGenericParentRecordStreamImpl() {
  yardl::binary::WriteInteger(stream_, 0U);
}

void ProtocolWithChangesWriter::WriteVectorRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges> const& value) {
  yardl::binary::WriteVector<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesWriter::WriteStreamedRecordWithChangesImpl(evo_test::RecordWithChanges const& value) {
  yardl::binary::WriteBlock<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesWriter::WriteStreamedRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges> const& values) {
  if (!values.empty()) {
    yardl::binary::WriteVector<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, values);
  }
}

void ProtocolWithChangesWriter::EndStreamedRecordWithChangesImpl() {
  yardl::binary::WriteInteger(stream_, 0U);
}

void ProtocolWithChangesWriter::Flush() {
  stream_.Flush();
}

void ProtocolWithChangesWriter::CloseImpl() {
  stream_.Flush();
}

void ProtocolWithChangesReader::ReadInt8ToIntImpl(int8_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadInt8ToLongImpl(int8_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadInt8ToUintImpl(int8_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadInt8ToUlongImpl(int8_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadInt8ToFloatImpl(int8_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadInt8ToDoubleImpl(int8_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadIntToUintImpl(int32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadIntToLongImpl(int32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadIntToFloatImpl(int32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadIntToDoubleImpl(int32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadUintToUlongImpl(uint32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadUintToFloatImpl(uint32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadUintToDoubleImpl(uint32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadFloatToDoubleImpl(float& value) {
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesReader::ReadComplexFloatToComplexDoubleImpl(std::complex<float>& value) {
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesReader::ReadIntToStringImpl(int32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadUintToStringImpl(uint32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadLongToStringImpl(int64_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadUlongToStringImpl(uint64_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadFloatToStringImpl(float& value) {
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesReader::ReadDoubleToStringImpl(double& value) {
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesReader::ReadIntToOptionalImpl(int32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadFloatToOptionalImpl(float& value) {
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesReader::ReadStringToOptionalImpl(std::string& value) {
  yardl::binary::ReadString(stream_, value);
}

void ProtocolWithChangesReader::ReadIntToUnionImpl(int32_t& value) {
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesReader::ReadFloatToUnionImpl(float& value) {
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesReader::ReadStringToUnionImpl(std::string& value) {
  yardl::binary::ReadString(stream_, value);
}

void ProtocolWithChangesReader::ReadOptionalIntToFloatImpl(std::optional<int32_t>& value) {
  yardl::binary::ReadOptional<int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesReader::ReadOptionalFloatToStringImpl(std::optional<float>& value) {
  yardl::binary::ReadOptional<float, yardl::binary::ReadFloatingPoint>(stream_, value);
}

void ProtocolWithChangesReader::ReadAliasedLongToStringImpl(evo_test::AliasedLongToString& value) {
  evo_test::binary::ReadAliasedLongToString(stream_, value);
}

void ProtocolWithChangesReader::ReadStringToAliasedStringImpl(std::string& value) {
  yardl::binary::ReadString(stream_, value);
}

void ProtocolWithChangesReader::ReadStringToAliasedIntImpl(std::string& value) {
  yardl::binary::ReadString(stream_, value);
}

void ProtocolWithChangesReader::ReadEnumToAliasedEnumImpl(evo_test::GrowingEnum& value) {
  yardl::binary::ReadEnum<evo_test::GrowingEnum>(stream_, value);
}

void ProtocolWithChangesReader::ReadOptionalIntToUnionImpl(std::optional<int32_t>& value) {
  yardl::binary::ReadOptional<int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesReader::ReadOptionalRecordToUnionImpl(std::optional<evo_test::RecordWithChanges>& value) {
  yardl::binary::ReadOptional<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordWithChangesImpl(evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadAliasedRecordWithChangesImpl(evo_test::AliasedRecordWithChanges& value) {
  evo_test::binary::ReadAliasedRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordToRenamedRecordImpl(evo_test::RenamedRecord& value) {
  evo_test::binary::ReadRenamedRecord(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordToAliasedRecordImpl(evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordToAliasedAliasImpl(evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

bool ProtocolWithChangesReader::ReadStreamIntToStringToFloatImpl(int32_t& value) {
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<int32_t, yardl::binary::ReadInteger>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesReader::ReadStreamIntToStringToFloatImpl(std::vector<int32_t>& values) {
  yardl::binary::ReadBlocksIntoVector<int32_t, yardl::binary::ReadInteger>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

void ProtocolWithChangesReader::ReadVectorIntToStringToFloatImpl(std::vector<int32_t>& value) {
  yardl::binary::ReadVector<int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesReader::ReadIntFloatUnionReorderedImpl(std::variant<int32_t, float>& value) {
  ReadUnion<int32_t, yardl::binary::ReadInteger, float, yardl::binary::ReadFloatingPoint>(stream_, value);
}

void ProtocolWithChangesReader::ReadVectorUnionReorderedImpl(std::vector<std::variant<int32_t, float>>& value) {
  yardl::binary::ReadVector<std::variant<int32_t, float>, ReadUnion<int32_t, yardl::binary::ReadInteger, float, yardl::binary::ReadFloatingPoint>>(stream_, value);
}

bool ProtocolWithChangesReader::ReadStreamUnionReorderedImpl(std::variant<int32_t, std::string>& value) {
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<std::variant<int32_t, std::string>, ReadUnion<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesReader::ReadStreamUnionReorderedImpl(std::vector<std::variant<int32_t, std::string>>& values) {
  yardl::binary::ReadBlocksIntoVector<std::variant<int32_t, std::string>, ReadUnion<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

bool ProtocolWithChangesReader::ReadStreamOfAliasTypeChangeImpl(evo_test::StreamItem& value) {
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::StreamItem, evo_test::binary::ReadStreamItem>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesReader::ReadStreamOfAliasTypeChangeImpl(std::vector<evo_test::StreamItem>& values) {
  yardl::binary::ReadBlocksIntoVector<evo_test::StreamItem, evo_test::binary::ReadStreamItem>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

void ProtocolWithChangesReader::ReadRlinkImpl(evo_test::RLink& value) {
  evo_test::binary::ReadRLink(stream_, value);
}

void ProtocolWithChangesReader::ReadRlinkRXImpl(evo_test::RLink& value) {
  evo_test::binary::ReadRLink(stream_, value);
}

void ProtocolWithChangesReader::ReadRlinkRYImpl(evo_test::RLink& value) {
  evo_test::binary::ReadRLink(stream_, value);
}

void ProtocolWithChangesReader::ReadRlinkRZImpl(evo_test::RLink& value) {
  evo_test::binary::ReadRLink(stream_, value);
}

void ProtocolWithChangesReader::ReadRaRLinkImpl(evo_test::RA& value) {
  evo_test::binary::ReadRA(stream_, value);
}

void ProtocolWithChangesReader::ReadRaRXImpl(evo_test::RA& value) {
  evo_test::binary::ReadRA(stream_, value);
}

void ProtocolWithChangesReader::ReadRaRYImpl(evo_test::RA& value) {
  evo_test::binary::ReadRA(stream_, value);
}

void ProtocolWithChangesReader::ReadRaRZImpl(evo_test::RA& value) {
  evo_test::binary::ReadRA(stream_, value);
}

void ProtocolWithChangesReader::ReadRbRLinkImpl(evo_test::RB& value) {
  evo_test::binary::ReadRB(stream_, value);
}

void ProtocolWithChangesReader::ReadRbRXImpl(evo_test::RB& value) {
  evo_test::binary::ReadRB(stream_, value);
}

void ProtocolWithChangesReader::ReadRbRYImpl(evo_test::RB& value) {
  evo_test::binary::ReadRB(stream_, value);
}

void ProtocolWithChangesReader::ReadRbRZImpl(evo_test::RB& value) {
  evo_test::binary::ReadRB(stream_, value);
}

void ProtocolWithChangesReader::ReadRcRLinkImpl(evo_test::RC& value) {
  evo_test::binary::ReadRC(stream_, value);
}

void ProtocolWithChangesReader::ReadRcRXImpl(evo_test::RC& value) {
  evo_test::binary::ReadRC(stream_, value);
}

void ProtocolWithChangesReader::ReadRcRYImpl(evo_test::RC& value) {
  evo_test::binary::ReadRC(stream_, value);
}

void ProtocolWithChangesReader::ReadRcRZImpl(evo_test::RC& value) {
  evo_test::binary::ReadRC(stream_, value);
}

void ProtocolWithChangesReader::ReadRlinkRNewImpl(evo_test::RLink& value) {
  evo_test::binary::ReadRLink(stream_, value);
}

void ProtocolWithChangesReader::ReadRaRNewImpl(evo_test::RA& value) {
  evo_test::binary::ReadRA(stream_, value);
}

void ProtocolWithChangesReader::ReadRbRNewImpl(evo_test::RB& value) {
  evo_test::binary::ReadRB(stream_, value);
}

void ProtocolWithChangesReader::ReadRcRNewImpl(evo_test::RC& value) {
  evo_test::binary::ReadRC(stream_, value);
}

void ProtocolWithChangesReader::ReadRlinkRUnionImpl(evo_test::RLink& value) {
  evo_test::binary::ReadRLink(stream_, value);
}

void ProtocolWithChangesReader::ReadRaRUnionImpl(evo_test::RA& value) {
  evo_test::binary::ReadRA(stream_, value);
}

void ProtocolWithChangesReader::ReadRbRUnionImpl(evo_test::RB& value) {
  evo_test::binary::ReadRB(stream_, value);
}

void ProtocolWithChangesReader::ReadRcRUnionImpl(evo_test::RC& value) {
  evo_test::binary::ReadRC(stream_, value);
}

void ProtocolWithChangesReader::ReadOptionalRecordWithChangesImpl(std::optional<evo_test::RecordWithChanges>& value) {
  yardl::binary::ReadOptional<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesReader::ReadAliasedOptionalRecordWithChangesImpl(std::optional<evo_test::AliasedRecordWithChanges>& value) {
  yardl::binary::ReadOptional<evo_test::AliasedRecordWithChanges, evo_test::binary::ReadAliasedRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesReader::ReadUnionRecordWithChangesImpl(std::variant<evo_test::RecordWithChanges, int32_t>& value) {
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesReader::ReadUnionWithSameTypesetImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string>& value) {
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger, float, yardl::binary::ReadFloatingPoint, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesReader::ReadUnionWithTypesAddedImpl(std::variant<evo_test::RecordWithChanges, float>& value) {
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, float, yardl::binary::ReadFloatingPoint>(stream_, value);
}

void ProtocolWithChangesReader::ReadUnionWithTypesRemovedImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string>& value) {
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger, float, yardl::binary::ReadFloatingPoint, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordToOptionalImpl(evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordToAliasedOptionalImpl(evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordToUnionImpl(evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadRecordToAliasedUnionImpl(evo_test::RecordWithChanges& value) {
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesReader::ReadUnionToAliasedUnionImpl(std::variant<evo_test::RecordWithChanges, int32_t>& value) {
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesReader::ReadUnionToAliasedUnionWithChangesImpl(std::variant<evo_test::RecordWithChanges, int32_t>& value) {
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesReader::ReadOptionalToAliasedOptionalImpl(std::optional<evo_test::RecordWithChanges>& value) {
  yardl::binary::ReadOptional<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesReader::ReadOptionalToAliasedOptionalWithChangesImpl(std::optional<int32_t>& value) {
  yardl::binary::ReadOptional<int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesReader::ReadGenericRecordImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesReader::ReadGenericRecordToOpenAliasImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesReader::ReadGenericRecordToClosedAliasImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesReader::ReadGenericRecordToHalfClosedAliasImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesReader::ReadAliasedGenericRecordToAliasImpl(evo_test::AliasedHalfClosedGenericRecord<int32_t>& value) {
  evo_test::binary::ReadAliasedHalfClosedGenericRecord<int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesReader::ReadGenericRecordToReversedImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesReader::ReadClosedGenericRecordToUnionImpl(evo_test::AliasedClosedGenericRecord& value) {
  evo_test::binary::ReadAliasedClosedGenericRecord(stream_, value);
}

void ProtocolWithChangesReader::ReadGenericRecordToAliasedUnionImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesReader::ReadGenericUnionToReversedImpl(evo_test::AliasedClosedGenericUnion& value) {
  evo_test::binary::ReadAliasedClosedGenericUnion(stream_, value);
}

void ProtocolWithChangesReader::ReadGenericUnionOfChangedRecordImpl(evo_test::AliasedClosedGenericUnion& value) {
  evo_test::binary::ReadAliasedClosedGenericUnion(stream_, value);
}

void ProtocolWithChangesReader::ReadGenericParentRecordImpl(evo_test::GenericParentRecord<int32_t>& value) {
  evo_test::binary::ReadGenericParentRecord<int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesReader::ReadGenericNestedRecordsImpl(evo_test::GenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::ChangedGeneric<std::string, int32_t>>& value) {
  evo_test::binary::ReadGenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::binary::ReadUnchangedGeneric<int32_t, yardl::binary::ReadInteger>, evo_test::ChangedGeneric<std::string, int32_t>, evo_test::binary::ReadChangedGeneric<std::string, yardl::binary::ReadString, int32_t, yardl::binary::ReadInteger>>(stream_, value);
}

bool ProtocolWithChangesReader::ReadGenericRecordStreamImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesReader::ReadGenericRecordStreamImpl(std::vector<evo_test::GenericRecord<int32_t, std::string>>& values) {
  yardl::binary::ReadBlocksIntoVector<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

bool ProtocolWithChangesReader::ReadGenericParentRecordStreamImpl(evo_test::GenericParentRecord<int32_t>& value) {
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::GenericParentRecord<int32_t>, evo_test::binary::ReadGenericParentRecord<int32_t, yardl::binary::ReadInteger>>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesReader::ReadGenericParentRecordStreamImpl(std::vector<evo_test::GenericParentRecord<int32_t>>& values) {
  yardl::binary::ReadBlocksIntoVector<evo_test::GenericParentRecord<int32_t>, evo_test::binary::ReadGenericParentRecord<int32_t, yardl::binary::ReadInteger>>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

void ProtocolWithChangesReader::ReadVectorRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges>& value) {
  yardl::binary::ReadVector<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
}

bool ProtocolWithChangesReader::ReadStreamedRecordWithChangesImpl(evo_test::RecordWithChanges& value) {
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesReader::ReadStreamedRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges>& values) {
  yardl::binary::ReadBlocksIntoVector<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

void ProtocolWithChangesReader::CloseImpl() {
  stream_.VerifyFinished();
}

void ProtocolWithChangesIndexedWriter::WriteInt8ToIntImpl(int8_t const& value) {
  step_index_.set_step_offset("Int8ToInt", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteInt8ToLongImpl(int8_t const& value) {
  step_index_.set_step_offset("Int8ToLong", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteInt8ToUintImpl(int8_t const& value) {
  step_index_.set_step_offset("Int8ToUint", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteInt8ToUlongImpl(int8_t const& value) {
  step_index_.set_step_offset("Int8ToUlong", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteInt8ToFloatImpl(int8_t const& value) {
  step_index_.set_step_offset("Int8ToFloat", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteInt8ToDoubleImpl(int8_t const& value) {
  step_index_.set_step_offset("Int8ToDouble", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteIntToUintImpl(int32_t const& value) {
  step_index_.set_step_offset("IntToUint", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteIntToLongImpl(int32_t const& value) {
  step_index_.set_step_offset("IntToLong", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteIntToFloatImpl(int32_t const& value) {
  step_index_.set_step_offset("IntToFloat", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteIntToDoubleImpl(int32_t const& value) {
  step_index_.set_step_offset("IntToDouble", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteUintToUlongImpl(uint32_t const& value) {
  step_index_.set_step_offset("UintToUlong", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteUintToFloatImpl(uint32_t const& value) {
  step_index_.set_step_offset("UintToFloat", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteUintToDoubleImpl(uint32_t const& value) {
  step_index_.set_step_offset("UintToDouble", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteFloatToDoubleImpl(float const& value) {
  step_index_.set_step_offset("FloatToDouble", stream_.Pos());
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteComplexFloatToComplexDoubleImpl(std::complex<float> const& value) {
  step_index_.set_step_offset("ComplexFloatToComplexDouble", stream_.Pos());
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteIntToStringImpl(int32_t const& value) {
  step_index_.set_step_offset("IntToString", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteUintToStringImpl(uint32_t const& value) {
  step_index_.set_step_offset("UintToString", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteLongToStringImpl(int64_t const& value) {
  step_index_.set_step_offset("LongToString", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteUlongToStringImpl(uint64_t const& value) {
  step_index_.set_step_offset("UlongToString", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteFloatToStringImpl(float const& value) {
  step_index_.set_step_offset("FloatToString", stream_.Pos());
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteDoubleToStringImpl(double const& value) {
  step_index_.set_step_offset("DoubleToString", stream_.Pos());
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteIntToOptionalImpl(int32_t const& value) {
  step_index_.set_step_offset("IntToOptional", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteFloatToOptionalImpl(float const& value) {
  step_index_.set_step_offset("FloatToOptional", stream_.Pos());
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteStringToOptionalImpl(std::string const& value) {
  step_index_.set_step_offset("StringToOptional", stream_.Pos());
  yardl::binary::WriteString(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteIntToUnionImpl(int32_t const& value) {
  step_index_.set_step_offset("IntToUnion", stream_.Pos());
  yardl::binary::WriteInteger(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteFloatToUnionImpl(float const& value) {
  step_index_.set_step_offset("FloatToUnion", stream_.Pos());
  yardl::binary::WriteFloatingPoint(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteStringToUnionImpl(std::string const& value) {
  step_index_.set_step_offset("StringToUnion", stream_.Pos());
  yardl::binary::WriteString(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteOptionalIntToFloatImpl(std::optional<int32_t> const& value) {
  step_index_.set_step_offset("OptionalIntToFloat", stream_.Pos());
  yardl::binary::WriteOptional<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteOptionalFloatToStringImpl(std::optional<float> const& value) {
  step_index_.set_step_offset("OptionalFloatToString", stream_.Pos());
  yardl::binary::WriteOptional<float, yardl::binary::WriteFloatingPoint>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteAliasedLongToStringImpl(evo_test::AliasedLongToString const& value) {
  step_index_.set_step_offset("AliasedLongToString", stream_.Pos());
  evo_test::binary::WriteAliasedLongToString(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteStringToAliasedStringImpl(std::string const& value) {
  step_index_.set_step_offset("StringToAliasedString", stream_.Pos());
  yardl::binary::WriteString(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteStringToAliasedIntImpl(std::string const& value) {
  step_index_.set_step_offset("StringToAliasedInt", stream_.Pos());
  yardl::binary::WriteString(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteEnumToAliasedEnumImpl(evo_test::GrowingEnum const& value) {
  step_index_.set_step_offset("EnumToAliasedEnum", stream_.Pos());
  yardl::binary::WriteEnum<evo_test::GrowingEnum>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteOptionalIntToUnionImpl(std::optional<int32_t> const& value) {
  step_index_.set_step_offset("OptionalIntToUnion", stream_.Pos());
  yardl::binary::WriteOptional<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteOptionalRecordToUnionImpl(std::optional<evo_test::RecordWithChanges> const& value) {
  step_index_.set_step_offset("OptionalRecordToUnion", stream_.Pos());
  yardl::binary::WriteOptional<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRecordWithChangesImpl(evo_test::RecordWithChanges const& value) {
  step_index_.set_step_offset("RecordWithChanges", stream_.Pos());
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteAliasedRecordWithChangesImpl(evo_test::AliasedRecordWithChanges const& value) {
  step_index_.set_step_offset("AliasedRecordWithChanges", stream_.Pos());
  evo_test::binary::WriteAliasedRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRecordToRenamedRecordImpl(evo_test::RenamedRecord const& value) {
  step_index_.set_step_offset("RecordToRenamedRecord", stream_.Pos());
  evo_test::binary::WriteRenamedRecord(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRecordToAliasedRecordImpl(evo_test::RecordWithChanges const& value) {
  step_index_.set_step_offset("RecordToAliasedRecord", stream_.Pos());
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRecordToAliasedAliasImpl(evo_test::RecordWithChanges const& value) {
  step_index_.set_step_offset("RecordToAliasedAlias", stream_.Pos());
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteStreamIntToStringToFloatImpl(int32_t const& value) {
  step_index_.set_step_offset("StreamIntToStringToFloat", stream_.Pos());
  size_t item_offset = 0;
  yardl::binary::WriteBlockAndSaveOffset<int32_t, yardl::binary::WriteInteger>(stream_, value, item_offset);
  step_index_.add_stream_offset("StreamIntToStringToFloat", item_offset);
}

void ProtocolWithChangesIndexedWriter::WriteStreamIntToStringToFloatImpl(std::vector<int32_t> const& values) {
  step_index_.set_step_offset("StreamIntToStringToFloat", stream_.Pos());
  std::vector<size_t> item_offsets;
  item_offsets.reserve(values.size());
  if (!values.empty()) {
    yardl::binary::WriteVectorAndSaveOffsets<int32_t, yardl::binary::WriteInteger>(stream_, values, item_offsets);
  }
  step_index_.add_stream_offsets("StreamIntToStringToFloat", item_offsets);
}

void ProtocolWithChangesIndexedWriter::EndStreamIntToStringToFloatImpl() {
  step_index_.set_step_offset("StreamIntToStringToFloat", stream_.Pos());
  step_index_.add_stream_offsets("StreamIntToStringToFloat", std::vector<size_t>{});
  yardl::binary::WriteInteger(stream_, 0U);
}

void ProtocolWithChangesIndexedWriter::WriteVectorIntToStringToFloatImpl(std::vector<int32_t> const& value) {
  step_index_.set_step_offset("VectorIntToStringToFloat", stream_.Pos());
  yardl::binary::WriteVector<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteIntFloatUnionReorderedImpl(std::variant<int32_t, float> const& value) {
  step_index_.set_step_offset("IntFloatUnionReordered", stream_.Pos());
  WriteUnion<int32_t, yardl::binary::WriteInteger, float, yardl::binary::WriteFloatingPoint>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteVectorUnionReorderedImpl(std::vector<std::variant<int32_t, float>> const& value) {
  step_index_.set_step_offset("VectorUnionReordered", stream_.Pos());
  yardl::binary::WriteVector<std::variant<int32_t, float>, WriteUnion<int32_t, yardl::binary::WriteInteger, float, yardl::binary::WriteFloatingPoint>>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteStreamUnionReorderedImpl(std::variant<int32_t, std::string> const& value) {
  step_index_.set_step_offset("StreamUnionReordered", stream_.Pos());
  size_t item_offset = 0;
  yardl::binary::WriteBlockAndSaveOffset<std::variant<int32_t, std::string>, WriteUnion<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>>(stream_, value, item_offset);
  step_index_.add_stream_offset("StreamUnionReordered", item_offset);
}

void ProtocolWithChangesIndexedWriter::WriteStreamUnionReorderedImpl(std::vector<std::variant<int32_t, std::string>> const& values) {
  step_index_.set_step_offset("StreamUnionReordered", stream_.Pos());
  std::vector<size_t> item_offsets;
  item_offsets.reserve(values.size());
  if (!values.empty()) {
    yardl::binary::WriteVectorAndSaveOffsets<std::variant<int32_t, std::string>, WriteUnion<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>>(stream_, values, item_offsets);
  }
  step_index_.add_stream_offsets("StreamUnionReordered", item_offsets);
}

void ProtocolWithChangesIndexedWriter::EndStreamUnionReorderedImpl() {
  step_index_.set_step_offset("StreamUnionReordered", stream_.Pos());
  step_index_.add_stream_offsets("StreamUnionReordered", std::vector<size_t>{});
  yardl::binary::WriteInteger(stream_, 0U);
}

void ProtocolWithChangesIndexedWriter::WriteStreamOfAliasTypeChangeImpl(evo_test::StreamItem const& value) {
  step_index_.set_step_offset("StreamOfAliasTypeChange", stream_.Pos());
  size_t item_offset = 0;
  yardl::binary::WriteBlockAndSaveOffset<evo_test::StreamItem, evo_test::binary::WriteStreamItem>(stream_, value, item_offset);
  step_index_.add_stream_offset("StreamOfAliasTypeChange", item_offset);
}

void ProtocolWithChangesIndexedWriter::WriteStreamOfAliasTypeChangeImpl(std::vector<evo_test::StreamItem> const& values) {
  step_index_.set_step_offset("StreamOfAliasTypeChange", stream_.Pos());
  std::vector<size_t> item_offsets;
  item_offsets.reserve(values.size());
  if (!values.empty()) {
    yardl::binary::WriteVectorAndSaveOffsets<evo_test::StreamItem, evo_test::binary::WriteStreamItem>(stream_, values, item_offsets);
  }
  step_index_.add_stream_offsets("StreamOfAliasTypeChange", item_offsets);
}

void ProtocolWithChangesIndexedWriter::EndStreamOfAliasTypeChangeImpl() {
  step_index_.set_step_offset("StreamOfAliasTypeChange", stream_.Pos());
  step_index_.add_stream_offsets("StreamOfAliasTypeChange", std::vector<size_t>{});
  yardl::binary::WriteInteger(stream_, 0U);
}

void ProtocolWithChangesIndexedWriter::WriteRlinkImpl(evo_test::RLink const& value) {
  step_index_.set_step_offset("Rlink", stream_.Pos());
  evo_test::binary::WriteRLink(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRlinkRXImpl(evo_test::RLink const& value) {
  step_index_.set_step_offset("RlinkRX", stream_.Pos());
  evo_test::binary::WriteRLink(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRlinkRYImpl(evo_test::RLink const& value) {
  step_index_.set_step_offset("RlinkRY", stream_.Pos());
  evo_test::binary::WriteRLink(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRlinkRZImpl(evo_test::RLink const& value) {
  step_index_.set_step_offset("RlinkRZ", stream_.Pos());
  evo_test::binary::WriteRLink(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRaRLinkImpl(evo_test::RA const& value) {
  step_index_.set_step_offset("RaRLink", stream_.Pos());
  evo_test::binary::WriteRA(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRaRXImpl(evo_test::RA const& value) {
  step_index_.set_step_offset("RaRX", stream_.Pos());
  evo_test::binary::WriteRA(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRaRYImpl(evo_test::RA const& value) {
  step_index_.set_step_offset("RaRY", stream_.Pos());
  evo_test::binary::WriteRA(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRaRZImpl(evo_test::RA const& value) {
  step_index_.set_step_offset("RaRZ", stream_.Pos());
  evo_test::binary::WriteRA(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRbRLinkImpl(evo_test::RB const& value) {
  step_index_.set_step_offset("RbRLink", stream_.Pos());
  evo_test::binary::WriteRB(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRbRXImpl(evo_test::RB const& value) {
  step_index_.set_step_offset("RbRX", stream_.Pos());
  evo_test::binary::WriteRB(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRbRYImpl(evo_test::RB const& value) {
  step_index_.set_step_offset("RbRY", stream_.Pos());
  evo_test::binary::WriteRB(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRbRZImpl(evo_test::RB const& value) {
  step_index_.set_step_offset("RbRZ", stream_.Pos());
  evo_test::binary::WriteRB(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRcRLinkImpl(evo_test::RC const& value) {
  step_index_.set_step_offset("RcRLink", stream_.Pos());
  evo_test::binary::WriteRC(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRcRXImpl(evo_test::RC const& value) {
  step_index_.set_step_offset("RcRX", stream_.Pos());
  evo_test::binary::WriteRC(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRcRYImpl(evo_test::RC const& value) {
  step_index_.set_step_offset("RcRY", stream_.Pos());
  evo_test::binary::WriteRC(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRcRZImpl(evo_test::RC const& value) {
  step_index_.set_step_offset("RcRZ", stream_.Pos());
  evo_test::binary::WriteRC(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRlinkRNewImpl(evo_test::RLink const& value) {
  step_index_.set_step_offset("RlinkRNew", stream_.Pos());
  evo_test::binary::WriteRLink(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRaRNewImpl(evo_test::RA const& value) {
  step_index_.set_step_offset("RaRNew", stream_.Pos());
  evo_test::binary::WriteRA(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRbRNewImpl(evo_test::RB const& value) {
  step_index_.set_step_offset("RbRNew", stream_.Pos());
  evo_test::binary::WriteRB(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRcRNewImpl(evo_test::RC const& value) {
  step_index_.set_step_offset("RcRNew", stream_.Pos());
  evo_test::binary::WriteRC(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRlinkRUnionImpl(evo_test::RLink const& value) {
  step_index_.set_step_offset("RlinkRUnion", stream_.Pos());
  evo_test::binary::WriteRLink(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRaRUnionImpl(evo_test::RA const& value) {
  step_index_.set_step_offset("RaRUnion", stream_.Pos());
  evo_test::binary::WriteRA(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRbRUnionImpl(evo_test::RB const& value) {
  step_index_.set_step_offset("RbRUnion", stream_.Pos());
  evo_test::binary::WriteRB(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRcRUnionImpl(evo_test::RC const& value) {
  step_index_.set_step_offset("RcRUnion", stream_.Pos());
  evo_test::binary::WriteRC(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteOptionalRecordWithChangesImpl(std::optional<evo_test::RecordWithChanges> const& value) {
  step_index_.set_step_offset("OptionalRecordWithChanges", stream_.Pos());
  yardl::binary::WriteOptional<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteAliasedOptionalRecordWithChangesImpl(std::optional<evo_test::AliasedRecordWithChanges> const& value) {
  step_index_.set_step_offset("AliasedOptionalRecordWithChanges", stream_.Pos());
  yardl::binary::WriteOptional<evo_test::AliasedRecordWithChanges, evo_test::binary::WriteAliasedRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteUnionRecordWithChangesImpl(std::variant<evo_test::RecordWithChanges, int32_t> const& value) {
  step_index_.set_step_offset("UnionRecordWithChanges", stream_.Pos());
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteUnionWithSameTypesetImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string> const& value) {
  step_index_.set_step_offset("UnionWithSameTypeset", stream_.Pos());
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger, float, yardl::binary::WriteFloatingPoint, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteUnionWithTypesAddedImpl(std::variant<evo_test::RecordWithChanges, float> const& value) {
  step_index_.set_step_offset("UnionWithTypesAdded", stream_.Pos());
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, float, yardl::binary::WriteFloatingPoint>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteUnionWithTypesRemovedImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string> const& value) {
  step_index_.set_step_offset("UnionWithTypesRemoved", stream_.Pos());
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger, float, yardl::binary::WriteFloatingPoint, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRecordToOptionalImpl(evo_test::RecordWithChanges const& value) {
  step_index_.set_step_offset("RecordToOptional", stream_.Pos());
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRecordToAliasedOptionalImpl(evo_test::RecordWithChanges const& value) {
  step_index_.set_step_offset("RecordToAliasedOptional", stream_.Pos());
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRecordToUnionImpl(evo_test::RecordWithChanges const& value) {
  step_index_.set_step_offset("RecordToUnion", stream_.Pos());
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteRecordToAliasedUnionImpl(evo_test::RecordWithChanges const& value) {
  step_index_.set_step_offset("RecordToAliasedUnion", stream_.Pos());
  evo_test::binary::WriteRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteUnionToAliasedUnionImpl(std::variant<evo_test::RecordWithChanges, int32_t> const& value) {
  step_index_.set_step_offset("UnionToAliasedUnion", stream_.Pos());
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteUnionToAliasedUnionWithChangesImpl(std::variant<evo_test::RecordWithChanges, int32_t> const& value) {
  step_index_.set_step_offset("UnionToAliasedUnionWithChanges", stream_.Pos());
  WriteUnion<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges, int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteOptionalToAliasedOptionalImpl(std::optional<evo_test::RecordWithChanges> const& value) {
  step_index_.set_step_offset("OptionalToAliasedOptional", stream_.Pos());
  yardl::binary::WriteOptional<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteOptionalToAliasedOptionalWithChangesImpl(std::optional<int32_t> const& value) {
  step_index_.set_step_offset("OptionalToAliasedOptionalWithChanges", stream_.Pos());
  yardl::binary::WriteOptional<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteGenericRecordImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  step_index_.set_step_offset("GenericRecord", stream_.Pos());
  evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteGenericRecordToOpenAliasImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  step_index_.set_step_offset("GenericRecordToOpenAlias", stream_.Pos());
  evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteGenericRecordToClosedAliasImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  step_index_.set_step_offset("GenericRecordToClosedAlias", stream_.Pos());
  evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteGenericRecordToHalfClosedAliasImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  step_index_.set_step_offset("GenericRecordToHalfClosedAlias", stream_.Pos());
  evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteAliasedGenericRecordToAliasImpl(evo_test::AliasedHalfClosedGenericRecord<int32_t> const& value) {
  step_index_.set_step_offset("AliasedGenericRecordToAlias", stream_.Pos());
  evo_test::binary::WriteAliasedHalfClosedGenericRecord<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteGenericRecordToReversedImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  step_index_.set_step_offset("GenericRecordToReversed", stream_.Pos());
  evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteClosedGenericRecordToUnionImpl(evo_test::AliasedClosedGenericRecord const& value) {
  step_index_.set_step_offset("ClosedGenericRecordToUnion", stream_.Pos());
  evo_test::binary::WriteAliasedClosedGenericRecord(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteGenericRecordToAliasedUnionImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  step_index_.set_step_offset("GenericRecordToAliasedUnion", stream_.Pos());
  evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteGenericUnionToReversedImpl(evo_test::AliasedClosedGenericUnion const& value) {
  step_index_.set_step_offset("GenericUnionToReversed", stream_.Pos());
  evo_test::binary::WriteAliasedClosedGenericUnion(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteGenericUnionOfChangedRecordImpl(evo_test::AliasedClosedGenericUnion const& value) {
  step_index_.set_step_offset("GenericUnionOfChangedRecord", stream_.Pos());
  evo_test::binary::WriteAliasedClosedGenericUnion(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteGenericParentRecordImpl(evo_test::GenericParentRecord<int32_t> const& value) {
  step_index_.set_step_offset("GenericParentRecord", stream_.Pos());
  evo_test::binary::WriteGenericParentRecord<int32_t, yardl::binary::WriteInteger>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteGenericNestedRecordsImpl(evo_test::GenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::ChangedGeneric<std::string, int32_t>> const& value) {
  step_index_.set_step_offset("GenericNestedRecords", stream_.Pos());
  evo_test::binary::WriteGenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::binary::WriteUnchangedGeneric<int32_t, yardl::binary::WriteInteger>, evo_test::ChangedGeneric<std::string, int32_t>, evo_test::binary::WriteChangedGeneric<std::string, yardl::binary::WriteString, int32_t, yardl::binary::WriteInteger>>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteGenericRecordStreamImpl(evo_test::GenericRecord<int32_t, std::string> const& value) {
  step_index_.set_step_offset("GenericRecordStream", stream_.Pos());
  size_t item_offset = 0;
  yardl::binary::WriteBlockAndSaveOffset<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>>(stream_, value, item_offset);
  step_index_.add_stream_offset("GenericRecordStream", item_offset);
}

void ProtocolWithChangesIndexedWriter::WriteGenericRecordStreamImpl(std::vector<evo_test::GenericRecord<int32_t, std::string>> const& values) {
  step_index_.set_step_offset("GenericRecordStream", stream_.Pos());
  std::vector<size_t> item_offsets;
  item_offsets.reserve(values.size());
  if (!values.empty()) {
    yardl::binary::WriteVectorAndSaveOffsets<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::WriteGenericRecord<int32_t, yardl::binary::WriteInteger, std::string, yardl::binary::WriteString>>(stream_, values, item_offsets);
  }
  step_index_.add_stream_offsets("GenericRecordStream", item_offsets);
}

void ProtocolWithChangesIndexedWriter::EndGenericRecordStreamImpl() {
  step_index_.set_step_offset("GenericRecordStream", stream_.Pos());
  step_index_.add_stream_offsets("GenericRecordStream", std::vector<size_t>{});
  yardl::binary::WriteInteger(stream_, 0U);
}

void ProtocolWithChangesIndexedWriter::WriteGenericParentRecordStreamImpl(evo_test::GenericParentRecord<int32_t> const& value) {
  step_index_.set_step_offset("GenericParentRecordStream", stream_.Pos());
  size_t item_offset = 0;
  yardl::binary::WriteBlockAndSaveOffset<evo_test::GenericParentRecord<int32_t>, evo_test::binary::WriteGenericParentRecord<int32_t, yardl::binary::WriteInteger>>(stream_, value, item_offset);
  step_index_.add_stream_offset("GenericParentRecordStream", item_offset);
}

void ProtocolWithChangesIndexedWriter::WriteGenericParentRecordStreamImpl(std::vector<evo_test::GenericParentRecord<int32_t>> const& values) {
  step_index_.set_step_offset("GenericParentRecordStream", stream_.Pos());
  std::vector<size_t> item_offsets;
  item_offsets.reserve(values.size());
  if (!values.empty()) {
    yardl::binary::WriteVectorAndSaveOffsets<evo_test::GenericParentRecord<int32_t>, evo_test::binary::WriteGenericParentRecord<int32_t, yardl::binary::WriteInteger>>(stream_, values, item_offsets);
  }
  step_index_.add_stream_offsets("GenericParentRecordStream", item_offsets);
}

void ProtocolWithChangesIndexedWriter::EndGenericParentRecordStreamImpl() {
  step_index_.set_step_offset("GenericParentRecordStream", stream_.Pos());
  step_index_.add_stream_offsets("GenericParentRecordStream", std::vector<size_t>{});
  yardl::binary::WriteInteger(stream_, 0U);
}

void ProtocolWithChangesIndexedWriter::WriteVectorRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges> const& value) {
  step_index_.set_step_offset("VectorRecordWithChanges", stream_.Pos());
  yardl::binary::WriteVector<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesIndexedWriter::WriteStreamedRecordWithChangesImpl(evo_test::RecordWithChanges const& value) {
  step_index_.set_step_offset("StreamedRecordWithChanges", stream_.Pos());
  size_t item_offset = 0;
  yardl::binary::WriteBlockAndSaveOffset<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, value, item_offset);
  step_index_.add_stream_offset("StreamedRecordWithChanges", item_offset);
}

void ProtocolWithChangesIndexedWriter::WriteStreamedRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges> const& values) {
  step_index_.set_step_offset("StreamedRecordWithChanges", stream_.Pos());
  std::vector<size_t> item_offsets;
  item_offsets.reserve(values.size());
  if (!values.empty()) {
    yardl::binary::WriteVectorAndSaveOffsets<evo_test::RecordWithChanges, evo_test::binary::WriteRecordWithChanges>(stream_, values, item_offsets);
  }
  step_index_.add_stream_offsets("StreamedRecordWithChanges", item_offsets);
}

void ProtocolWithChangesIndexedWriter::EndStreamedRecordWithChangesImpl() {
  step_index_.set_step_offset("StreamedRecordWithChanges", stream_.Pos());
  step_index_.add_stream_offsets("StreamedRecordWithChanges", std::vector<size_t>{});
  yardl::binary::WriteInteger(stream_, 0U);
}

void ProtocolWithChangesIndexedWriter::Flush() {
  stream_.Flush();
}

void ProtocolWithChangesIndexedWriter::CloseImpl() {
  yardl::binary::WriteIndex(stream_, step_index_);
  stream_.Flush();
}

void ProtocolWithChangesIndexedReader::ReadInt8ToIntImpl(int8_t& value) {
  auto pos = step_index_.get_step_offset("Int8ToInt");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadInt8ToLongImpl(int8_t& value) {
  auto pos = step_index_.get_step_offset("Int8ToLong");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadInt8ToUintImpl(int8_t& value) {
  auto pos = step_index_.get_step_offset("Int8ToUint");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadInt8ToUlongImpl(int8_t& value) {
  auto pos = step_index_.get_step_offset("Int8ToUlong");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadInt8ToFloatImpl(int8_t& value) {
  auto pos = step_index_.get_step_offset("Int8ToFloat");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadInt8ToDoubleImpl(int8_t& value) {
  auto pos = step_index_.get_step_offset("Int8ToDouble");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadIntToUintImpl(int32_t& value) {
  auto pos = step_index_.get_step_offset("IntToUint");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadIntToLongImpl(int32_t& value) {
  auto pos = step_index_.get_step_offset("IntToLong");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadIntToFloatImpl(int32_t& value) {
  auto pos = step_index_.get_step_offset("IntToFloat");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadIntToDoubleImpl(int32_t& value) {
  auto pos = step_index_.get_step_offset("IntToDouble");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadUintToUlongImpl(uint32_t& value) {
  auto pos = step_index_.get_step_offset("UintToUlong");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadUintToFloatImpl(uint32_t& value) {
  auto pos = step_index_.get_step_offset("UintToFloat");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadUintToDoubleImpl(uint32_t& value) {
  auto pos = step_index_.get_step_offset("UintToDouble");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadFloatToDoubleImpl(float& value) {
  auto pos = step_index_.get_step_offset("FloatToDouble");
  stream_.Seek(pos);
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadComplexFloatToComplexDoubleImpl(std::complex<float>& value) {
  auto pos = step_index_.get_step_offset("ComplexFloatToComplexDouble");
  stream_.Seek(pos);
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadIntToStringImpl(int32_t& value) {
  auto pos = step_index_.get_step_offset("IntToString");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadUintToStringImpl(uint32_t& value) {
  auto pos = step_index_.get_step_offset("UintToString");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadLongToStringImpl(int64_t& value) {
  auto pos = step_index_.get_step_offset("LongToString");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadUlongToStringImpl(uint64_t& value) {
  auto pos = step_index_.get_step_offset("UlongToString");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadFloatToStringImpl(float& value) {
  auto pos = step_index_.get_step_offset("FloatToString");
  stream_.Seek(pos);
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadDoubleToStringImpl(double& value) {
  auto pos = step_index_.get_step_offset("DoubleToString");
  stream_.Seek(pos);
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadIntToOptionalImpl(int32_t& value) {
  auto pos = step_index_.get_step_offset("IntToOptional");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadFloatToOptionalImpl(float& value) {
  auto pos = step_index_.get_step_offset("FloatToOptional");
  stream_.Seek(pos);
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadStringToOptionalImpl(std::string& value) {
  auto pos = step_index_.get_step_offset("StringToOptional");
  stream_.Seek(pos);
  yardl::binary::ReadString(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadIntToUnionImpl(int32_t& value) {
  auto pos = step_index_.get_step_offset("IntToUnion");
  stream_.Seek(pos);
  yardl::binary::ReadInteger(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadFloatToUnionImpl(float& value) {
  auto pos = step_index_.get_step_offset("FloatToUnion");
  stream_.Seek(pos);
  yardl::binary::ReadFloatingPoint(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadStringToUnionImpl(std::string& value) {
  auto pos = step_index_.get_step_offset("StringToUnion");
  stream_.Seek(pos);
  yardl::binary::ReadString(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadOptionalIntToFloatImpl(std::optional<int32_t>& value) {
  auto pos = step_index_.get_step_offset("OptionalIntToFloat");
  stream_.Seek(pos);
  yardl::binary::ReadOptional<int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadOptionalFloatToStringImpl(std::optional<float>& value) {
  auto pos = step_index_.get_step_offset("OptionalFloatToString");
  stream_.Seek(pos);
  yardl::binary::ReadOptional<float, yardl::binary::ReadFloatingPoint>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadAliasedLongToStringImpl(evo_test::AliasedLongToString& value) {
  auto pos = step_index_.get_step_offset("AliasedLongToString");
  stream_.Seek(pos);
  evo_test::binary::ReadAliasedLongToString(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadStringToAliasedStringImpl(std::string& value) {
  auto pos = step_index_.get_step_offset("StringToAliasedString");
  stream_.Seek(pos);
  yardl::binary::ReadString(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadStringToAliasedIntImpl(std::string& value) {
  auto pos = step_index_.get_step_offset("StringToAliasedInt");
  stream_.Seek(pos);
  yardl::binary::ReadString(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadEnumToAliasedEnumImpl(evo_test::GrowingEnum& value) {
  auto pos = step_index_.get_step_offset("EnumToAliasedEnum");
  stream_.Seek(pos);
  yardl::binary::ReadEnum<evo_test::GrowingEnum>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadOptionalIntToUnionImpl(std::optional<int32_t>& value) {
  auto pos = step_index_.get_step_offset("OptionalIntToUnion");
  stream_.Seek(pos);
  yardl::binary::ReadOptional<int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadOptionalRecordToUnionImpl(std::optional<evo_test::RecordWithChanges>& value) {
  auto pos = step_index_.get_step_offset("OptionalRecordToUnion");
  stream_.Seek(pos);
  yardl::binary::ReadOptional<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRecordWithChangesImpl(evo_test::RecordWithChanges& value) {
  auto pos = step_index_.get_step_offset("RecordWithChanges");
  stream_.Seek(pos);
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadAliasedRecordWithChangesImpl(evo_test::AliasedRecordWithChanges& value) {
  auto pos = step_index_.get_step_offset("AliasedRecordWithChanges");
  stream_.Seek(pos);
  evo_test::binary::ReadAliasedRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRecordToRenamedRecordImpl(evo_test::RenamedRecord& value) {
  auto pos = step_index_.get_step_offset("RecordToRenamedRecord");
  stream_.Seek(pos);
  evo_test::binary::ReadRenamedRecord(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRecordToAliasedRecordImpl(evo_test::RecordWithChanges& value) {
  auto pos = step_index_.get_step_offset("RecordToAliasedRecord");
  stream_.Seek(pos);
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRecordToAliasedAliasImpl(evo_test::RecordWithChanges& value) {
  auto pos = step_index_.get_step_offset("RecordToAliasedAlias");
  stream_.Seek(pos);
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

bool ProtocolWithChangesIndexedReader::ReadStreamIntToStringToFloatImpl(int32_t& value) {
  if (!step_index_.offset_within_stream("StreamIntToStringToFloat", "VectorIntToStringToFloat", stream_.Pos())) {
    stream_.Seek(step_index_.get_step_offset("StreamIntToStringToFloat"));
  }
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<int32_t, yardl::binary::ReadInteger>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesIndexedReader::ReadStreamIntToStringToFloatImpl(std::vector<int32_t>& values) {
  if (!step_index_.offset_within_stream("StreamIntToStringToFloat", "VectorIntToStringToFloat", stream_.Pos())) {
    stream_.Seek(step_index_.get_step_offset("StreamIntToStringToFloat"));
  }
  yardl::binary::ReadBlocksIntoVector<int32_t, yardl::binary::ReadInteger>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

bool ProtocolWithChangesIndexedReader::ReadStreamIntToStringToFloatImpl(int32_t& value, size_t idx) {
  size_t abs_offset = 0;
  if (!step_index_.find_stream_item("StreamIntToStringToFloat", idx, abs_offset, current_block_remaining_)) {
    return false;
  }
  stream_.Seek(abs_offset);
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<int32_t, yardl::binary::ReadInteger>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesIndexedReader::ReadStreamIntToStringToFloatImpl(std::vector<int32_t>& values, size_t idx) {
  size_t abs_offset = 0;
  if (!step_index_.find_stream_item("StreamIntToStringToFloat", idx, abs_offset, current_block_remaining_)) {
    values.clear();
    return false;
  }
  stream_.Seek(abs_offset);
  yardl::binary::ReadBlocksIntoVector<int32_t, yardl::binary::ReadInteger>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

size_t ProtocolWithChangesIndexedReader::CountStreamIntToStringToFloatImpl() {
  return step_index_.get_stream_count("StreamIntToStringToFloat");
}

void ProtocolWithChangesIndexedReader::ReadVectorIntToStringToFloatImpl(std::vector<int32_t>& value) {
  auto pos = step_index_.get_step_offset("VectorIntToStringToFloat");
  stream_.Seek(pos);
  yardl::binary::ReadVector<int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadIntFloatUnionReorderedImpl(std::variant<int32_t, float>& value) {
  auto pos = step_index_.get_step_offset("IntFloatUnionReordered");
  stream_.Seek(pos);
  ReadUnion<int32_t, yardl::binary::ReadInteger, float, yardl::binary::ReadFloatingPoint>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadVectorUnionReorderedImpl(std::vector<std::variant<int32_t, float>>& value) {
  auto pos = step_index_.get_step_offset("VectorUnionReordered");
  stream_.Seek(pos);
  yardl::binary::ReadVector<std::variant<int32_t, float>, ReadUnion<int32_t, yardl::binary::ReadInteger, float, yardl::binary::ReadFloatingPoint>>(stream_, value);
}

bool ProtocolWithChangesIndexedReader::ReadStreamUnionReorderedImpl(std::variant<int32_t, std::string>& value) {
  if (!step_index_.offset_within_stream("StreamUnionReordered", "StreamOfAliasTypeChange", stream_.Pos())) {
    stream_.Seek(step_index_.get_step_offset("StreamUnionReordered"));
  }
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<std::variant<int32_t, std::string>, ReadUnion<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesIndexedReader::ReadStreamUnionReorderedImpl(std::vector<std::variant<int32_t, std::string>>& values) {
  if (!step_index_.offset_within_stream("StreamUnionReordered", "StreamOfAliasTypeChange", stream_.Pos())) {
    stream_.Seek(step_index_.get_step_offset("StreamUnionReordered"));
  }
  yardl::binary::ReadBlocksIntoVector<std::variant<int32_t, std::string>, ReadUnion<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

bool ProtocolWithChangesIndexedReader::ReadStreamUnionReorderedImpl(std::variant<int32_t, std::string>& value, size_t idx) {
  size_t abs_offset = 0;
  if (!step_index_.find_stream_item("StreamUnionReordered", idx, abs_offset, current_block_remaining_)) {
    return false;
  }
  stream_.Seek(abs_offset);
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<std::variant<int32_t, std::string>, ReadUnion<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesIndexedReader::ReadStreamUnionReorderedImpl(std::vector<std::variant<int32_t, std::string>>& values, size_t idx) {
  size_t abs_offset = 0;
  if (!step_index_.find_stream_item("StreamUnionReordered", idx, abs_offset, current_block_remaining_)) {
    values.clear();
    return false;
  }
  stream_.Seek(abs_offset);
  yardl::binary::ReadBlocksIntoVector<std::variant<int32_t, std::string>, ReadUnion<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

size_t ProtocolWithChangesIndexedReader::CountStreamUnionReorderedImpl() {
  return step_index_.get_stream_count("StreamUnionReordered");
}

bool ProtocolWithChangesIndexedReader::ReadStreamOfAliasTypeChangeImpl(evo_test::StreamItem& value) {
  if (!step_index_.offset_within_stream("StreamOfAliasTypeChange", "Rlink", stream_.Pos())) {
    stream_.Seek(step_index_.get_step_offset("StreamOfAliasTypeChange"));
  }
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::StreamItem, evo_test::binary::ReadStreamItem>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesIndexedReader::ReadStreamOfAliasTypeChangeImpl(std::vector<evo_test::StreamItem>& values) {
  if (!step_index_.offset_within_stream("StreamOfAliasTypeChange", "Rlink", stream_.Pos())) {
    stream_.Seek(step_index_.get_step_offset("StreamOfAliasTypeChange"));
  }
  yardl::binary::ReadBlocksIntoVector<evo_test::StreamItem, evo_test::binary::ReadStreamItem>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

bool ProtocolWithChangesIndexedReader::ReadStreamOfAliasTypeChangeImpl(evo_test::StreamItem& value, size_t idx) {
  size_t abs_offset = 0;
  if (!step_index_.find_stream_item("StreamOfAliasTypeChange", idx, abs_offset, current_block_remaining_)) {
    return false;
  }
  stream_.Seek(abs_offset);
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::StreamItem, evo_test::binary::ReadStreamItem>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesIndexedReader::ReadStreamOfAliasTypeChangeImpl(std::vector<evo_test::StreamItem>& values, size_t idx) {
  size_t abs_offset = 0;
  if (!step_index_.find_stream_item("StreamOfAliasTypeChange", idx, abs_offset, current_block_remaining_)) {
    values.clear();
    return false;
  }
  stream_.Seek(abs_offset);
  yardl::binary::ReadBlocksIntoVector<evo_test::StreamItem, evo_test::binary::ReadStreamItem>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

size_t ProtocolWithChangesIndexedReader::CountStreamOfAliasTypeChangeImpl() {
  return step_index_.get_stream_count("StreamOfAliasTypeChange");
}

void ProtocolWithChangesIndexedReader::ReadRlinkImpl(evo_test::RLink& value) {
  auto pos = step_index_.get_step_offset("Rlink");
  stream_.Seek(pos);
  evo_test::binary::ReadRLink(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRlinkRXImpl(evo_test::RLink& value) {
  auto pos = step_index_.get_step_offset("RlinkRX");
  stream_.Seek(pos);
  evo_test::binary::ReadRLink(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRlinkRYImpl(evo_test::RLink& value) {
  auto pos = step_index_.get_step_offset("RlinkRY");
  stream_.Seek(pos);
  evo_test::binary::ReadRLink(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRlinkRZImpl(evo_test::RLink& value) {
  auto pos = step_index_.get_step_offset("RlinkRZ");
  stream_.Seek(pos);
  evo_test::binary::ReadRLink(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRaRLinkImpl(evo_test::RA& value) {
  auto pos = step_index_.get_step_offset("RaRLink");
  stream_.Seek(pos);
  evo_test::binary::ReadRA(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRaRXImpl(evo_test::RA& value) {
  auto pos = step_index_.get_step_offset("RaRX");
  stream_.Seek(pos);
  evo_test::binary::ReadRA(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRaRYImpl(evo_test::RA& value) {
  auto pos = step_index_.get_step_offset("RaRY");
  stream_.Seek(pos);
  evo_test::binary::ReadRA(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRaRZImpl(evo_test::RA& value) {
  auto pos = step_index_.get_step_offset("RaRZ");
  stream_.Seek(pos);
  evo_test::binary::ReadRA(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRbRLinkImpl(evo_test::RB& value) {
  auto pos = step_index_.get_step_offset("RbRLink");
  stream_.Seek(pos);
  evo_test::binary::ReadRB(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRbRXImpl(evo_test::RB& value) {
  auto pos = step_index_.get_step_offset("RbRX");
  stream_.Seek(pos);
  evo_test::binary::ReadRB(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRbRYImpl(evo_test::RB& value) {
  auto pos = step_index_.get_step_offset("RbRY");
  stream_.Seek(pos);
  evo_test::binary::ReadRB(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRbRZImpl(evo_test::RB& value) {
  auto pos = step_index_.get_step_offset("RbRZ");
  stream_.Seek(pos);
  evo_test::binary::ReadRB(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRcRLinkImpl(evo_test::RC& value) {
  auto pos = step_index_.get_step_offset("RcRLink");
  stream_.Seek(pos);
  evo_test::binary::ReadRC(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRcRXImpl(evo_test::RC& value) {
  auto pos = step_index_.get_step_offset("RcRX");
  stream_.Seek(pos);
  evo_test::binary::ReadRC(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRcRYImpl(evo_test::RC& value) {
  auto pos = step_index_.get_step_offset("RcRY");
  stream_.Seek(pos);
  evo_test::binary::ReadRC(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRcRZImpl(evo_test::RC& value) {
  auto pos = step_index_.get_step_offset("RcRZ");
  stream_.Seek(pos);
  evo_test::binary::ReadRC(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRlinkRNewImpl(evo_test::RLink& value) {
  auto pos = step_index_.get_step_offset("RlinkRNew");
  stream_.Seek(pos);
  evo_test::binary::ReadRLink(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRaRNewImpl(evo_test::RA& value) {
  auto pos = step_index_.get_step_offset("RaRNew");
  stream_.Seek(pos);
  evo_test::binary::ReadRA(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRbRNewImpl(evo_test::RB& value) {
  auto pos = step_index_.get_step_offset("RbRNew");
  stream_.Seek(pos);
  evo_test::binary::ReadRB(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRcRNewImpl(evo_test::RC& value) {
  auto pos = step_index_.get_step_offset("RcRNew");
  stream_.Seek(pos);
  evo_test::binary::ReadRC(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRlinkRUnionImpl(evo_test::RLink& value) {
  auto pos = step_index_.get_step_offset("RlinkRUnion");
  stream_.Seek(pos);
  evo_test::binary::ReadRLink(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRaRUnionImpl(evo_test::RA& value) {
  auto pos = step_index_.get_step_offset("RaRUnion");
  stream_.Seek(pos);
  evo_test::binary::ReadRA(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRbRUnionImpl(evo_test::RB& value) {
  auto pos = step_index_.get_step_offset("RbRUnion");
  stream_.Seek(pos);
  evo_test::binary::ReadRB(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRcRUnionImpl(evo_test::RC& value) {
  auto pos = step_index_.get_step_offset("RcRUnion");
  stream_.Seek(pos);
  evo_test::binary::ReadRC(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadOptionalRecordWithChangesImpl(std::optional<evo_test::RecordWithChanges>& value) {
  auto pos = step_index_.get_step_offset("OptionalRecordWithChanges");
  stream_.Seek(pos);
  yardl::binary::ReadOptional<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadAliasedOptionalRecordWithChangesImpl(std::optional<evo_test::AliasedRecordWithChanges>& value) {
  auto pos = step_index_.get_step_offset("AliasedOptionalRecordWithChanges");
  stream_.Seek(pos);
  yardl::binary::ReadOptional<evo_test::AliasedRecordWithChanges, evo_test::binary::ReadAliasedRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadUnionRecordWithChangesImpl(std::variant<evo_test::RecordWithChanges, int32_t>& value) {
  auto pos = step_index_.get_step_offset("UnionRecordWithChanges");
  stream_.Seek(pos);
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadUnionWithSameTypesetImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string>& value) {
  auto pos = step_index_.get_step_offset("UnionWithSameTypeset");
  stream_.Seek(pos);
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger, float, yardl::binary::ReadFloatingPoint, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadUnionWithTypesAddedImpl(std::variant<evo_test::RecordWithChanges, float>& value) {
  auto pos = step_index_.get_step_offset("UnionWithTypesAdded");
  stream_.Seek(pos);
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, float, yardl::binary::ReadFloatingPoint>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadUnionWithTypesRemovedImpl(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string>& value) {
  auto pos = step_index_.get_step_offset("UnionWithTypesRemoved");
  stream_.Seek(pos);
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger, float, yardl::binary::ReadFloatingPoint, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRecordToOptionalImpl(evo_test::RecordWithChanges& value) {
  auto pos = step_index_.get_step_offset("RecordToOptional");
  stream_.Seek(pos);
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRecordToAliasedOptionalImpl(evo_test::RecordWithChanges& value) {
  auto pos = step_index_.get_step_offset("RecordToAliasedOptional");
  stream_.Seek(pos);
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRecordToUnionImpl(evo_test::RecordWithChanges& value) {
  auto pos = step_index_.get_step_offset("RecordToUnion");
  stream_.Seek(pos);
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadRecordToAliasedUnionImpl(evo_test::RecordWithChanges& value) {
  auto pos = step_index_.get_step_offset("RecordToAliasedUnion");
  stream_.Seek(pos);
  evo_test::binary::ReadRecordWithChanges(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadUnionToAliasedUnionImpl(std::variant<evo_test::RecordWithChanges, int32_t>& value) {
  auto pos = step_index_.get_step_offset("UnionToAliasedUnion");
  stream_.Seek(pos);
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadUnionToAliasedUnionWithChangesImpl(std::variant<evo_test::RecordWithChanges, int32_t>& value) {
  auto pos = step_index_.get_step_offset("UnionToAliasedUnionWithChanges");
  stream_.Seek(pos);
  ReadUnion<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges, int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadOptionalToAliasedOptionalImpl(std::optional<evo_test::RecordWithChanges>& value) {
  auto pos = step_index_.get_step_offset("OptionalToAliasedOptional");
  stream_.Seek(pos);
  yardl::binary::ReadOptional<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadOptionalToAliasedOptionalWithChangesImpl(std::optional<int32_t>& value) {
  auto pos = step_index_.get_step_offset("OptionalToAliasedOptionalWithChanges");
  stream_.Seek(pos);
  yardl::binary::ReadOptional<int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadGenericRecordImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  auto pos = step_index_.get_step_offset("GenericRecord");
  stream_.Seek(pos);
  evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadGenericRecordToOpenAliasImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  auto pos = step_index_.get_step_offset("GenericRecordToOpenAlias");
  stream_.Seek(pos);
  evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadGenericRecordToClosedAliasImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  auto pos = step_index_.get_step_offset("GenericRecordToClosedAlias");
  stream_.Seek(pos);
  evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadGenericRecordToHalfClosedAliasImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  auto pos = step_index_.get_step_offset("GenericRecordToHalfClosedAlias");
  stream_.Seek(pos);
  evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadAliasedGenericRecordToAliasImpl(evo_test::AliasedHalfClosedGenericRecord<int32_t>& value) {
  auto pos = step_index_.get_step_offset("AliasedGenericRecordToAlias");
  stream_.Seek(pos);
  evo_test::binary::ReadAliasedHalfClosedGenericRecord<int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadGenericRecordToReversedImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  auto pos = step_index_.get_step_offset("GenericRecordToReversed");
  stream_.Seek(pos);
  evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadClosedGenericRecordToUnionImpl(evo_test::AliasedClosedGenericRecord& value) {
  auto pos = step_index_.get_step_offset("ClosedGenericRecordToUnion");
  stream_.Seek(pos);
  evo_test::binary::ReadAliasedClosedGenericRecord(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadGenericRecordToAliasedUnionImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  auto pos = step_index_.get_step_offset("GenericRecordToAliasedUnion");
  stream_.Seek(pos);
  evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadGenericUnionToReversedImpl(evo_test::AliasedClosedGenericUnion& value) {
  auto pos = step_index_.get_step_offset("GenericUnionToReversed");
  stream_.Seek(pos);
  evo_test::binary::ReadAliasedClosedGenericUnion(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadGenericUnionOfChangedRecordImpl(evo_test::AliasedClosedGenericUnion& value) {
  auto pos = step_index_.get_step_offset("GenericUnionOfChangedRecord");
  stream_.Seek(pos);
  evo_test::binary::ReadAliasedClosedGenericUnion(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadGenericParentRecordImpl(evo_test::GenericParentRecord<int32_t>& value) {
  auto pos = step_index_.get_step_offset("GenericParentRecord");
  stream_.Seek(pos);
  evo_test::binary::ReadGenericParentRecord<int32_t, yardl::binary::ReadInteger>(stream_, value);
}

void ProtocolWithChangesIndexedReader::ReadGenericNestedRecordsImpl(evo_test::GenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::ChangedGeneric<std::string, int32_t>>& value) {
  auto pos = step_index_.get_step_offset("GenericNestedRecords");
  stream_.Seek(pos);
  evo_test::binary::ReadGenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::binary::ReadUnchangedGeneric<int32_t, yardl::binary::ReadInteger>, evo_test::ChangedGeneric<std::string, int32_t>, evo_test::binary::ReadChangedGeneric<std::string, yardl::binary::ReadString, int32_t, yardl::binary::ReadInteger>>(stream_, value);
}

bool ProtocolWithChangesIndexedReader::ReadGenericRecordStreamImpl(evo_test::GenericRecord<int32_t, std::string>& value) {
  if (!step_index_.offset_within_stream("GenericRecordStream", "GenericParentRecordStream", stream_.Pos())) {
    stream_.Seek(step_index_.get_step_offset("GenericRecordStream"));
  }
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesIndexedReader::ReadGenericRecordStreamImpl(std::vector<evo_test::GenericRecord<int32_t, std::string>>& values) {
  if (!step_index_.offset_within_stream("GenericRecordStream", "GenericParentRecordStream", stream_.Pos())) {
    stream_.Seek(step_index_.get_step_offset("GenericRecordStream"));
  }
  yardl::binary::ReadBlocksIntoVector<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

bool ProtocolWithChangesIndexedReader::ReadGenericRecordStreamImpl(evo_test::GenericRecord<int32_t, std::string>& value, size_t idx) {
  size_t abs_offset = 0;
  if (!step_index_.find_stream_item("GenericRecordStream", idx, abs_offset, current_block_remaining_)) {
    return false;
  }
  stream_.Seek(abs_offset);
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesIndexedReader::ReadGenericRecordStreamImpl(std::vector<evo_test::GenericRecord<int32_t, std::string>>& values, size_t idx) {
  size_t abs_offset = 0;
  if (!step_index_.find_stream_item("GenericRecordStream", idx, abs_offset, current_block_remaining_)) {
    values.clear();
    return false;
  }
  stream_.Seek(abs_offset);
  yardl::binary::ReadBlocksIntoVector<evo_test::GenericRecord<int32_t, std::string>, evo_test::binary::ReadGenericRecord<int32_t, yardl::binary::ReadInteger, std::string, yardl::binary::ReadString>>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

size_t ProtocolWithChangesIndexedReader::CountGenericRecordStreamImpl() {
  return step_index_.get_stream_count("GenericRecordStream");
}

bool ProtocolWithChangesIndexedReader::ReadGenericParentRecordStreamImpl(evo_test::GenericParentRecord<int32_t>& value) {
  if (!step_index_.offset_within_stream("GenericParentRecordStream", "VectorRecordWithChanges", stream_.Pos())) {
    stream_.Seek(step_index_.get_step_offset("GenericParentRecordStream"));
  }
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::GenericParentRecord<int32_t>, evo_test::binary::ReadGenericParentRecord<int32_t, yardl::binary::ReadInteger>>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesIndexedReader::ReadGenericParentRecordStreamImpl(std::vector<evo_test::GenericParentRecord<int32_t>>& values) {
  if (!step_index_.offset_within_stream("GenericParentRecordStream", "VectorRecordWithChanges", stream_.Pos())) {
    stream_.Seek(step_index_.get_step_offset("GenericParentRecordStream"));
  }
  yardl::binary::ReadBlocksIntoVector<evo_test::GenericParentRecord<int32_t>, evo_test::binary::ReadGenericParentRecord<int32_t, yardl::binary::ReadInteger>>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

bool ProtocolWithChangesIndexedReader::ReadGenericParentRecordStreamImpl(evo_test::GenericParentRecord<int32_t>& value, size_t idx) {
  size_t abs_offset = 0;
  if (!step_index_.find_stream_item("GenericParentRecordStream", idx, abs_offset, current_block_remaining_)) {
    return false;
  }
  stream_.Seek(abs_offset);
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::GenericParentRecord<int32_t>, evo_test::binary::ReadGenericParentRecord<int32_t, yardl::binary::ReadInteger>>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesIndexedReader::ReadGenericParentRecordStreamImpl(std::vector<evo_test::GenericParentRecord<int32_t>>& values, size_t idx) {
  size_t abs_offset = 0;
  if (!step_index_.find_stream_item("GenericParentRecordStream", idx, abs_offset, current_block_remaining_)) {
    values.clear();
    return false;
  }
  stream_.Seek(abs_offset);
  yardl::binary::ReadBlocksIntoVector<evo_test::GenericParentRecord<int32_t>, evo_test::binary::ReadGenericParentRecord<int32_t, yardl::binary::ReadInteger>>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

size_t ProtocolWithChangesIndexedReader::CountGenericParentRecordStreamImpl() {
  return step_index_.get_stream_count("GenericParentRecordStream");
}

void ProtocolWithChangesIndexedReader::ReadVectorRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges>& value) {
  auto pos = step_index_.get_step_offset("VectorRecordWithChanges");
  stream_.Seek(pos);
  yardl::binary::ReadVector<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, value);
}

bool ProtocolWithChangesIndexedReader::ReadStreamedRecordWithChangesImpl(evo_test::RecordWithChanges& value) {
  if (!step_index_.offset_within_stream("StreamedRecordWithChanges", std::nullopt, stream_.Pos())) {
    stream_.Seek(step_index_.get_step_offset("StreamedRecordWithChanges"));
  }
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesIndexedReader::ReadStreamedRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges>& values) {
  if (!step_index_.offset_within_stream("StreamedRecordWithChanges", std::nullopt, stream_.Pos())) {
    stream_.Seek(step_index_.get_step_offset("StreamedRecordWithChanges"));
  }
  yardl::binary::ReadBlocksIntoVector<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

bool ProtocolWithChangesIndexedReader::ReadStreamedRecordWithChangesImpl(evo_test::RecordWithChanges& value, size_t idx) {
  size_t abs_offset = 0;
  if (!step_index_.find_stream_item("StreamedRecordWithChanges", idx, abs_offset, current_block_remaining_)) {
    return false;
  }
  stream_.Seek(abs_offset);
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool ProtocolWithChangesIndexedReader::ReadStreamedRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges>& values, size_t idx) {
  size_t abs_offset = 0;
  if (!step_index_.find_stream_item("StreamedRecordWithChanges", idx, abs_offset, current_block_remaining_)) {
    values.clear();
    return false;
  }
  stream_.Seek(abs_offset);
  yardl::binary::ReadBlocksIntoVector<evo_test::RecordWithChanges, evo_test::binary::ReadRecordWithChanges>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

size_t ProtocolWithChangesIndexedReader::CountStreamedRecordWithChangesImpl() {
  return step_index_.get_stream_count("StreamedRecordWithChanges");
}

void ProtocolWithChangesIndexedReader::CloseImpl() {
}

void UnusedProtocolWriter::WriteRecordsImpl(evo_test::UnchangedRecord const& value) {
  yardl::binary::WriteBlock<evo_test::UnchangedRecord, evo_test::binary::WriteUnchangedRecord>(stream_, value);
}

void UnusedProtocolWriter::WriteRecordsImpl(std::vector<evo_test::UnchangedRecord> const& values) {
  if (!values.empty()) {
    yardl::binary::WriteVector<evo_test::UnchangedRecord, evo_test::binary::WriteUnchangedRecord>(stream_, values);
  }
}

void UnusedProtocolWriter::EndRecordsImpl() {
  yardl::binary::WriteInteger(stream_, 0U);
}

void UnusedProtocolWriter::Flush() {
  stream_.Flush();
}

void UnusedProtocolWriter::CloseImpl() {
  stream_.Flush();
}

bool UnusedProtocolReader::ReadRecordsImpl(evo_test::UnchangedRecord& value) {
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::UnchangedRecord, evo_test::binary::ReadUnchangedRecord>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool UnusedProtocolReader::ReadRecordsImpl(std::vector<evo_test::UnchangedRecord>& values) {
  yardl::binary::ReadBlocksIntoVector<evo_test::UnchangedRecord, evo_test::binary::ReadUnchangedRecord>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

void UnusedProtocolReader::CloseImpl() {
  stream_.VerifyFinished();
}

void UnusedProtocolIndexedWriter::WriteRecordsImpl(evo_test::UnchangedRecord const& value) {
  step_index_.set_step_offset("Records", stream_.Pos());
  size_t item_offset = 0;
  yardl::binary::WriteBlockAndSaveOffset<evo_test::UnchangedRecord, evo_test::binary::WriteUnchangedRecord>(stream_, value, item_offset);
  step_index_.add_stream_offset("Records", item_offset);
}

void UnusedProtocolIndexedWriter::WriteRecordsImpl(std::vector<evo_test::UnchangedRecord> const& values) {
  step_index_.set_step_offset("Records", stream_.Pos());
  std::vector<size_t> item_offsets;
  item_offsets.reserve(values.size());
  if (!values.empty()) {
    yardl::binary::WriteVectorAndSaveOffsets<evo_test::UnchangedRecord, evo_test::binary::WriteUnchangedRecord>(stream_, values, item_offsets);
  }
  step_index_.add_stream_offsets("Records", item_offsets);
}

void UnusedProtocolIndexedWriter::EndRecordsImpl() {
  step_index_.set_step_offset("Records", stream_.Pos());
  step_index_.add_stream_offsets("Records", std::vector<size_t>{});
  yardl::binary::WriteInteger(stream_, 0U);
}

void UnusedProtocolIndexedWriter::Flush() {
  stream_.Flush();
}

void UnusedProtocolIndexedWriter::CloseImpl() {
  yardl::binary::WriteIndex(stream_, step_index_);
  stream_.Flush();
}

bool UnusedProtocolIndexedReader::ReadRecordsImpl(evo_test::UnchangedRecord& value) {
  if (!step_index_.offset_within_stream("Records", std::nullopt, stream_.Pos())) {
    stream_.Seek(step_index_.get_step_offset("Records"));
  }
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::UnchangedRecord, evo_test::binary::ReadUnchangedRecord>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool UnusedProtocolIndexedReader::ReadRecordsImpl(std::vector<evo_test::UnchangedRecord>& values) {
  if (!step_index_.offset_within_stream("Records", std::nullopt, stream_.Pos())) {
    stream_.Seek(step_index_.get_step_offset("Records"));
  }
  yardl::binary::ReadBlocksIntoVector<evo_test::UnchangedRecord, evo_test::binary::ReadUnchangedRecord>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

bool UnusedProtocolIndexedReader::ReadRecordsImpl(evo_test::UnchangedRecord& value, size_t idx) {
  size_t abs_offset = 0;
  if (!step_index_.find_stream_item("Records", idx, abs_offset, current_block_remaining_)) {
    return false;
  }
  stream_.Seek(abs_offset);
  bool read_block_successful = false;
  read_block_successful = yardl::binary::ReadBlock<evo_test::UnchangedRecord, evo_test::binary::ReadUnchangedRecord>(stream_, current_block_remaining_, value);
  return read_block_successful;
}

bool UnusedProtocolIndexedReader::ReadRecordsImpl(std::vector<evo_test::UnchangedRecord>& values, size_t idx) {
  size_t abs_offset = 0;
  if (!step_index_.find_stream_item("Records", idx, abs_offset, current_block_remaining_)) {
    values.clear();
    return false;
  }
  stream_.Seek(abs_offset);
  yardl::binary::ReadBlocksIntoVector<evo_test::UnchangedRecord, evo_test::binary::ReadUnchangedRecord>(stream_, current_block_remaining_, values);
  return current_block_remaining_ != 0;
}

size_t UnusedProtocolIndexedReader::CountRecordsImpl() {
  return step_index_.get_stream_count("Records");
}

void UnusedProtocolIndexedReader::CloseImpl() {
}

} // namespace evo_test::binary


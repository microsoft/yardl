// This file was generated by the "yardl" tool. DO NOT EDIT.

#include "protocols.h"

#include "../yardl/detail/hdf5/io.h"
#include "../yardl/detail/hdf5/ddl.h"
#include "../yardl/detail/hdf5/inner_types.h"

namespace evo_test::hdf5 {
namespace {
struct _Inner_Header {
  _Inner_Header() {} 
  _Inner_Header(evo_test::Header const& o) 
      : subject(o.subject),
      weight(o.weight),
      meta(o.meta) {
  }

  void ToOuter (evo_test::Header& o) const {
    yardl::hdf5::ToOuter(subject, o.subject);
    yardl::hdf5::ToOuter(weight, o.weight);
    yardl::hdf5::ToOuter(meta, o.meta);
  }

  yardl::hdf5::InnerVlenString subject;
  int64_t weight;
  yardl::hdf5::InnerMap<yardl::hdf5::InnerVlenString, std::string, yardl::hdf5::InnerVlen<yardl::hdf5::InnerVlenString, std::string>, std::vector<std::string>> meta;
};

struct _Inner_Sample {
  _Inner_Sample() {} 
  _Inner_Sample(evo_test::Sample const& o) 
      : data(o.data),
      timestamp(o.timestamp) {
  }

  void ToOuter (evo_test::Sample& o) const {
    yardl::hdf5::ToOuter(data, o.data);
    yardl::hdf5::ToOuter(timestamp, o.timestamp);
  }

  yardl::hdf5::InnerVlen<int32_t, int32_t> data;
  yardl::DateTime timestamp;
};

struct _Inner_Signature {
  _Inner_Signature() {} 
  _Inner_Signature(evo_test::Signature const& o) 
      : name(o.name),
      email(o.email),
      number(o.number) {
  }

  void ToOuter (evo_test::Signature& o) const {
    yardl::hdf5::ToOuter(name, o.name);
    yardl::hdf5::ToOuter(email, o.email);
    yardl::hdf5::ToOuter(number, o.number);
  }

  yardl::hdf5::InnerVlenString name;
  yardl::hdf5::InnerVlenString email;
  int64_t number;
};

struct _Inner_Footer {
  _Inner_Footer() {} 
  _Inner_Footer(evo_test::Footer const& o) 
      : signature(o.signature) {
  }

  void ToOuter (evo_test::Footer& o) const {
    yardl::hdf5::ToOuter(signature, o.signature);
  }

  evo_test::hdf5::_Inner_Signature signature;
};

struct _Inner_UnusedRecord {
  _Inner_UnusedRecord() {} 
  _Inner_UnusedRecord(evo_test::UnusedRecord const& o) 
      : subject(o.subject) {
  }

  void ToOuter (evo_test::UnusedRecord& o) const {
    yardl::hdf5::ToOuter(subject, o.subject);
  }

  yardl::hdf5::InnerVlenString subject;
};

[[maybe_unused]] H5::CompType GetHeaderHdf5Ddl() {
  using RecordType = evo_test::hdf5::_Inner_Header;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("subject", HOFFSET(RecordType, subject), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("weight", HOFFSET(RecordType, weight), H5::PredType::NATIVE_INT64);
  t.insertMember("meta", HOFFSET(RecordType, meta), yardl::hdf5::InnerMapDdl<yardl::hdf5::InnerVlenString, yardl::hdf5::InnerVlen<yardl::hdf5::InnerVlenString, std::string>>(yardl::hdf5::InnerVlenStringDdl(), yardl::hdf5::InnerVlenDdl(yardl::hdf5::InnerVlenStringDdl())));
  return t;
}

[[maybe_unused]] H5::CompType GetSampleHdf5Ddl() {
  using RecordType = evo_test::hdf5::_Inner_Sample;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("data", HOFFSET(RecordType, data), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32));
  t.insertMember("timestamp", HOFFSET(RecordType, timestamp), yardl::hdf5::DateTimeTypeDdl());
  return t;
}

[[maybe_unused]] H5::CompType GetSignatureHdf5Ddl() {
  using RecordType = evo_test::hdf5::_Inner_Signature;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("name", HOFFSET(RecordType, name), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("email", HOFFSET(RecordType, email), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("number", HOFFSET(RecordType, number), H5::PredType::NATIVE_INT64);
  return t;
}

[[maybe_unused]] H5::CompType GetFooterHdf5Ddl() {
  using RecordType = evo_test::hdf5::_Inner_Footer;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("signature", HOFFSET(RecordType, signature), evo_test::hdf5::GetSignatureHdf5Ddl());
  return t;
}

[[maybe_unused]] H5::CompType GetUnusedRecordHdf5Ddl() {
  using RecordType = evo_test::hdf5::_Inner_UnusedRecord;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("subject", HOFFSET(RecordType, subject), yardl::hdf5::InnerVlenStringDdl());
  return t;
}

} // namespace 

MyProtocolWriter::MyProtocolWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "MyProtocol", schema_) {
}

void MyProtocolWriter::WriteHeaderImpl(evo_test::Header const& value) {
  yardl::hdf5::WriteScalarDataset<evo_test::hdf5::_Inner_Header, evo_test::Header>(group_, "header", evo_test::hdf5::GetHeaderHdf5Ddl(), value);
}

void MyProtocolWriter::WriteIdImpl(int64_t const& value) {
  yardl::hdf5::WriteScalarDataset<int64_t, int64_t>(group_, "id", H5::PredType::NATIVE_INT64, value);
}

void MyProtocolWriter::WriteSamplesImpl(evo_test::Sample const& value) {
  if (!samples_dataset_state_) {
    samples_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "samples", evo_test::hdf5::GetSampleHdf5Ddl(), std::max(sizeof(evo_test::hdf5::_Inner_Sample), sizeof(evo_test::Sample)));
  }

  samples_dataset_state_->Append<evo_test::hdf5::_Inner_Sample, evo_test::Sample>(value);
}

void MyProtocolWriter::WriteSamplesImpl(std::vector<evo_test::Sample> const& values) {
  if (!samples_dataset_state_) {
    samples_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "samples", evo_test::hdf5::GetSampleHdf5Ddl(), std::max(sizeof(evo_test::hdf5::_Inner_Sample), sizeof(evo_test::Sample)));
  }

  samples_dataset_state_->AppendBatch<evo_test::hdf5::_Inner_Sample, evo_test::Sample>(values);
}

void MyProtocolWriter::EndSamplesImpl() {
  if (!samples_dataset_state_) {
    samples_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "samples", evo_test::hdf5::GetSampleHdf5Ddl(), std::max(sizeof(evo_test::hdf5::_Inner_Sample), sizeof(evo_test::Sample)));
  }

  samples_dataset_state_.reset();
}

void MyProtocolWriter::WriteFooterImpl(std::optional<evo_test::Footer> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerOptional<evo_test::hdf5::_Inner_Footer, evo_test::Footer>, std::optional<evo_test::Footer>>(group_, "footer", yardl::hdf5::OptionalTypeDdl<evo_test::hdf5::_Inner_Footer, evo_test::Footer>(evo_test::hdf5::GetFooterHdf5Ddl()), value);
}

MyProtocolReader::MyProtocolReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "MyProtocol", schema_) {
}

void MyProtocolReader::ReadHeaderImpl(evo_test::Header& value) {
  yardl::hdf5::ReadScalarDataset<evo_test::hdf5::_Inner_Header, evo_test::Header>(group_, "header", evo_test::hdf5::GetHeaderHdf5Ddl(), value);
}

void MyProtocolReader::ReadIdImpl(int64_t& value) {
  yardl::hdf5::ReadScalarDataset<int64_t, int64_t>(group_, "id", H5::PredType::NATIVE_INT64, value);
}

bool MyProtocolReader::ReadSamplesImpl(evo_test::Sample& value) {
  if (!samples_dataset_state_) {
    samples_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "samples", evo_test::hdf5::GetSampleHdf5Ddl(), std::max(sizeof(evo_test::hdf5::_Inner_Sample), sizeof(evo_test::Sample)));
  }

  bool has_value = samples_dataset_state_->Read<evo_test::hdf5::_Inner_Sample, evo_test::Sample>(value);
  if (!has_value) {
    samples_dataset_state_.reset();
  }

  return has_value;
}

bool MyProtocolReader::ReadSamplesImpl(std::vector<evo_test::Sample>& values) {
  if (!samples_dataset_state_) {
    samples_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "samples", evo_test::hdf5::GetSampleHdf5Ddl());
  }

  bool has_more = samples_dataset_state_->ReadBatch<evo_test::hdf5::_Inner_Sample, evo_test::Sample>(values);
  if (!has_more) {
    samples_dataset_state_.reset();
  }

  return has_more;
}

void MyProtocolReader::ReadFooterImpl(std::optional<evo_test::Footer>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerOptional<evo_test::hdf5::_Inner_Footer, evo_test::Footer>, std::optional<evo_test::Footer>>(group_, "footer", yardl::hdf5::OptionalTypeDdl<evo_test::hdf5::_Inner_Footer, evo_test::Footer>(evo_test::hdf5::GetFooterHdf5Ddl()), value);
}

} // namespace evo_test::hdf5


% This file was generated by the "yardl" tool. DO NOT EDIT.

% Abstract writer for protocol NDArrays
classdef (Abstract) NDArraysWriterBase < handle
  properties (Access=protected)
    state_
  end

  methods
    function self = NDArraysWriterBase()
      self.state_ = 0;
    end

    function close(self)
      self.close_();
      if self.state_ ~= 5
        expected_method = self.state_to_method_name_(self.state_);
        throw(yardl.ProtocolError("Protocol writer closed before all steps were called. Expected call to '%s'.", expected_method));
      end
    end

    % Ordinal 0
    function write_ints(self, value)
      if self.state_ ~= 0
        self.raise_unexpected_state_(0);
      end

      self.write_ints_(value);
      self.state_ = 1;
    end

    % Ordinal 1
    function write_simple_record_array(self, value)
      if self.state_ ~= 1
        self.raise_unexpected_state_(1);
      end

      self.write_simple_record_array_(value);
      self.state_ = 2;
    end

    % Ordinal 2
    function write_record_with_vlens_array(self, value)
      if self.state_ ~= 2
        self.raise_unexpected_state_(2);
      end

      self.write_record_with_vlens_array_(value);
      self.state_ = 3;
    end

    % Ordinal 3
    function write_record_with_nd_arrays(self, value)
      if self.state_ ~= 3
        self.raise_unexpected_state_(3);
      end

      self.write_record_with_nd_arrays_(value);
      self.state_ = 4;
    end

    % Ordinal 4
    function write_named_array(self, value)
      if self.state_ ~= 4
        self.raise_unexpected_state_(4);
      end

      self.write_named_array_(value);
      self.state_ = 5;
    end
  end

  methods (Static)
    function res = schema()
      res = string('{"protocol":{"name":"NDArrays","sequence":[{"name":"ints","type":{"array":{"items":"int32","dimensions":2}}},{"name":"simpleRecordArray","type":{"array":{"items":"TestModel.SimpleRecord","dimensions":2}}},{"name":"recordWithVlensArray","type":{"array":{"items":"TestModel.RecordWithVlens","dimensions":2}}},{"name":"recordWithNDArrays","type":"TestModel.RecordWithNDArrays"},{"name":"namedArray","type":"TestModel.NamedNDArray"}]},"types":[{"name":"NamedNDArray","type":{"array":{"items":"int32","dimensions":[{"name":"dimA"},{"name":"dimB"}]}}},{"name":"RecordWithNDArrays","fields":[{"name":"ints","type":{"array":{"items":"int32","dimensions":2}}},{"name":"fixedSimpleRecordArray","type":{"array":{"items":"TestModel.SimpleRecord","dimensions":2}}},{"name":"fixedRecordWithVlensArray","type":{"array":{"items":"TestModel.RecordWithVlens","dimensions":2}}}]},{"name":"RecordWithVlens","fields":[{"name":"a","type":{"vector":{"items":"TestModel.SimpleRecord"}}},{"name":"b","type":"int32"},{"name":"c","type":"int32"}]},{"name":"SimpleRecord","fields":[{"name":"x","type":"int32"},{"name":"y","type":"int32"},{"name":"z","type":"int32"}]}]}');
    end
  end

  methods (Abstract, Access=protected)
    write_ints_(self, value)
    write_simple_record_array_(self, value)
    write_record_with_vlens_array_(self, value)
    write_record_with_nd_arrays_(self, value)
    write_named_array_(self, value)

    end_stream_(self)
    close_(self)
  end

  methods (Access=private)
    function raise_unexpected_state_(self, actual)
      expected_method = self.state_to_method_name_(self.state_);
      actual_method = self.state_to_method_name_(actual);
      throw(yardl.ProtocolError("Expected call to '%s' but received call to '%s'", expected_method, actual_method));
    end

    function name = state_to_method_name_(self, state)
      if state == 0
        name = "write_ints";
      elseif state == 1
        name = "write_simple_record_array";
      elseif state == 2
        name = "write_record_with_vlens_array";
      elseif state == 3
        name = "write_record_with_nd_arrays";
      elseif state == 4
        name = "write_named_array";
      else
        name = '<unknown>';
      end
    end
  end
end

# This file was generated by the "yardl" tool. DO NOT EDIT.


import dataclasses
import datetime
import enum
import types
import typing
import numpy as np
import numpy.typing as npt
from . import yardl_types as yardl
from . import _dtypes

T = typing.TypeVar('T')
T_NP = typing.TypeVar('T_NP', bound=np.generic)

@dataclasses.dataclass(slots=True, kw_only=True)
class PT(typing.Generic[T]):
    x: T
    y: T
    z: yardl.Int32 = 0


MyString = str

@dataclasses.dataclass(slots=True, kw_only=True)
class PInt:
    x: yardl.Int32 = 0

    y: yardl.Int32 = 0


@dataclasses.dataclass(slots=True, kw_only=True)
class WithUnion:
    f: yardl.Int32 | yardl.Float32 | MyString | PInt | dict[str, yardl.Int32] | None = None


def _mk_get_dtype():
    dtype_map: dict[type | types.GenericAlias, np.dtype[typing.Any] | typing.Callable[[tuple[type, ...]], np.dtype[typing.Any]]] = {}
    get_dtype = _dtypes.make_get_dtype_func(dtype_map)

    dtype_map[PT] = lambda type_args: np.dtype([('x', get_dtype(type_args[0])), ('y', get_dtype(type_args[0])), ('z', np.dtype(np.int32))], align=True)
    dtype_map[MyString] = np.dtype(np.object_)
    dtype_map[PInt] = np.dtype([('x', np.dtype(np.int32)), ('y', np.dtype(np.int32))], align=True)
    dtype_map[WithUnion] = np.dtype([('f', np.dtype(np.object_))], align=True)

    return get_dtype

get_dtype = _mk_get_dtype()


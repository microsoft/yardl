// This file was generated by the "yardl" tool. DO NOT EDIT.

#pragma once
#include <array>
#include <complex>
#include <memory>
#include <optional>
#include <variant>
#include <vector>

#include "../yardl/detail/binary/reader_writer.h"
#include "../protocols.h"
#include "../types.h"

namespace evo_test::binary {
// Binary writer for the MyProtocol protocol.
class MyProtocolWriter : public evo_test::MyProtocolWriterBase, yardl::binary::BinaryWriter {
  public:
  MyProtocolWriter(std::ostream& stream, const std::string& schema=schema_)
      : yardl::binary::BinaryWriter(stream, schema, schema_, previous_schemas_) {
  }

  MyProtocolWriter(std::string file_name, const std::string& schema=schema_)
      : yardl::binary::BinaryWriter(file_name, schema, schema_, previous_schemas_) {
  }

  void Flush() override;

  protected:
  void WriteHeaderImpl(evo_test::Header const& value) override;
  void WriteIdImpl(std::string const& value) override;
  void WriteSamplesImpl(evo_test::Sample const& value) override;
  void WriteSamplesImpl(std::vector<evo_test::Sample> const& values) override;
  void EndSamplesImpl() override;
  void WriteMaybeImpl(std::optional<std::string> const& value) override;
  void WriteFooterImpl(std::optional<evo_test::Footer> const& value) override;
  void CloseImpl() override;
};

// Binary reader for the MyProtocol protocol.
class MyProtocolReader : public evo_test::MyProtocolReaderBase, yardl::binary::BinaryReader {
  public:
  MyProtocolReader(std::istream& stream)
      : yardl::binary::BinaryReader(stream, schema_, previous_schemas_) {
  }

  MyProtocolReader(std::string file_name)
      : yardl::binary::BinaryReader(file_name, schema_, previous_schemas_) {
  }

  std::string GetSchema() { if (schema_index_ < 0) { return schema_; } else { return previous_schemas_[schema_index_]; } }

  protected:
  void ReadHeaderImpl(evo_test::Header& value) override;
  void ReadIdImpl(std::string& value) override;
  bool ReadSamplesImpl(evo_test::Sample& value) override;
  bool ReadSamplesImpl(std::vector<evo_test::Sample>& values) override;
  void ReadMaybeImpl(std::optional<std::string>& value) override;
  void ReadFooterImpl(std::optional<evo_test::Footer>& value) override;
  void CloseImpl() override;

  private:
  size_t current_block_remaining_ = 0;
};

// Binary writer for the NewProtocol protocol.
class NewProtocolWriter : public evo_test::NewProtocolWriterBase, yardl::binary::BinaryWriter {
  public:
  NewProtocolWriter(std::ostream& stream, const std::string& schema=schema_)
      : yardl::binary::BinaryWriter(stream, schema, schema_, previous_schemas_) {
  }

  NewProtocolWriter(std::string file_name, const std::string& schema=schema_)
      : yardl::binary::BinaryWriter(file_name, schema, schema_, previous_schemas_) {
  }

  void Flush() override;

  protected:
  void WriteCalibrationImpl(std::vector<double> const& value) override;
  void WriteDataImpl(evo_test::NewRecord const& value) override;
  void WriteDataImpl(std::vector<evo_test::NewRecord> const& values) override;
  void EndDataImpl() override;
  void CloseImpl() override;
};

// Binary reader for the NewProtocol protocol.
class NewProtocolReader : public evo_test::NewProtocolReaderBase, yardl::binary::BinaryReader {
  public:
  NewProtocolReader(std::istream& stream)
      : yardl::binary::BinaryReader(stream, schema_, previous_schemas_) {
  }

  NewProtocolReader(std::string file_name)
      : yardl::binary::BinaryReader(file_name, schema_, previous_schemas_) {
  }

  std::string GetSchema() { if (schema_index_ < 0) { return schema_; } else { return previous_schemas_[schema_index_]; } }

  protected:
  void ReadCalibrationImpl(std::vector<double>& value) override;
  bool ReadDataImpl(evo_test::NewRecord& value) override;
  bool ReadDataImpl(std::vector<evo_test::NewRecord>& values) override;
  void CloseImpl() override;

  private:
  size_t current_block_remaining_ = 0;
};

} // namespace evo_test::binary

% This file was generated by the "yardl" tool. DO NOT EDIT.

% Abstract writer for protocol AdvancedGenerics
classdef (Abstract) AdvancedGenericsWriterBase < handle
  properties (Access=protected)
    state_
  end

  methods
    function self = AdvancedGenericsWriterBase()
      self.state_ = 0;
    end

    function close(self)
      self.close_();
      if self.state_ ~= 5
        expected_method = self.state_to_method_name_(self.state_);
        throw(yardl.ProtocolError("Protocol writer closed before all steps were called. Expected call to '%s'.", expected_method));
      end
    end

    % Ordinal 0
    function write_float_image_image(self, value)
      if self.state_ ~= 0
        self.raise_unexpected_state_(0);
      end

      self.write_float_image_image_(value);
      self.state_ = 1;
    end

    % Ordinal 1
    function write_generic_record_1(self, value)
      if self.state_ ~= 1
        self.raise_unexpected_state_(1);
      end

      self.write_generic_record_1_(value);
      self.state_ = 2;
    end

    % Ordinal 2
    function write_tuple_of_optionals(self, value)
      if self.state_ ~= 2
        self.raise_unexpected_state_(2);
      end

      self.write_tuple_of_optionals_(value);
      self.state_ = 3;
    end

    % Ordinal 3
    function write_tuple_of_optionals_alternate_syntax(self, value)
      if self.state_ ~= 3
        self.raise_unexpected_state_(3);
      end

      self.write_tuple_of_optionals_alternate_syntax_(value);
      self.state_ = 4;
    end

    % Ordinal 4
    function write_tuple_of_vectors(self, value)
      if self.state_ ~= 4
        self.raise_unexpected_state_(4);
      end

      self.write_tuple_of_vectors_(value);
      self.state_ = 5;
    end
  end

  methods (Static)
    function res = schema()
      res = string('{"protocol":{"name":"AdvancedGenerics","sequence":[{"name":"floatImageImage","type":{"name":"TestModel.Image","typeArguments":[{"name":"TestModel.Image","typeArguments":["float32"]}]}},{"name":"genericRecord1","type":{"name":"TestModel.GenericRecord","typeArguments":["int32","string"]}},{"name":"tupleOfOptionals","type":{"name":"TestModel.MyTuple","typeArguments":[[null,"int32"],[null,"string"]]}},{"name":"tupleOfOptionalsAlternateSyntax","type":{"name":"TestModel.MyTuple","typeArguments":[[null,"int32"],[null,"string"]]}},{"name":"tupleOfVectors","type":{"name":"TestModel.MyTuple","typeArguments":[{"vector":{"items":"int32"}},{"vector":{"items":"float32"}}]}}]},"types":[{"name":"MyTuple","typeParameters":["T1","T2"],"type":{"name":"Tuples.Tuple","typeArguments":["T1","T2"]}},{"name":"Image","typeParameters":["T"],"type":{"array":{"items":"T","dimensions":[{"name":"x"},{"name":"y"}]}}},{"name":"GenericRecord","typeParameters":["T1","T2"],"fields":[{"name":"scalar1","type":"T1"},{"name":"scalar2","type":"T2"},{"name":"vector1","type":{"vector":{"items":"T1"}}},{"name":"image2","type":{"name":"TestModel.Image","typeArguments":["T2"]}}]},{"name":"Image","typeParameters":["T"],"type":{"name":"Image.Image","typeArguments":["T"]}},{"name":"MyTuple","typeParameters":["T1","T2"],"type":{"name":"BasicTypes.MyTuple","typeArguments":["T1","T2"]}},{"name":"Tuple","typeParameters":["T1","T2"],"fields":[{"name":"v1","type":"T1"},{"name":"v2","type":"T2"}]}]}');
    end
  end

  methods (Abstract, Access=protected)
    write_float_image_image_(self, value)
    write_generic_record_1_(self, value)
    write_tuple_of_optionals_(self, value)
    write_tuple_of_optionals_alternate_syntax_(self, value)
    write_tuple_of_vectors_(self, value)

    end_stream_(self)
    close_(self)
  end

  methods (Access=private)
    function raise_unexpected_state_(self, actual)
      expected_method = self.state_to_method_name_(self.state_);
      actual_method = self.state_to_method_name_(actual);
      throw(yardl.ProtocolError("Expected call to '%s' but received call to '%s'", expected_method, actual_method));
    end

    function name = state_to_method_name_(self, state)
      if state == 0
        name = "write_float_image_image";
      elseif state == 1
        name = "write_generic_record_1";
      elseif state == 2
        name = "write_tuple_of_optionals";
      elseif state == 3
        name = "write_tuple_of_optionals_alternate_syntax";
      elseif state == 4
        name = "write_tuple_of_vectors";
      else
        name = '<unknown>';
      end
    end
  end
end

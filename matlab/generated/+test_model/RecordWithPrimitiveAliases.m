% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef RecordWithPrimitiveAliases < handle
  properties
    byte_field
    int_field
    uint_field
    long_field
    ulong_field
    float_field
    double_field
    complexfloat_field
    complexdouble_field
  end

  methods
    function self = RecordWithPrimitiveAliases(kwargs)
      arguments
        kwargs.byte_field = uint8(0);
        kwargs.int_field = int32(0);
        kwargs.uint_field = uint32(0);
        kwargs.long_field = int64(0);
        kwargs.ulong_field = uint64(0);
        kwargs.float_field = single(0);
        kwargs.double_field = double(0);
        kwargs.complexfloat_field = complex(single(0));
        kwargs.complexdouble_field = complex(0);
      end
      self.byte_field = kwargs.byte_field;
      self.int_field = kwargs.int_field;
      self.uint_field = kwargs.uint_field;
      self.long_field = kwargs.long_field;
      self.ulong_field = kwargs.ulong_field;
      self.float_field = kwargs.float_field;
      self.double_field = kwargs.double_field;
      self.complexfloat_field = kwargs.complexfloat_field;
      self.complexdouble_field = kwargs.complexdouble_field;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "test_model.RecordWithPrimitiveAliases") && ...
        isequal({self.byte_field}, {other.byte_field}) && ...
        isequal({self.int_field}, {other.int_field}) && ...
        isequal({self.uint_field}, {other.uint_field}) && ...
        isequal({self.long_field}, {other.long_field}) && ...
        isequal({self.ulong_field}, {other.ulong_field}) && ...
        isequal({self.float_field}, {other.float_field}) && ...
        isequal({self.double_field}, {other.double_field}) && ...
        isequal({self.complexfloat_field}, {other.complexfloat_field}) && ...
        isequal({self.complexdouble_field}, {other.complexdouble_field});
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end

    function res = isequal(self, other)
      res = all(eq(self, other));
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = test_model.RecordWithPrimitiveAliases();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end

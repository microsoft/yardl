# This file was generated by the "yardl" tool. DO NOT EDIT.

# pyright: reportUnusedImport=false
# pyright: reportUnknownArgumentType=false
# pyright: reportUnknownMemberType=false
# pyright: reportUnknownVariableType=false

import datetime
import enum
import types
import typing

import numpy as np
import numpy.typing as npt

from . import yardl_types as yardl
from . import _dtypes


class Header:
    subject: str

    def __init__(self, *,
        subject: str = "",
    ):
        self.subject = subject

    def __eq__(self, other: object) -> bool:
        return (
            isinstance(other, Header)
            and self.subject == other.subject
        )

    def __str__(self) -> str:
        return f"Header(subject={self.subject})"

    def __repr__(self) -> str:
        return f"Header(subject={repr(self.subject)})"


class Sample:
    id: yardl.UInt32
    data: npt.NDArray[np.int32]

    def __init__(self, *,
        id: yardl.UInt32 = 0,
        data: typing.Optional[npt.NDArray[np.int32]] = None,
    ):
        self.id = id
        self.data = data if data is not None else np.zeros((0), dtype=np.dtype(np.int32))

    def __eq__(self, other: object) -> bool:
        return (
            isinstance(other, Sample)
            and self.id == other.id
            and yardl.structural_equal(self.data, other.data)
        )

    def __str__(self) -> str:
        return f"Sample(id={self.id}, data={self.data})"

    def __repr__(self) -> str:
        return f"Sample(id={repr(self.id)}, data={repr(self.data)})"


def _mk_get_dtype():
    dtype_map: dict[typing.Union[type, types.GenericAlias], typing.Union[np.dtype[typing.Any], typing.Callable[[tuple[type, ...]], np.dtype[typing.Any]]]] = {}
    get_dtype = _dtypes.make_get_dtype_func(dtype_map)

    dtype_map.setdefault(Header, np.dtype([('subject', np.dtype(np.object_))], align=True))
    dtype_map.setdefault(Sample, np.dtype([('id', np.dtype(np.uint32)), ('data', np.dtype(np.object_))], align=True))

    return get_dtype

get_dtype = _mk_get_dtype()


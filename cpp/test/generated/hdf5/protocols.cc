// This file was generated by the "yardl" tool. DO NOT EDIT.

#include "protocols.h"

#include "../yardl/detail/hdf5/io.h"
#include "../yardl/detail/hdf5/ddl.h"
#include "../yardl/detail/hdf5/inner_types.h"

namespace {
template <typename TInner0, typename TOuter0, typename TInner1, typename TOuter1>
class InnerUnion2 {
  public:
  InnerUnion2() : type_index_(-1) {} 
  InnerUnion2(std::variant<TOuter0, TOuter1> const& v) : type_index_(static_cast<int8_t>(v.index())) {
    Init(v);
  }

  InnerUnion2(std::variant<std::monostate, TOuter0, TOuter1> const& v) : type_index_(static_cast<int8_t>(v.index()) - 1) {
    Init(v);
  }

  InnerUnion2(InnerUnion2 const& v) = delete;

  InnerUnion2 operator=(InnerUnion2 const&) = delete;

  ~InnerUnion2() {
    switch (type_index_) {
    case 0:
      value0_.~TInner0();
      break;
    case 1:
      value1_.~TInner1();
      break;
    }
  }

  void ToOuter(std::variant<TOuter0, TOuter1>& o) const {
    ToOuterImpl(o);
  }

  void ToOuter(std::variant<std::monostate, TOuter0, TOuter1>& o) const {
    ToOuterImpl(o);
  }

  int8_t type_index_;
  union {
    char empty0_[sizeof(TInner0)]{};
    TInner0 value0_;
  };
  union {
    char empty1_[sizeof(TInner1)]{};
    TInner1 value1_;
  };

  private:
  template <typename T>
  void Init(T const& v) {
    constexpr size_t offset = GetOuterVariantOffset<std::remove_const_t<std::remove_reference_t<decltype(v)>>>();
    switch (type_index_) {
    case 0:
      new (&value0_) TInner0(std::get<0 + offset>(v));
      return;
    case 1:
      new (&value1_) TInner1(std::get<1 + offset>(v));
      return;
    }
  }

  template <typename TVariant>
  void ToOuterImpl(TVariant& o) const {
    constexpr size_t offset = GetOuterVariantOffset<TVariant>();
    switch (type_index_) {
    case -1:
      if constexpr (offset == 1) {
        o.template emplace<0>(std::monostate{});
        return;
      }
    case 0:
      o.template emplace<0 + offset>();
      yardl::hdf5::ToOuter(value0_, std::get<0 + offset>(o));
      return;
    case 1:
      o.template emplace<1 + offset>();
      yardl::hdf5::ToOuter(value1_, std::get<1 + offset>(o));
      return;
    }
    throw std::runtime_error("unrecognized type variant type index " + std::to_string(type_index_));
  }

  template <typename TVariant>
  static constexpr size_t GetOuterVariantOffset() {
    constexpr bool has_monostate = std::is_same_v<std::monostate, std::variant_alternative_t<0, TVariant>>;
    if constexpr (has_monostate) {
      return 1;
    }
      return 0;
  }
};

template <typename TInner0, typename TOuter0, typename TInner1, typename TOuter1>
H5::CompType InnerUnion2Ddl(bool nullable, H5::DataType const& t0, std::string const& label0, H5::DataType const& t1, std::string const& label1) {
  using UnionType = ::InnerUnion2<TInner0, TOuter0, TInner1, TOuter1>;
  H5::CompType rtn(sizeof(UnionType));
  rtn.insertMember("$type", HOFFSET(UnionType, type_index_), yardl::hdf5::UnionTypeEnumDdl(nullable, label0, label1));
  rtn.insertMember(label0, HOFFSET(UnionType, value0_), t0);
  rtn.insertMember(label1, HOFFSET(UnionType, value1_), t1);
  return rtn;
}
}

namespace test_model::hdf5 {
namespace {
[[maybe_unused]] H5::EnumType GetFruitsHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_INT32);
  int32_t i = 0;
  t.insert("apple", &i);
  i = 1;
  t.insert("banana", &i);
  i = 2;
  t.insert("pear", &i);
  return t;
};

[[maybe_unused]] H5::EnumType GetUInt64EnumHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_UINT64);
  uint64_t i = 9223372036854775808ULL;
  t.insert("a", &i);
  return t;
};

[[maybe_unused]] H5::EnumType GetInt64EnumHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_INT64);
  int64_t i = -4611686018427387904LL;
  t.insert("b", &i);
  return t;
};

[[maybe_unused]] H5::EnumType GetSizeBasedEnumHdf5Ddl() {
  H5::EnumType t(yardl::hdf5::SizeTypeDdl());
  yardl::Size i = 0ULL;
  t.insert("a", &i);
  i = 1ULL;
  t.insert("b", &i);
  i = 2ULL;
  t.insert("c", &i);
  return t;
};

[[maybe_unused]] H5::EnumType GetEnumWithKeywordSymbolsHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_INT32);
  int32_t i = 2;
  t.insert("try", &i);
  i = 1;
  t.insert("catch", &i);
  return t;
};

struct _Inner_SimpleEncodingCounters {
  _Inner_SimpleEncodingCounters() {} 
  _Inner_SimpleEncodingCounters(test_model::SimpleEncodingCounters const& o) 
      : e1(o.e1),
      e2(o.e2),
      slice(o.slice),
      repetition(o.repetition) {
  }

  void ToOuter (test_model::SimpleEncodingCounters& o) const {
    yardl::hdf5::ToOuter(e1, o.e1);
    yardl::hdf5::ToOuter(e2, o.e2);
    yardl::hdf5::ToOuter(slice, o.slice);
    yardl::hdf5::ToOuter(repetition, o.repetition);
  }

  yardl::hdf5::InnerOptional<uint32_t, uint32_t> e1;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> e2;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> slice;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> repetition;
};

struct _Inner_SimpleAcquisition {
  _Inner_SimpleAcquisition() {} 
  _Inner_SimpleAcquisition(test_model::SimpleAcquisition const& o) 
      : flags(o.flags),
      idx(o.idx),
      data(o.data),
      trajectory(o.trajectory) {
  }

  void ToOuter (test_model::SimpleAcquisition& o) const {
    yardl::hdf5::ToOuter(flags, o.flags);
    yardl::hdf5::ToOuter(idx, o.idx);
    yardl::hdf5::ToOuter(data, o.data);
    yardl::hdf5::ToOuter(trajectory, o.trajectory);
  }

  uint64_t flags;
  test_model::hdf5::_Inner_SimpleEncodingCounters idx;
  yardl::hdf5::InnerNdArray<std::complex<float>, std::complex<float>, 2> data;
  yardl::hdf5::InnerNdArray<float, float, 2> trajectory;
};

struct _Inner_RecordWithVectors {
  _Inner_RecordWithVectors() {} 
  _Inner_RecordWithVectors(test_model::RecordWithVectors const& o) 
      : default_vector(o.default_vector),
      default_vector_fixed_length(o.default_vector_fixed_length),
      vector_of_vectors(o.vector_of_vectors) {
  }

  void ToOuter (test_model::RecordWithVectors& o) const {
    yardl::hdf5::ToOuter(default_vector, o.default_vector);
    yardl::hdf5::ToOuter(default_vector_fixed_length, o.default_vector_fixed_length);
    yardl::hdf5::ToOuter(vector_of_vectors, o.vector_of_vectors);
  }

  yardl::hdf5::InnerVlen<int32_t, int32_t> default_vector;
  std::array<int32_t, 3> default_vector_fixed_length;
  yardl::hdf5::InnerVlen<std::array<int32_t, 2>, std::array<int32_t, 2>> vector_of_vectors;
};

struct _Inner_RecordWithArrays {
  _Inner_RecordWithArrays() {} 
  _Inner_RecordWithArrays(test_model::RecordWithArrays const& o) 
      : default_array(o.default_array),
      default_array_with_empty_dimension(o.default_array_with_empty_dimension),
      rank1_array(o.rank1_array),
      rank2_array(o.rank2_array),
      rank2_array_with_named_dimensions(o.rank2_array_with_named_dimensions),
      rank2_fixed_array(o.rank2_fixed_array),
      rank2_fixed_array_with_named_dimensions(o.rank2_fixed_array_with_named_dimensions),
      dynamic_array(o.dynamic_array),
      array_of_vectors(o.array_of_vectors) {
  }

  void ToOuter (test_model::RecordWithArrays& o) const {
    yardl::hdf5::ToOuter(default_array, o.default_array);
    yardl::hdf5::ToOuter(default_array_with_empty_dimension, o.default_array_with_empty_dimension);
    yardl::hdf5::ToOuter(rank1_array, o.rank1_array);
    yardl::hdf5::ToOuter(rank2_array, o.rank2_array);
    yardl::hdf5::ToOuter(rank2_array_with_named_dimensions, o.rank2_array_with_named_dimensions);
    yardl::hdf5::ToOuter(rank2_fixed_array, o.rank2_fixed_array);
    yardl::hdf5::ToOuter(rank2_fixed_array_with_named_dimensions, o.rank2_fixed_array_with_named_dimensions);
    yardl::hdf5::ToOuter(dynamic_array, o.dynamic_array);
    yardl::hdf5::ToOuter(array_of_vectors, o.array_of_vectors);
  }

  yardl::hdf5::InnerDynamicNdArray<int32_t, int32_t> default_array;
  yardl::hdf5::InnerDynamicNdArray<int32_t, int32_t> default_array_with_empty_dimension;
  yardl::hdf5::InnerVlen<int32_t, int32_t> rank1_array;
  yardl::hdf5::InnerNdArray<int32_t, int32_t, 2> rank2_array;
  yardl::hdf5::InnerNdArray<int32_t, int32_t, 2> rank2_array_with_named_dimensions;
  yardl::FixedNDArray<int32_t, 3, 4> rank2_fixed_array;
  yardl::FixedNDArray<int32_t, 3, 4> rank2_fixed_array_with_named_dimensions;
  yardl::hdf5::InnerDynamicNdArray<int32_t, int32_t> dynamic_array;
  yardl::FixedNDArray<std::array<int32_t, 4>, 5> array_of_vectors;
};

struct _Inner_RecordWithArraysSimpleSyntax {
  _Inner_RecordWithArraysSimpleSyntax() {} 
  _Inner_RecordWithArraysSimpleSyntax(test_model::RecordWithArraysSimpleSyntax const& o) 
      : default_array(o.default_array),
      default_array_with_empty_dimension(o.default_array_with_empty_dimension),
      rank1_array(o.rank1_array),
      rank2_array(o.rank2_array),
      rank2_array_with_named_dimensions(o.rank2_array_with_named_dimensions),
      rank2_fixed_array(o.rank2_fixed_array),
      rank2_fixed_array_with_named_dimensions(o.rank2_fixed_array_with_named_dimensions),
      dynamic_array(o.dynamic_array),
      array_of_vectors(o.array_of_vectors) {
  }

  void ToOuter (test_model::RecordWithArraysSimpleSyntax& o) const {
    yardl::hdf5::ToOuter(default_array, o.default_array);
    yardl::hdf5::ToOuter(default_array_with_empty_dimension, o.default_array_with_empty_dimension);
    yardl::hdf5::ToOuter(rank1_array, o.rank1_array);
    yardl::hdf5::ToOuter(rank2_array, o.rank2_array);
    yardl::hdf5::ToOuter(rank2_array_with_named_dimensions, o.rank2_array_with_named_dimensions);
    yardl::hdf5::ToOuter(rank2_fixed_array, o.rank2_fixed_array);
    yardl::hdf5::ToOuter(rank2_fixed_array_with_named_dimensions, o.rank2_fixed_array_with_named_dimensions);
    yardl::hdf5::ToOuter(dynamic_array, o.dynamic_array);
    yardl::hdf5::ToOuter(array_of_vectors, o.array_of_vectors);
  }

  yardl::hdf5::InnerDynamicNdArray<int32_t, int32_t> default_array;
  yardl::hdf5::InnerDynamicNdArray<int32_t, int32_t> default_array_with_empty_dimension;
  yardl::hdf5::InnerVlen<int32_t, int32_t> rank1_array;
  yardl::hdf5::InnerNdArray<int32_t, int32_t, 2> rank2_array;
  yardl::hdf5::InnerNdArray<int32_t, int32_t, 2> rank2_array_with_named_dimensions;
  yardl::FixedNDArray<int32_t, 3, 4> rank2_fixed_array;
  yardl::FixedNDArray<int32_t, 3, 4> rank2_fixed_array_with_named_dimensions;
  yardl::hdf5::InnerDynamicNdArray<int32_t, int32_t> dynamic_array;
  yardl::FixedNDArray<std::array<int32_t, 4>, 5> array_of_vectors;
};

struct _Inner_RecordWithOptionalFields {
  _Inner_RecordWithOptionalFields() {} 
  _Inner_RecordWithOptionalFields(test_model::RecordWithOptionalFields const& o) 
      : optional_int(o.optional_int),
      optional_int_alternate_syntax(o.optional_int_alternate_syntax) {
  }

  void ToOuter (test_model::RecordWithOptionalFields& o) const {
    yardl::hdf5::ToOuter(optional_int, o.optional_int);
    yardl::hdf5::ToOuter(optional_int_alternate_syntax, o.optional_int_alternate_syntax);
  }

  yardl::hdf5::InnerOptional<int32_t, int32_t> optional_int;
  yardl::hdf5::InnerOptional<int32_t, int32_t> optional_int_alternate_syntax;
};

struct _Inner_RecordWithVlens {
  _Inner_RecordWithVlens() {} 
  _Inner_RecordWithVlens(test_model::RecordWithVlens const& o) 
      : a(o.a),
      b(o.b),
      c(o.c) {
  }

  void ToOuter (test_model::RecordWithVlens& o) const {
    yardl::hdf5::ToOuter(a, o.a);
    yardl::hdf5::ToOuter(b, o.b);
    yardl::hdf5::ToOuter(c, o.c);
  }

  yardl::hdf5::InnerVlen<test_model::SimpleRecord, test_model::SimpleRecord> a;
  int32_t b;
  int32_t c;
};

struct _Inner_RecordWithStrings {
  _Inner_RecordWithStrings() {} 
  _Inner_RecordWithStrings(test_model::RecordWithStrings const& o) 
      : a(o.a),
      b(o.b) {
  }

  void ToOuter (test_model::RecordWithStrings& o) const {
    yardl::hdf5::ToOuter(a, o.a);
    yardl::hdf5::ToOuter(b, o.b);
  }

  yardl::hdf5::InnerVlenString a;
  yardl::hdf5::InnerVlenString b;
};

struct _Inner_RecordWithOptionalVector {
  _Inner_RecordWithOptionalVector() {} 
  _Inner_RecordWithOptionalVector(test_model::RecordWithOptionalVector const& o) 
      : optional_vector(o.optional_vector) {
  }

  void ToOuter (test_model::RecordWithOptionalVector& o) const {
    yardl::hdf5::ToOuter(optional_vector, o.optional_vector);
  }

  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlen<int32_t, int32_t>, std::vector<int32_t>> optional_vector;
};

struct _Inner_RecordWithFixedVectors {
  _Inner_RecordWithFixedVectors() {} 
  _Inner_RecordWithFixedVectors(test_model::RecordWithFixedVectors const& o) 
      : fixed_int_vector(o.fixed_int_vector),
      fixed_simple_record_vector(o.fixed_simple_record_vector),
      fixed_record_with_vlens_vector(o.fixed_record_with_vlens_vector) {
  }

  void ToOuter (test_model::RecordWithFixedVectors& o) const {
    yardl::hdf5::ToOuter(fixed_int_vector, o.fixed_int_vector);
    yardl::hdf5::ToOuter(fixed_simple_record_vector, o.fixed_simple_record_vector);
    yardl::hdf5::ToOuter(fixed_record_with_vlens_vector, o.fixed_record_with_vlens_vector);
  }

  std::array<int32_t, 5> fixed_int_vector;
  std::array<test_model::SimpleRecord, 3> fixed_simple_record_vector;
  yardl::hdf5::InnerFixedVector<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens, 2> fixed_record_with_vlens_vector;
};

struct _Inner_RecordWithFixedArrays {
  _Inner_RecordWithFixedArrays() {} 
  _Inner_RecordWithFixedArrays(test_model::RecordWithFixedArrays const& o) 
      : ints(o.ints),
      fixed_simple_record_array(o.fixed_simple_record_array),
      fixed_record_with_vlens_array(o.fixed_record_with_vlens_array) {
  }

  void ToOuter (test_model::RecordWithFixedArrays& o) const {
    yardl::hdf5::ToOuter(ints, o.ints);
    yardl::hdf5::ToOuter(fixed_simple_record_array, o.fixed_simple_record_array);
    yardl::hdf5::ToOuter(fixed_record_with_vlens_array, o.fixed_record_with_vlens_array);
  }

  yardl::FixedNDArray<int32_t, 2, 3> ints;
  yardl::FixedNDArray<test_model::SimpleRecord, 3, 2> fixed_simple_record_array;
  yardl::hdf5::InnerFixedNdArray<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens, 2, 2> fixed_record_with_vlens_array;
};

struct _Inner_RecordWithNDArrays {
  _Inner_RecordWithNDArrays() {} 
  _Inner_RecordWithNDArrays(test_model::RecordWithNDArrays const& o) 
      : ints(o.ints),
      fixed_simple_record_array(o.fixed_simple_record_array),
      fixed_record_with_vlens_array(o.fixed_record_with_vlens_array) {
  }

  void ToOuter (test_model::RecordWithNDArrays& o) const {
    yardl::hdf5::ToOuter(ints, o.ints);
    yardl::hdf5::ToOuter(fixed_simple_record_array, o.fixed_simple_record_array);
    yardl::hdf5::ToOuter(fixed_record_with_vlens_array, o.fixed_record_with_vlens_array);
  }

  yardl::hdf5::InnerNdArray<int32_t, int32_t, 2> ints;
  yardl::hdf5::InnerNdArray<test_model::SimpleRecord, test_model::SimpleRecord, 2> fixed_simple_record_array;
  yardl::hdf5::InnerNdArray<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens, 2> fixed_record_with_vlens_array;
};

struct _Inner_RecordWithNDArraysSingleDimension {
  _Inner_RecordWithNDArraysSingleDimension() {} 
  _Inner_RecordWithNDArraysSingleDimension(test_model::RecordWithNDArraysSingleDimension const& o) 
      : ints(o.ints),
      fixed_simple_record_array(o.fixed_simple_record_array),
      fixed_record_with_vlens_array(o.fixed_record_with_vlens_array) {
  }

  void ToOuter (test_model::RecordWithNDArraysSingleDimension& o) const {
    yardl::hdf5::ToOuter(ints, o.ints);
    yardl::hdf5::ToOuter(fixed_simple_record_array, o.fixed_simple_record_array);
    yardl::hdf5::ToOuter(fixed_record_with_vlens_array, o.fixed_record_with_vlens_array);
  }

  yardl::hdf5::InnerVlen<int32_t, int32_t> ints;
  yardl::hdf5::InnerVlen<test_model::SimpleRecord, test_model::SimpleRecord> fixed_simple_record_array;
  yardl::hdf5::InnerVlen<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens> fixed_record_with_vlens_array;
};

struct _Inner_RecordWithDynamicNDArrays {
  _Inner_RecordWithDynamicNDArrays() {} 
  _Inner_RecordWithDynamicNDArrays(test_model::RecordWithDynamicNDArrays const& o) 
      : ints(o.ints),
      fixed_simple_record_array(o.fixed_simple_record_array),
      fixed_record_with_vlens_array(o.fixed_record_with_vlens_array) {
  }

  void ToOuter (test_model::RecordWithDynamicNDArrays& o) const {
    yardl::hdf5::ToOuter(ints, o.ints);
    yardl::hdf5::ToOuter(fixed_simple_record_array, o.fixed_simple_record_array);
    yardl::hdf5::ToOuter(fixed_record_with_vlens_array, o.fixed_record_with_vlens_array);
  }

  yardl::hdf5::InnerDynamicNdArray<int32_t, int32_t> ints;
  yardl::hdf5::InnerDynamicNdArray<test_model::SimpleRecord, test_model::SimpleRecord> fixed_simple_record_array;
  yardl::hdf5::InnerDynamicNdArray<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens> fixed_record_with_vlens_array;
};

struct _Inner_RecordWithUnions {
  _Inner_RecordWithUnions() {} 
  _Inner_RecordWithUnions(test_model::RecordWithUnions const& o) 
      : null_or_int_or_string(o.null_or_int_or_string) {
  }

  void ToOuter (test_model::RecordWithUnions& o) const {
    yardl::hdf5::ToOuter(null_or_int_or_string, o.null_or_int_or_string);
  }

  ::InnerUnion2<int32_t, int32_t, yardl::hdf5::InnerVlenString, std::string> null_or_int_or_string;
};

template <typename _T1_Inner, typename T1, typename _T2_Inner, typename T2>
struct _Inner_GenericRecord {
  _Inner_GenericRecord() {} 
  _Inner_GenericRecord(test_model::GenericRecord<T1, T2> const& o) 
      : scalar1(o.scalar1),
      scalar2(o.scalar2),
      vector1(o.vector1),
      image2(o.image2) {
  }

  void ToOuter (test_model::GenericRecord<T1, T2>& o) const {
    yardl::hdf5::ToOuter(scalar1, o.scalar1);
    yardl::hdf5::ToOuter(scalar2, o.scalar2);
    yardl::hdf5::ToOuter(vector1, o.vector1);
    yardl::hdf5::ToOuter(image2, o.image2);
  }

  _T1_Inner scalar1;
  _T2_Inner scalar2;
  yardl::hdf5::InnerVlen<_T1_Inner, T1> vector1;
  yardl::hdf5::InnerNdArray<_T2_Inner, T2, 2> image2;
};

template <typename _T1_Inner, typename T1, typename _T2_Inner, typename T2>
struct _Inner_MyTuple {
  _Inner_MyTuple() {} 
  _Inner_MyTuple(test_model::MyTuple<T1, T2> const& o) 
      : v1(o.v1),
      v2(o.v2) {
  }

  void ToOuter (test_model::MyTuple<T1, T2>& o) const {
    yardl::hdf5::ToOuter(v1, o.v1);
    yardl::hdf5::ToOuter(v2, o.v2);
  }

  _T1_Inner v1;
  _T2_Inner v2;
};

template <typename _T0_Inner, typename T0, typename _T1_Inner, typename T1>
struct _Inner_GenericRecordWithComputedFields {
  _Inner_GenericRecordWithComputedFields() {} 
  _Inner_GenericRecordWithComputedFields(test_model::GenericRecordWithComputedFields<T0, T1> const& o) 
      : f1(o.f1) {
  }

  void ToOuter (test_model::GenericRecordWithComputedFields<T0, T1>& o) const {
    yardl::hdf5::ToOuter(f1, o.f1);
  }

  ::InnerUnion2<_T0_Inner, T0, _T1_Inner, T1> f1;
};

struct _Inner_RecordWithComputedFields {
  _Inner_RecordWithComputedFields() {} 
  _Inner_RecordWithComputedFields(test_model::RecordWithComputedFields const& o) 
      : array_field(o.array_field),
      array_field_map_dimensions(o.array_field_map_dimensions),
      dynamic_array_field(o.dynamic_array_field),
      fixed_array_field(o.fixed_array_field),
      int_field(o.int_field),
      string_field(o.string_field),
      tuple_field(o.tuple_field),
      vector_field(o.vector_field),
      vector_of_vectors_field(o.vector_of_vectors_field),
      fixed_vector_field(o.fixed_vector_field),
      optional_named_array(o.optional_named_array),
      int_float_union(o.int_float_union),
      nullable_int_float_union(o.nullable_int_float_union),
      union_with_nested_generic_union(o.union_with_nested_generic_union),
      map_field(o.map_field) {
  }

  void ToOuter (test_model::RecordWithComputedFields& o) const {
    yardl::hdf5::ToOuter(array_field, o.array_field);
    yardl::hdf5::ToOuter(array_field_map_dimensions, o.array_field_map_dimensions);
    yardl::hdf5::ToOuter(dynamic_array_field, o.dynamic_array_field);
    yardl::hdf5::ToOuter(fixed_array_field, o.fixed_array_field);
    yardl::hdf5::ToOuter(int_field, o.int_field);
    yardl::hdf5::ToOuter(string_field, o.string_field);
    yardl::hdf5::ToOuter(tuple_field, o.tuple_field);
    yardl::hdf5::ToOuter(vector_field, o.vector_field);
    yardl::hdf5::ToOuter(vector_of_vectors_field, o.vector_of_vectors_field);
    yardl::hdf5::ToOuter(fixed_vector_field, o.fixed_vector_field);
    yardl::hdf5::ToOuter(optional_named_array, o.optional_named_array);
    yardl::hdf5::ToOuter(int_float_union, o.int_float_union);
    yardl::hdf5::ToOuter(nullable_int_float_union, o.nullable_int_float_union);
    yardl::hdf5::ToOuter(union_with_nested_generic_union, o.union_with_nested_generic_union);
    yardl::hdf5::ToOuter(map_field, o.map_field);
  }

  yardl::hdf5::InnerNdArray<int32_t, int32_t, 2> array_field;
  yardl::hdf5::InnerNdArray<int32_t, int32_t, 2> array_field_map_dimensions;
  yardl::hdf5::InnerDynamicNdArray<int32_t, int32_t> dynamic_array_field;
  yardl::FixedNDArray<int32_t, 3, 4> fixed_array_field;
  int32_t int_field;
  yardl::hdf5::InnerVlenString string_field;
  test_model::MyTuple<int32_t, int32_t> tuple_field;
  yardl::hdf5::InnerVlen<int32_t, int32_t> vector_field;
  yardl::hdf5::InnerVlen<yardl::hdf5::InnerVlen<int32_t, int32_t>, std::vector<int32_t>> vector_of_vectors_field;
  std::array<int32_t, 3> fixed_vector_field;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerNdArray<int32_t, int32_t, 2>, test_model::NamedNDArray> optional_named_array;
  ::InnerUnion2<int32_t, int32_t, float, float> int_float_union;
  ::InnerUnion2<int32_t, int32_t, float, float> nullable_int_float_union;
  ::InnerUnion2<int32_t, int32_t, test_model::hdf5::_Inner_GenericRecordWithComputedFields<yardl::hdf5::InnerVlenString, std::string, float, float>, test_model::GenericRecordWithComputedFields<std::string, float>> union_with_nested_generic_union;
  yardl::hdf5::InnerMap<yardl::hdf5::InnerVlenString, std::string, yardl::hdf5::InnerVlenString, std::string> map_field;
};

struct _Inner_RecordWithKeywordFields {
  _Inner_RecordWithKeywordFields() {} 
  _Inner_RecordWithKeywordFields(test_model::RecordWithKeywordFields const& o) 
      : int_field(o.int_field),
      sizeof_field(o.sizeof_field),
      if_field(o.if_field) {
  }

  void ToOuter (test_model::RecordWithKeywordFields& o) const {
    yardl::hdf5::ToOuter(int_field, o.int_field);
    yardl::hdf5::ToOuter(sizeof_field, o.sizeof_field);
    yardl::hdf5::ToOuter(if_field, o.if_field);
  }

  yardl::hdf5::InnerVlenString int_field;
  yardl::hdf5::InnerNdArray<int32_t, int32_t, 2> sizeof_field;
  test_model::EnumWithKeywordSymbols if_field;
};

[[maybe_unused]] H5::CompType GetSmallBenchmarkRecordHdf5Ddl() {
  using RecordType = test_model::SmallBenchmarkRecord;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("a", HOFFSET(RecordType, a), H5::PredType::NATIVE_DOUBLE);
  t.insertMember("b", HOFFSET(RecordType, b), H5::PredType::NATIVE_FLOAT);
  t.insertMember("c", HOFFSET(RecordType, c), H5::PredType::NATIVE_FLOAT);
  return t;
};

[[maybe_unused]] H5::CompType GetSimpleEncodingCountersHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_SimpleEncodingCounters;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("e1", HOFFSET(RecordType, e1), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("e2", HOFFSET(RecordType, e2), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("slice", HOFFSET(RecordType, slice), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("repetition", HOFFSET(RecordType, repetition), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  return t;
};

[[maybe_unused]] H5::CompType GetSimpleAcquisitionHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_SimpleAcquisition;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("flags", HOFFSET(RecordType, flags), H5::PredType::NATIVE_UINT64);
  t.insertMember("idx", HOFFSET(RecordType, idx), test_model::hdf5::GetSimpleEncodingCountersHdf5Ddl());
  t.insertMember("data", HOFFSET(RecordType, data), yardl::hdf5::NDArrayDdl<std::complex<float>, std::complex<float>, 2>(yardl::hdf5::ComplexTypeDdl<float>()));
  t.insertMember("trajectory", HOFFSET(RecordType, trajectory), yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT));
  return t;
};

[[maybe_unused]] H5::CompType GetSimpleRecordHdf5Ddl() {
  using RecordType = test_model::SimpleRecord;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("x", HOFFSET(RecordType, x), H5::PredType::NATIVE_INT32);
  t.insertMember("y", HOFFSET(RecordType, y), H5::PredType::NATIVE_INT32);
  t.insertMember("z", HOFFSET(RecordType, z), H5::PredType::NATIVE_INT32);
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithPrimitivesHdf5Ddl() {
  using RecordType = test_model::RecordWithPrimitives;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("boolField", HOFFSET(RecordType, bool_field), H5::PredType::NATIVE_HBOOL);
  t.insertMember("int8Field", HOFFSET(RecordType, int8_field), H5::PredType::NATIVE_INT8);
  t.insertMember("uint8Field", HOFFSET(RecordType, uint8_field), H5::PredType::NATIVE_UINT8);
  t.insertMember("int16Field", HOFFSET(RecordType, int16_field), H5::PredType::NATIVE_INT16);
  t.insertMember("uint16Field", HOFFSET(RecordType, uint16_field), H5::PredType::NATIVE_UINT16);
  t.insertMember("int32Field", HOFFSET(RecordType, int32_field), H5::PredType::NATIVE_INT32);
  t.insertMember("uint32Field", HOFFSET(RecordType, uint32_field), H5::PredType::NATIVE_UINT32);
  t.insertMember("int64Field", HOFFSET(RecordType, int64_field), H5::PredType::NATIVE_INT64);
  t.insertMember("uint64Field", HOFFSET(RecordType, uint64_field), H5::PredType::NATIVE_UINT64);
  t.insertMember("sizeField", HOFFSET(RecordType, size_field), yardl::hdf5::SizeTypeDdl());
  t.insertMember("float32Field", HOFFSET(RecordType, float32_field), H5::PredType::NATIVE_FLOAT);
  t.insertMember("float64Field", HOFFSET(RecordType, float64_field), H5::PredType::NATIVE_DOUBLE);
  t.insertMember("complexfloat32Field", HOFFSET(RecordType, complexfloat32_field), yardl::hdf5::ComplexTypeDdl<float>());
  t.insertMember("complexfloat64Field", HOFFSET(RecordType, complexfloat64_field), yardl::hdf5::ComplexTypeDdl<double>());
  t.insertMember("dateField", HOFFSET(RecordType, date_field), yardl::hdf5::DateTypeDdl());
  t.insertMember("timeField", HOFFSET(RecordType, time_field), yardl::hdf5::TimeTypeDdl());
  t.insertMember("datetimeField", HOFFSET(RecordType, datetime_field), yardl::hdf5::DateTimeTypeDdl());
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithPrimitiveAliasesHdf5Ddl() {
  using RecordType = test_model::RecordWithPrimitiveAliases;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("byteField", HOFFSET(RecordType, byte_field), H5::PredType::NATIVE_UINT8);
  t.insertMember("intField", HOFFSET(RecordType, int_field), H5::PredType::NATIVE_INT32);
  t.insertMember("uintField", HOFFSET(RecordType, uint_field), H5::PredType::NATIVE_UINT32);
  t.insertMember("longField", HOFFSET(RecordType, long_field), H5::PredType::NATIVE_INT64);
  t.insertMember("ulongField", HOFFSET(RecordType, ulong_field), H5::PredType::NATIVE_UINT64);
  t.insertMember("floatField", HOFFSET(RecordType, float_field), H5::PredType::NATIVE_FLOAT);
  t.insertMember("doubleField", HOFFSET(RecordType, double_field), H5::PredType::NATIVE_DOUBLE);
  t.insertMember("complexfloatField", HOFFSET(RecordType, complexfloat_field), yardl::hdf5::ComplexTypeDdl<float>());
  t.insertMember("complexdoubleField", HOFFSET(RecordType, complexdouble_field), yardl::hdf5::ComplexTypeDdl<double>());
  return t;
};

[[maybe_unused]] H5::CompType GetTupleWithRecordsHdf5Ddl() {
  using RecordType = test_model::TupleWithRecords;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("a", HOFFSET(RecordType, a), test_model::hdf5::GetSimpleRecordHdf5Ddl());
  t.insertMember("b", HOFFSET(RecordType, b), test_model::hdf5::GetSimpleRecordHdf5Ddl());
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithVectorsHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithVectors;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("defaultVector", HOFFSET(RecordType, default_vector), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32));
  t.insertMember("defaultVectorFixedLength", HOFFSET(RecordType, default_vector_fixed_length), yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_INT32, 3));
  t.insertMember("vectorOfVectors", HOFFSET(RecordType, vector_of_vectors), yardl::hdf5::InnerVlenDdl(yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_INT32, 2)));
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithArraysHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithArrays;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("defaultArray", HOFFSET(RecordType, default_array), yardl::hdf5::DynamicNDArrayDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32));
  t.insertMember("defaultArrayWithEmptyDimension", HOFFSET(RecordType, default_array_with_empty_dimension), yardl::hdf5::DynamicNDArrayDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32));
  t.insertMember("rank1Array", HOFFSET(RecordType, rank1_array), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32));
  t.insertMember("rank2Array", HOFFSET(RecordType, rank2_array), yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32));
  t.insertMember("rank2ArrayWithNamedDimensions", HOFFSET(RecordType, rank2_array_with_named_dimensions), yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32));
  t.insertMember("rank2FixedArray", HOFFSET(RecordType, rank2_fixed_array), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_INT32, {3, 4}));
  t.insertMember("rank2FixedArrayWithNamedDimensions", HOFFSET(RecordType, rank2_fixed_array_with_named_dimensions), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_INT32, {3, 4}));
  t.insertMember("dynamicArray", HOFFSET(RecordType, dynamic_array), yardl::hdf5::DynamicNDArrayDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32));
  t.insertMember("arrayOfVectors", HOFFSET(RecordType, array_of_vectors), yardl::hdf5::FixedNDArrayDdl(yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_INT32, 4), {5}));
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithArraysSimpleSyntaxHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithArraysSimpleSyntax;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("defaultArray", HOFFSET(RecordType, default_array), yardl::hdf5::DynamicNDArrayDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32));
  t.insertMember("defaultArrayWithEmptyDimension", HOFFSET(RecordType, default_array_with_empty_dimension), yardl::hdf5::DynamicNDArrayDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32));
  t.insertMember("rank1Array", HOFFSET(RecordType, rank1_array), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32));
  t.insertMember("rank2Array", HOFFSET(RecordType, rank2_array), yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32));
  t.insertMember("rank2ArrayWithNamedDimensions", HOFFSET(RecordType, rank2_array_with_named_dimensions), yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32));
  t.insertMember("rank2FixedArray", HOFFSET(RecordType, rank2_fixed_array), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_INT32, {3, 4}));
  t.insertMember("rank2FixedArrayWithNamedDimensions", HOFFSET(RecordType, rank2_fixed_array_with_named_dimensions), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_INT32, {3, 4}));
  t.insertMember("dynamicArray", HOFFSET(RecordType, dynamic_array), yardl::hdf5::DynamicNDArrayDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32));
  t.insertMember("arrayOfVectors", HOFFSET(RecordType, array_of_vectors), yardl::hdf5::FixedNDArrayDdl(yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_INT32, 4), {5}));
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithOptionalFieldsHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithOptionalFields;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("optionalInt", HOFFSET(RecordType, optional_int), yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32));
  t.insertMember("optionalIntAlternateSyntax", HOFFSET(RecordType, optional_int_alternate_syntax), yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32));
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithVlensHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithVlens;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("a", HOFFSET(RecordType, a), yardl::hdf5::InnerVlenDdl(test_model::hdf5::GetSimpleRecordHdf5Ddl()));
  t.insertMember("b", HOFFSET(RecordType, b), H5::PredType::NATIVE_INT32);
  t.insertMember("c", HOFFSET(RecordType, c), H5::PredType::NATIVE_INT32);
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithStringsHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithStrings;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("a", HOFFSET(RecordType, a), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("b", HOFFSET(RecordType, b), yardl::hdf5::InnerVlenStringDdl());
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithOptionalVectorHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithOptionalVector;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("optionalVector", HOFFSET(RecordType, optional_vector), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlen<int32_t, int32_t>, std::vector<int32_t>>(yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32)));
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithFixedVectorsHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithFixedVectors;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("fixedIntVector", HOFFSET(RecordType, fixed_int_vector), yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_INT32, 5));
  t.insertMember("fixedSimpleRecordVector", HOFFSET(RecordType, fixed_simple_record_vector), yardl::hdf5::FixedVectorDdl(test_model::hdf5::GetSimpleRecordHdf5Ddl(), 3));
  t.insertMember("fixedRecordWithVlensVector", HOFFSET(RecordType, fixed_record_with_vlens_vector), yardl::hdf5::FixedVectorDdl(test_model::hdf5::GetRecordWithVlensHdf5Ddl(), 2));
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithFixedArraysHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithFixedArrays;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("ints", HOFFSET(RecordType, ints), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_INT32, {2, 3}));
  t.insertMember("fixedSimpleRecordArray", HOFFSET(RecordType, fixed_simple_record_array), yardl::hdf5::FixedNDArrayDdl(test_model::hdf5::GetSimpleRecordHdf5Ddl(), {3, 2}));
  t.insertMember("fixedRecordWithVlensArray", HOFFSET(RecordType, fixed_record_with_vlens_array), yardl::hdf5::FixedNDArrayDdl(test_model::hdf5::GetRecordWithVlensHdf5Ddl(), {2, 2}));
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithNDArraysHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithNDArrays;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("ints", HOFFSET(RecordType, ints), yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32));
  t.insertMember("fixedSimpleRecordArray", HOFFSET(RecordType, fixed_simple_record_array), yardl::hdf5::NDArrayDdl<test_model::SimpleRecord, test_model::SimpleRecord, 2>(test_model::hdf5::GetSimpleRecordHdf5Ddl()));
  t.insertMember("fixedRecordWithVlensArray", HOFFSET(RecordType, fixed_record_with_vlens_array), yardl::hdf5::NDArrayDdl<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens, 2>(test_model::hdf5::GetRecordWithVlensHdf5Ddl()));
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithNDArraysSingleDimensionHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithNDArraysSingleDimension;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("ints", HOFFSET(RecordType, ints), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32));
  t.insertMember("fixedSimpleRecordArray", HOFFSET(RecordType, fixed_simple_record_array), yardl::hdf5::InnerVlenDdl(test_model::hdf5::GetSimpleRecordHdf5Ddl()));
  t.insertMember("fixedRecordWithVlensArray", HOFFSET(RecordType, fixed_record_with_vlens_array), yardl::hdf5::InnerVlenDdl(test_model::hdf5::GetRecordWithVlensHdf5Ddl()));
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithDynamicNDArraysHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithDynamicNDArrays;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("ints", HOFFSET(RecordType, ints), yardl::hdf5::DynamicNDArrayDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32));
  t.insertMember("fixedSimpleRecordArray", HOFFSET(RecordType, fixed_simple_record_array), yardl::hdf5::DynamicNDArrayDdl<test_model::SimpleRecord, test_model::SimpleRecord>(test_model::hdf5::GetSimpleRecordHdf5Ddl()));
  t.insertMember("fixedRecordWithVlensArray", HOFFSET(RecordType, fixed_record_with_vlens_array), yardl::hdf5::DynamicNDArrayDdl<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>(test_model::hdf5::GetRecordWithVlensHdf5Ddl()));
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithUnionsHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithUnions;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("nullOrIntOrString", HOFFSET(RecordType, null_or_int_or_string), ::InnerUnion2Ddl<int32_t, int32_t, yardl::hdf5::InnerVlenString, std::string>(true, H5::PredType::NATIVE_INT32, "int32", yardl::hdf5::InnerVlenStringDdl(), "string"));
  return t;
};

template <typename _T1_Inner, typename T1, typename _T2_Inner, typename T2>
[[maybe_unused]] H5::CompType GetGenericRecordHdf5Ddl(H5::DataType const& T1_type, H5::DataType const& T2_type) {
  using RecordType = test_model::hdf5::_Inner_GenericRecord<_T1_Inner, T1, _T2_Inner, T2>;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("scalar1", HOFFSET(RecordType, scalar1), T1_type);
  t.insertMember("scalar2", HOFFSET(RecordType, scalar2), T2_type);
  t.insertMember("vector1", HOFFSET(RecordType, vector1), yardl::hdf5::InnerVlenDdl(T1_type));
  t.insertMember("image2", HOFFSET(RecordType, image2), yardl::hdf5::NDArrayDdl<_T2_Inner, T2, 2>(T2_type));
  return t;
};

template <typename _T1_Inner, typename T1, typename _T2_Inner, typename T2>
[[maybe_unused]] H5::CompType GetMyTupleHdf5Ddl(H5::DataType const& T1_type, H5::DataType const& T2_type) {
  using RecordType = test_model::hdf5::_Inner_MyTuple<_T1_Inner, T1, _T2_Inner, T2>;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("v1", HOFFSET(RecordType, v1), T1_type);
  t.insertMember("v2", HOFFSET(RecordType, v2), T2_type);
  return t;
};

template <typename _T0_Inner, typename T0, typename _T1_Inner, typename T1>
[[maybe_unused]] H5::CompType GetGenericRecordWithComputedFieldsHdf5Ddl(H5::DataType const& T0_type, H5::DataType const& T1_type) {
  using RecordType = test_model::hdf5::_Inner_GenericRecordWithComputedFields<_T0_Inner, T0, _T1_Inner, T1>;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("f1", HOFFSET(RecordType, f1), ::InnerUnion2Ddl<_T0_Inner, T0, _T1_Inner, T1>(false, T0_type, "T0", T1_type, "T1"));
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithComputedFieldsHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithComputedFields;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("arrayField", HOFFSET(RecordType, array_field), yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32));
  t.insertMember("arrayFieldMapDimensions", HOFFSET(RecordType, array_field_map_dimensions), yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32));
  t.insertMember("dynamicArrayField", HOFFSET(RecordType, dynamic_array_field), yardl::hdf5::DynamicNDArrayDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32));
  t.insertMember("fixedArrayField", HOFFSET(RecordType, fixed_array_field), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_INT32, {3, 4}));
  t.insertMember("intField", HOFFSET(RecordType, int_field), H5::PredType::NATIVE_INT32);
  t.insertMember("stringField", HOFFSET(RecordType, string_field), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("tupleField", HOFFSET(RecordType, tuple_field), test_model::hdf5::GetMyTupleHdf5Ddl<int32_t, int32_t, int32_t, int32_t>(H5::PredType::NATIVE_INT32, H5::PredType::NATIVE_INT32));
  t.insertMember("vectorField", HOFFSET(RecordType, vector_field), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32));
  t.insertMember("vectorOfVectorsField", HOFFSET(RecordType, vector_of_vectors_field), yardl::hdf5::InnerVlenDdl(yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32)));
  t.insertMember("fixedVectorField", HOFFSET(RecordType, fixed_vector_field), yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_INT32, 3));
  t.insertMember("optionalNamedArray", HOFFSET(RecordType, optional_named_array), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerNdArray<int32_t, int32_t, 2>, test_model::NamedNDArray>(yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32)));
  t.insertMember("intFloatUnion", HOFFSET(RecordType, int_float_union), ::InnerUnion2Ddl<int32_t, int32_t, float, float>(false, H5::PredType::NATIVE_INT32, "int32", H5::PredType::NATIVE_FLOAT, "float32"));
  t.insertMember("nullableIntFloatUnion", HOFFSET(RecordType, nullable_int_float_union), ::InnerUnion2Ddl<int32_t, int32_t, float, float>(true, H5::PredType::NATIVE_INT32, "int32", H5::PredType::NATIVE_FLOAT, "float32"));
  t.insertMember("unionWithNestedGenericUnion", HOFFSET(RecordType, union_with_nested_generic_union), ::InnerUnion2Ddl<int32_t, int32_t, test_model::hdf5::_Inner_GenericRecordWithComputedFields<yardl::hdf5::InnerVlenString, std::string, float, float>, test_model::GenericRecordWithComputedFields<std::string, float>>(false, H5::PredType::NATIVE_INT32, "int32", test_model::hdf5::GetGenericRecordWithComputedFieldsHdf5Ddl<yardl::hdf5::InnerVlenString, std::string, float, float>(yardl::hdf5::InnerVlenStringDdl(), H5::PredType::NATIVE_FLOAT), "GenericRecordWithComputedFields<string,float32>"));
  t.insertMember("mapField", HOFFSET(RecordType, map_field), yardl::hdf5::InnerMapDdl<yardl::hdf5::InnerVlenString, yardl::hdf5::InnerVlenString>(yardl::hdf5::InnerVlenStringDdl(), yardl::hdf5::InnerVlenStringDdl()));
  return t;
};

[[maybe_unused]] H5::CompType GetRecordWithKeywordFieldsHdf5Ddl() {
  using RecordType = test_model::hdf5::_Inner_RecordWithKeywordFields;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("int", HOFFSET(RecordType, int_field), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("sizeof", HOFFSET(RecordType, sizeof_field), yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32));
  t.insertMember("if", HOFFSET(RecordType, if_field), test_model::hdf5::GetEnumWithKeywordSymbolsHdf5Ddl());
  return t;
};

} // namespace 

BenchmarkFloat256x256Writer::BenchmarkFloat256x256Writer(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "BenchmarkFloat256x256", schema_) {
}

void BenchmarkFloat256x256Writer::WriteFloat256x256Impl(yardl::FixedNDArray<float, 256, 256> const& value) {
  if (!float256x256_dataset_state_) {
    float256x256_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "float256x256", yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {256, 256}), 0);
  }

  float256x256_dataset_state_->Append<yardl::FixedNDArray<float, 256, 256>, yardl::FixedNDArray<float, 256, 256>>(value);
}

void BenchmarkFloat256x256Writer::WriteFloat256x256Impl(std::vector<yardl::FixedNDArray<float, 256, 256>> const& values) {
  if (!float256x256_dataset_state_) {
    float256x256_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "float256x256", yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {256, 256}), 0);
  }

  float256x256_dataset_state_->AppendBatch<yardl::FixedNDArray<float, 256, 256>, yardl::FixedNDArray<float, 256, 256>>(values);
}

void BenchmarkFloat256x256Writer::EndFloat256x256Impl() {
  if (!float256x256_dataset_state_) {
    float256x256_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "float256x256", yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {256, 256}), 0);
  }

  float256x256_dataset_state_.reset();
}

BenchmarkFloat256x256Reader::BenchmarkFloat256x256Reader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "BenchmarkFloat256x256", schema_) {
}

bool BenchmarkFloat256x256Reader::ReadFloat256x256Impl(yardl::FixedNDArray<float, 256, 256>& value) {
  if (!float256x256_dataset_state_) {
    float256x256_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "float256x256", yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {256, 256}), 0);
  }

  bool has_value = float256x256_dataset_state_->Read<yardl::FixedNDArray<float, 256, 256>, yardl::FixedNDArray<float, 256, 256>>(value);
  if (!has_value) {
    float256x256_dataset_state_.reset();
  }

  return has_value;
}

bool BenchmarkFloat256x256Reader::ReadFloat256x256Impl(std::vector<yardl::FixedNDArray<float, 256, 256>>& values) {
  if (!float256x256_dataset_state_) {
    float256x256_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "float256x256", yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {256, 256}));
  }

  bool has_more = float256x256_dataset_state_->ReadBatch<yardl::FixedNDArray<float, 256, 256>, yardl::FixedNDArray<float, 256, 256>>(values);
  if (!has_more) {
    float256x256_dataset_state_.reset();
  }

  return has_more;
}

BenchmarkFloatVlenWriter::BenchmarkFloatVlenWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "BenchmarkFloatVlen", schema_) {
}

void BenchmarkFloatVlenWriter::WriteFloatArrayImpl(yardl::NDArray<float, 2> const& value) {
  if (!floatArray_dataset_state_) {
    floatArray_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "floatArray", yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT), std::max(sizeof(yardl::hdf5::InnerNdArray<float, float, 2>), sizeof(yardl::NDArray<float, 2>)));
  }

  floatArray_dataset_state_->Append<yardl::hdf5::InnerNdArray<float, float, 2>, yardl::NDArray<float, 2>>(value);
}

void BenchmarkFloatVlenWriter::WriteFloatArrayImpl(std::vector<yardl::NDArray<float, 2>> const& values) {
  if (!floatArray_dataset_state_) {
    floatArray_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "floatArray", yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT), std::max(sizeof(yardl::hdf5::InnerNdArray<float, float, 2>), sizeof(yardl::NDArray<float, 2>)));
  }

  floatArray_dataset_state_->AppendBatch<yardl::hdf5::InnerNdArray<float, float, 2>, yardl::NDArray<float, 2>>(values);
}

void BenchmarkFloatVlenWriter::EndFloatArrayImpl() {
  if (!floatArray_dataset_state_) {
    floatArray_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "floatArray", yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT), std::max(sizeof(yardl::hdf5::InnerNdArray<float, float, 2>), sizeof(yardl::NDArray<float, 2>)));
  }

  floatArray_dataset_state_.reset();
}

BenchmarkFloatVlenReader::BenchmarkFloatVlenReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "BenchmarkFloatVlen", schema_) {
}

bool BenchmarkFloatVlenReader::ReadFloatArrayImpl(yardl::NDArray<float, 2>& value) {
  if (!floatArray_dataset_state_) {
    floatArray_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "floatArray", yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT), std::max(sizeof(yardl::hdf5::InnerNdArray<float, float, 2>), sizeof(yardl::NDArray<float, 2>)));
  }

  bool has_value = floatArray_dataset_state_->Read<yardl::hdf5::InnerNdArray<float, float, 2>, yardl::NDArray<float, 2>>(value);
  if (!has_value) {
    floatArray_dataset_state_.reset();
  }

  return has_value;
}

bool BenchmarkFloatVlenReader::ReadFloatArrayImpl(std::vector<yardl::NDArray<float, 2>>& values) {
  if (!floatArray_dataset_state_) {
    floatArray_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "floatArray", yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT));
  }

  bool has_more = floatArray_dataset_state_->ReadBatch<yardl::hdf5::InnerNdArray<float, float, 2>, yardl::NDArray<float, 2>>(values);
  if (!has_more) {
    floatArray_dataset_state_.reset();
  }

  return has_more;
}

BenchmarkSmallRecordWriter::BenchmarkSmallRecordWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "BenchmarkSmallRecord", schema_) {
}

void BenchmarkSmallRecordWriter::WriteSmallRecordImpl(test_model::SmallBenchmarkRecord const& value) {
  if (!smallRecord_dataset_state_) {
    smallRecord_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "smallRecord", test_model::hdf5::GetSmallBenchmarkRecordHdf5Ddl(), 0);
  }

  smallRecord_dataset_state_->Append<test_model::SmallBenchmarkRecord, test_model::SmallBenchmarkRecord>(value);
}

void BenchmarkSmallRecordWriter::WriteSmallRecordImpl(std::vector<test_model::SmallBenchmarkRecord> const& values) {
  if (!smallRecord_dataset_state_) {
    smallRecord_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "smallRecord", test_model::hdf5::GetSmallBenchmarkRecordHdf5Ddl(), 0);
  }

  smallRecord_dataset_state_->AppendBatch<test_model::SmallBenchmarkRecord, test_model::SmallBenchmarkRecord>(values);
}

void BenchmarkSmallRecordWriter::EndSmallRecordImpl() {
  if (!smallRecord_dataset_state_) {
    smallRecord_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "smallRecord", test_model::hdf5::GetSmallBenchmarkRecordHdf5Ddl(), 0);
  }

  smallRecord_dataset_state_.reset();
}

BenchmarkSmallRecordReader::BenchmarkSmallRecordReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "BenchmarkSmallRecord", schema_) {
}

bool BenchmarkSmallRecordReader::ReadSmallRecordImpl(test_model::SmallBenchmarkRecord& value) {
  if (!smallRecord_dataset_state_) {
    smallRecord_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "smallRecord", test_model::hdf5::GetSmallBenchmarkRecordHdf5Ddl(), 0);
  }

  bool has_value = smallRecord_dataset_state_->Read<test_model::SmallBenchmarkRecord, test_model::SmallBenchmarkRecord>(value);
  if (!has_value) {
    smallRecord_dataset_state_.reset();
  }

  return has_value;
}

bool BenchmarkSmallRecordReader::ReadSmallRecordImpl(std::vector<test_model::SmallBenchmarkRecord>& values) {
  if (!smallRecord_dataset_state_) {
    smallRecord_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "smallRecord", test_model::hdf5::GetSmallBenchmarkRecordHdf5Ddl());
  }

  bool has_more = smallRecord_dataset_state_->ReadBatch<test_model::SmallBenchmarkRecord, test_model::SmallBenchmarkRecord>(values);
  if (!has_more) {
    smallRecord_dataset_state_.reset();
  }

  return has_more;
}

BenchmarkSmallRecordWithOptionalsWriter::BenchmarkSmallRecordWithOptionalsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "BenchmarkSmallRecordWithOptionals", schema_) {
}

void BenchmarkSmallRecordWithOptionalsWriter::WriteSmallRecordImpl(test_model::SimpleEncodingCounters const& value) {
  if (!smallRecord_dataset_state_) {
    smallRecord_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "smallRecord", test_model::hdf5::GetSimpleEncodingCountersHdf5Ddl(), 0);
  }

  smallRecord_dataset_state_->Append<test_model::hdf5::_Inner_SimpleEncodingCounters, test_model::SimpleEncodingCounters>(value);
}

void BenchmarkSmallRecordWithOptionalsWriter::WriteSmallRecordImpl(std::vector<test_model::SimpleEncodingCounters> const& values) {
  if (!smallRecord_dataset_state_) {
    smallRecord_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "smallRecord", test_model::hdf5::GetSimpleEncodingCountersHdf5Ddl(), 0);
  }

  smallRecord_dataset_state_->AppendBatch<test_model::hdf5::_Inner_SimpleEncodingCounters, test_model::SimpleEncodingCounters>(values);
}

void BenchmarkSmallRecordWithOptionalsWriter::EndSmallRecordImpl() {
  if (!smallRecord_dataset_state_) {
    smallRecord_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "smallRecord", test_model::hdf5::GetSimpleEncodingCountersHdf5Ddl(), 0);
  }

  smallRecord_dataset_state_.reset();
}

BenchmarkSmallRecordWithOptionalsReader::BenchmarkSmallRecordWithOptionalsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "BenchmarkSmallRecordWithOptionals", schema_) {
}

bool BenchmarkSmallRecordWithOptionalsReader::ReadSmallRecordImpl(test_model::SimpleEncodingCounters& value) {
  if (!smallRecord_dataset_state_) {
    smallRecord_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "smallRecord", test_model::hdf5::GetSimpleEncodingCountersHdf5Ddl(), 0);
  }

  bool has_value = smallRecord_dataset_state_->Read<test_model::hdf5::_Inner_SimpleEncodingCounters, test_model::SimpleEncodingCounters>(value);
  if (!has_value) {
    smallRecord_dataset_state_.reset();
  }

  return has_value;
}

bool BenchmarkSmallRecordWithOptionalsReader::ReadSmallRecordImpl(std::vector<test_model::SimpleEncodingCounters>& values) {
  if (!smallRecord_dataset_state_) {
    smallRecord_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "smallRecord", test_model::hdf5::GetSimpleEncodingCountersHdf5Ddl());
  }

  bool has_more = smallRecord_dataset_state_->ReadBatch<test_model::hdf5::_Inner_SimpleEncodingCounters, test_model::SimpleEncodingCounters>(values);
  if (!has_more) {
    smallRecord_dataset_state_.reset();
  }

  return has_more;
}

BenchmarkSimpleMrdWriter::BenchmarkSimpleMrdWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "BenchmarkSimpleMrd", schema_) {
}

void BenchmarkSimpleMrdWriter::WriteDataImpl(std::variant<test_model::SimpleAcquisition, test_model::Image<float>> const& value) {
  if (!data_dataset_state_) {
    data_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<2>>(group_, "data", false, std::make_tuple(test_model::hdf5::GetSimpleAcquisitionHdf5Ddl(), "SimpleAcquisition", static_cast<size_t>(std::max(sizeof(::InnerUnion2<test_model::hdf5::_Inner_SimpleAcquisition, test_model::SimpleAcquisition, yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>>), sizeof(std::variant<test_model::SimpleAcquisition, test_model::Image<float>>)))), std::make_tuple(yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT), "Image<float32>", static_cast<size_t>(std::max(sizeof(::InnerUnion2<test_model::hdf5::_Inner_SimpleAcquisition, test_model::SimpleAcquisition, yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>>), sizeof(std::variant<test_model::SimpleAcquisition, test_model::Image<float>>)))));
  }

  std::visit(
    [&](auto const& arg) {
      using T = std::decay_t<decltype(arg)>;
      if constexpr (std::is_same_v<T, test_model::SimpleAcquisition>) {
        data_dataset_state_->Append<test_model::hdf5::_Inner_SimpleAcquisition, test_model::SimpleAcquisition>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, test_model::Image<float>>) {
        data_dataset_state_->Append<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>>(static_cast<int8_t>(value.index()), arg);
      } else {
        static_assert(yardl::hdf5::always_false_v<T>, "non-exhaustive visitor!");
      }
    },
    value);
}

void BenchmarkSimpleMrdWriter::EndDataImpl() {
  if (!data_dataset_state_) {
    data_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<2>>(group_, "data", false, std::make_tuple(test_model::hdf5::GetSimpleAcquisitionHdf5Ddl(), "SimpleAcquisition", static_cast<size_t>(std::max(sizeof(::InnerUnion2<test_model::hdf5::_Inner_SimpleAcquisition, test_model::SimpleAcquisition, yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>>), sizeof(std::variant<test_model::SimpleAcquisition, test_model::Image<float>>)))), std::make_tuple(yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT), "Image<float32>", static_cast<size_t>(std::max(sizeof(::InnerUnion2<test_model::hdf5::_Inner_SimpleAcquisition, test_model::SimpleAcquisition, yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>>), sizeof(std::variant<test_model::SimpleAcquisition, test_model::Image<float>>)))));
  }

  data_dataset_state_.reset();
}

void BenchmarkSimpleMrdWriter::Flush() {
  if (data_dataset_state_) {
    data_dataset_state_->Flush();
  }
}

BenchmarkSimpleMrdReader::BenchmarkSimpleMrdReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "BenchmarkSimpleMrd", schema_) {
}

bool BenchmarkSimpleMrdReader::ReadDataImpl(std::variant<test_model::SimpleAcquisition, test_model::Image<float>>& value) {
  if (!data_dataset_state_) {
    data_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetReader<2>>(group_, "data", false, std::make_tuple(test_model::hdf5::GetSimpleAcquisitionHdf5Ddl(), "SimpleAcquisition", static_cast<size_t>(std::max(sizeof(::InnerUnion2<test_model::hdf5::_Inner_SimpleAcquisition, test_model::SimpleAcquisition, yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>>), sizeof(std::variant<test_model::SimpleAcquisition, test_model::Image<float>>)))), std::make_tuple(yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT), "Image<float32>", static_cast<size_t>(std::max(sizeof(::InnerUnion2<test_model::hdf5::_Inner_SimpleAcquisition, test_model::SimpleAcquisition, yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>>), sizeof(std::variant<test_model::SimpleAcquisition, test_model::Image<float>>)))));
  }

  auto [has_result, type_index, reader] = data_dataset_state_->ReadIndex();
  if (!has_result) {
    data_dataset_state_.reset();
    return false;
  }

  switch (type_index) {
  case 0: {
    test_model::SimpleAcquisition& ref = value.emplace<0>();
    reader->Read<test_model::hdf5::_Inner_SimpleAcquisition, test_model::SimpleAcquisition>(ref);
    break;
  }
  case 1: {
    test_model::Image<float>& ref = value.emplace<1>();
    reader->Read<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>>(ref);
    break;
  }
  }

  return true;
}

ScalarsWriter::ScalarsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "Scalars", schema_) {
}

void ScalarsWriter::WriteInt32Impl(int32_t const& value) {
  yardl::hdf5::WriteScalarDataset<int32_t, int32_t>(group_, "int32", H5::PredType::NATIVE_INT32, value);
}

void ScalarsWriter::WriteRecordImpl(test_model::RecordWithPrimitives const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::RecordWithPrimitives, test_model::RecordWithPrimitives>(group_, "record", test_model::hdf5::GetRecordWithPrimitivesHdf5Ddl(), value);
}

ScalarsReader::ScalarsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "Scalars", schema_) {
}

void ScalarsReader::ReadInt32Impl(int32_t& value) {
  yardl::hdf5::ReadScalarDataset<int32_t, int32_t>(group_, "int32", H5::PredType::NATIVE_INT32, value);
}

void ScalarsReader::ReadRecordImpl(test_model::RecordWithPrimitives& value) {
  yardl::hdf5::ReadScalarDataset<test_model::RecordWithPrimitives, test_model::RecordWithPrimitives>(group_, "record", test_model::hdf5::GetRecordWithPrimitivesHdf5Ddl(), value);
}

ScalarOptionalsWriter::ScalarOptionalsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "ScalarOptionals", schema_) {
}

void ScalarOptionalsWriter::WriteOptionalIntImpl(std::optional<int32_t> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerOptional<int32_t, int32_t>, std::optional<int32_t>>(group_, "optionalInt", yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), value);
}

void ScalarOptionalsWriter::WriteOptionalRecordImpl(std::optional<test_model::SimpleRecord> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerOptional<test_model::SimpleRecord, test_model::SimpleRecord>, std::optional<test_model::SimpleRecord>>(group_, "optionalRecord", yardl::hdf5::OptionalTypeDdl<test_model::SimpleRecord, test_model::SimpleRecord>(test_model::hdf5::GetSimpleRecordHdf5Ddl()), value);
}

void ScalarOptionalsWriter::WriteRecordWithOptionalFieldsImpl(test_model::RecordWithOptionalFields const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_RecordWithOptionalFields, test_model::RecordWithOptionalFields>(group_, "recordWithOptionalFields", test_model::hdf5::GetRecordWithOptionalFieldsHdf5Ddl(), value);
}

void ScalarOptionalsWriter::WriteOptionalRecordWithOptionalFieldsImpl(std::optional<test_model::RecordWithOptionalFields> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerOptional<test_model::hdf5::_Inner_RecordWithOptionalFields, test_model::RecordWithOptionalFields>, std::optional<test_model::RecordWithOptionalFields>>(group_, "optionalRecordWithOptionalFields", yardl::hdf5::OptionalTypeDdl<test_model::hdf5::_Inner_RecordWithOptionalFields, test_model::RecordWithOptionalFields>(test_model::hdf5::GetRecordWithOptionalFieldsHdf5Ddl()), value);
}

ScalarOptionalsReader::ScalarOptionalsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "ScalarOptionals", schema_) {
}

void ScalarOptionalsReader::ReadOptionalIntImpl(std::optional<int32_t>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerOptional<int32_t, int32_t>, std::optional<int32_t>>(group_, "optionalInt", yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), value);
}

void ScalarOptionalsReader::ReadOptionalRecordImpl(std::optional<test_model::SimpleRecord>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerOptional<test_model::SimpleRecord, test_model::SimpleRecord>, std::optional<test_model::SimpleRecord>>(group_, "optionalRecord", yardl::hdf5::OptionalTypeDdl<test_model::SimpleRecord, test_model::SimpleRecord>(test_model::hdf5::GetSimpleRecordHdf5Ddl()), value);
}

void ScalarOptionalsReader::ReadRecordWithOptionalFieldsImpl(test_model::RecordWithOptionalFields& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_RecordWithOptionalFields, test_model::RecordWithOptionalFields>(group_, "recordWithOptionalFields", test_model::hdf5::GetRecordWithOptionalFieldsHdf5Ddl(), value);
}

void ScalarOptionalsReader::ReadOptionalRecordWithOptionalFieldsImpl(std::optional<test_model::RecordWithOptionalFields>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerOptional<test_model::hdf5::_Inner_RecordWithOptionalFields, test_model::RecordWithOptionalFields>, std::optional<test_model::RecordWithOptionalFields>>(group_, "optionalRecordWithOptionalFields", yardl::hdf5::OptionalTypeDdl<test_model::hdf5::_Inner_RecordWithOptionalFields, test_model::RecordWithOptionalFields>(test_model::hdf5::GetRecordWithOptionalFieldsHdf5Ddl()), value);
}

NestedRecordsWriter::NestedRecordsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "NestedRecords", schema_) {
}

void NestedRecordsWriter::WriteTupleWithRecordsImpl(test_model::TupleWithRecords const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::TupleWithRecords, test_model::TupleWithRecords>(group_, "tupleWithRecords", test_model::hdf5::GetTupleWithRecordsHdf5Ddl(), value);
}

NestedRecordsReader::NestedRecordsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "NestedRecords", schema_) {
}

void NestedRecordsReader::ReadTupleWithRecordsImpl(test_model::TupleWithRecords& value) {
  yardl::hdf5::ReadScalarDataset<test_model::TupleWithRecords, test_model::TupleWithRecords>(group_, "tupleWithRecords", test_model::hdf5::GetTupleWithRecordsHdf5Ddl(), value);
}

VlensWriter::VlensWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "Vlens", schema_) {
}

void VlensWriter::WriteIntVectorImpl(std::vector<int32_t> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerVlen<int32_t, int32_t>, std::vector<int32_t>>(group_, "intVector", yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32), value);
}

void VlensWriter::WriteComplexVectorImpl(std::vector<std::complex<float>> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerVlen<std::complex<float>, std::complex<float>>, std::vector<std::complex<float>>>(group_, "complexVector", yardl::hdf5::InnerVlenDdl(yardl::hdf5::ComplexTypeDdl<float>()), value);
}

void VlensWriter::WriteRecordWithVlensImpl(test_model::RecordWithVlens const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>(group_, "recordWithVlens", test_model::hdf5::GetRecordWithVlensHdf5Ddl(), value);
}

void VlensWriter::WriteVlenOfRecordWithVlensImpl(std::vector<test_model::RecordWithVlens> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerVlen<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>, std::vector<test_model::RecordWithVlens>>(group_, "vlenOfRecordWithVlens", yardl::hdf5::InnerVlenDdl(test_model::hdf5::GetRecordWithVlensHdf5Ddl()), value);
}

VlensReader::VlensReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "Vlens", schema_) {
}

void VlensReader::ReadIntVectorImpl(std::vector<int32_t>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerVlen<int32_t, int32_t>, std::vector<int32_t>>(group_, "intVector", yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32), value);
}

void VlensReader::ReadComplexVectorImpl(std::vector<std::complex<float>>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerVlen<std::complex<float>, std::complex<float>>, std::vector<std::complex<float>>>(group_, "complexVector", yardl::hdf5::InnerVlenDdl(yardl::hdf5::ComplexTypeDdl<float>()), value);
}

void VlensReader::ReadRecordWithVlensImpl(test_model::RecordWithVlens& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>(group_, "recordWithVlens", test_model::hdf5::GetRecordWithVlensHdf5Ddl(), value);
}

void VlensReader::ReadVlenOfRecordWithVlensImpl(std::vector<test_model::RecordWithVlens>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerVlen<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>, std::vector<test_model::RecordWithVlens>>(group_, "vlenOfRecordWithVlens", yardl::hdf5::InnerVlenDdl(test_model::hdf5::GetRecordWithVlensHdf5Ddl()), value);
}

StringsWriter::StringsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "Strings", schema_) {
}

void StringsWriter::WriteSingleStringImpl(std::string const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerVlenString, std::string>(group_, "singleString", yardl::hdf5::InnerVlenStringDdl(), value);
}

void StringsWriter::WriteRecWithStringImpl(test_model::RecordWithStrings const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_RecordWithStrings, test_model::RecordWithStrings>(group_, "recWithString", test_model::hdf5::GetRecordWithStringsHdf5Ddl(), value);
}

StringsReader::StringsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "Strings", schema_) {
}

void StringsReader::ReadSingleStringImpl(std::string& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerVlenString, std::string>(group_, "singleString", yardl::hdf5::InnerVlenStringDdl(), value);
}

void StringsReader::ReadRecWithStringImpl(test_model::RecordWithStrings& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_RecordWithStrings, test_model::RecordWithStrings>(group_, "recWithString", test_model::hdf5::GetRecordWithStringsHdf5Ddl(), value);
}

OptionalVectorsWriter::OptionalVectorsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "OptionalVectors", schema_) {
}

void OptionalVectorsWriter::WriteRecordWithOptionalVectorImpl(test_model::RecordWithOptionalVector const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_RecordWithOptionalVector, test_model::RecordWithOptionalVector>(group_, "recordWithOptionalVector", test_model::hdf5::GetRecordWithOptionalVectorHdf5Ddl(), value);
}

OptionalVectorsReader::OptionalVectorsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "OptionalVectors", schema_) {
}

void OptionalVectorsReader::ReadRecordWithOptionalVectorImpl(test_model::RecordWithOptionalVector& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_RecordWithOptionalVector, test_model::RecordWithOptionalVector>(group_, "recordWithOptionalVector", test_model::hdf5::GetRecordWithOptionalVectorHdf5Ddl(), value);
}

FixedVectorsWriter::FixedVectorsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "FixedVectors", schema_) {
}

void FixedVectorsWriter::WriteFixedIntVectorImpl(std::array<int32_t, 5> const& value) {
  yardl::hdf5::WriteScalarDataset<std::array<int32_t, 5>, std::array<int32_t, 5>>(group_, "fixedIntVector", yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_INT32, 5), value);
}

void FixedVectorsWriter::WriteFixedSimpleRecordVectorImpl(std::array<test_model::SimpleRecord, 3> const& value) {
  yardl::hdf5::WriteScalarDataset<std::array<test_model::SimpleRecord, 3>, std::array<test_model::SimpleRecord, 3>>(group_, "fixedSimpleRecordVector", yardl::hdf5::FixedVectorDdl(test_model::hdf5::GetSimpleRecordHdf5Ddl(), 3), value);
}

void FixedVectorsWriter::WriteFixedRecordWithVlensVectorImpl(std::array<test_model::RecordWithVlens, 2> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerFixedVector<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens, 2>, std::array<test_model::RecordWithVlens, 2>>(group_, "fixedRecordWithVlensVector", yardl::hdf5::FixedVectorDdl(test_model::hdf5::GetRecordWithVlensHdf5Ddl(), 2), value);
}

void FixedVectorsWriter::WriteRecordWithFixedVectorsImpl(test_model::RecordWithFixedVectors const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_RecordWithFixedVectors, test_model::RecordWithFixedVectors>(group_, "recordWithFixedVectors", test_model::hdf5::GetRecordWithFixedVectorsHdf5Ddl(), value);
}

FixedVectorsReader::FixedVectorsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "FixedVectors", schema_) {
}

void FixedVectorsReader::ReadFixedIntVectorImpl(std::array<int32_t, 5>& value) {
  yardl::hdf5::ReadScalarDataset<std::array<int32_t, 5>, std::array<int32_t, 5>>(group_, "fixedIntVector", yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_INT32, 5), value);
}

void FixedVectorsReader::ReadFixedSimpleRecordVectorImpl(std::array<test_model::SimpleRecord, 3>& value) {
  yardl::hdf5::ReadScalarDataset<std::array<test_model::SimpleRecord, 3>, std::array<test_model::SimpleRecord, 3>>(group_, "fixedSimpleRecordVector", yardl::hdf5::FixedVectorDdl(test_model::hdf5::GetSimpleRecordHdf5Ddl(), 3), value);
}

void FixedVectorsReader::ReadFixedRecordWithVlensVectorImpl(std::array<test_model::RecordWithVlens, 2>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerFixedVector<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens, 2>, std::array<test_model::RecordWithVlens, 2>>(group_, "fixedRecordWithVlensVector", yardl::hdf5::FixedVectorDdl(test_model::hdf5::GetRecordWithVlensHdf5Ddl(), 2), value);
}

void FixedVectorsReader::ReadRecordWithFixedVectorsImpl(test_model::RecordWithFixedVectors& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_RecordWithFixedVectors, test_model::RecordWithFixedVectors>(group_, "recordWithFixedVectors", test_model::hdf5::GetRecordWithFixedVectorsHdf5Ddl(), value);
}

StreamsWriter::StreamsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "Streams", schema_) {
}

void StreamsWriter::WriteIntDataImpl(int32_t const& value) {
  if (!intData_dataset_state_) {
    intData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "intData", H5::PredType::NATIVE_INT32, 0);
  }

  intData_dataset_state_->Append<int32_t, int32_t>(value);
}

void StreamsWriter::WriteIntDataImpl(std::vector<int32_t> const& values) {
  if (!intData_dataset_state_) {
    intData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "intData", H5::PredType::NATIVE_INT32, 0);
  }

  intData_dataset_state_->AppendBatch<int32_t, int32_t>(values);
}

void StreamsWriter::EndIntDataImpl() {
  if (!intData_dataset_state_) {
    intData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "intData", H5::PredType::NATIVE_INT32, 0);
  }

  intData_dataset_state_.reset();
}

void StreamsWriter::WriteOptionalIntDataImpl(std::optional<int32_t> const& value) {
  if (!optionalIntData_dataset_state_) {
    optionalIntData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "optionalIntData", yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), 0);
  }

  optionalIntData_dataset_state_->Append<yardl::hdf5::InnerOptional<int32_t, int32_t>, std::optional<int32_t>>(value);
}

void StreamsWriter::WriteOptionalIntDataImpl(std::vector<std::optional<int32_t>> const& values) {
  if (!optionalIntData_dataset_state_) {
    optionalIntData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "optionalIntData", yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), 0);
  }

  optionalIntData_dataset_state_->AppendBatch<yardl::hdf5::InnerOptional<int32_t, int32_t>, std::optional<int32_t>>(values);
}

void StreamsWriter::EndOptionalIntDataImpl() {
  if (!optionalIntData_dataset_state_) {
    optionalIntData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "optionalIntData", yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), 0);
  }

  optionalIntData_dataset_state_.reset();
}

void StreamsWriter::WriteRecordWithOptionalVectorDataImpl(test_model::RecordWithOptionalVector const& value) {
  if (!recordWithOptionalVectorData_dataset_state_) {
    recordWithOptionalVectorData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "recordWithOptionalVectorData", test_model::hdf5::GetRecordWithOptionalVectorHdf5Ddl(), std::max(sizeof(test_model::hdf5::_Inner_RecordWithOptionalVector), sizeof(test_model::RecordWithOptionalVector)));
  }

  recordWithOptionalVectorData_dataset_state_->Append<test_model::hdf5::_Inner_RecordWithOptionalVector, test_model::RecordWithOptionalVector>(value);
}

void StreamsWriter::WriteRecordWithOptionalVectorDataImpl(std::vector<test_model::RecordWithOptionalVector> const& values) {
  if (!recordWithOptionalVectorData_dataset_state_) {
    recordWithOptionalVectorData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "recordWithOptionalVectorData", test_model::hdf5::GetRecordWithOptionalVectorHdf5Ddl(), std::max(sizeof(test_model::hdf5::_Inner_RecordWithOptionalVector), sizeof(test_model::RecordWithOptionalVector)));
  }

  recordWithOptionalVectorData_dataset_state_->AppendBatch<test_model::hdf5::_Inner_RecordWithOptionalVector, test_model::RecordWithOptionalVector>(values);
}

void StreamsWriter::EndRecordWithOptionalVectorDataImpl() {
  if (!recordWithOptionalVectorData_dataset_state_) {
    recordWithOptionalVectorData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "recordWithOptionalVectorData", test_model::hdf5::GetRecordWithOptionalVectorHdf5Ddl(), std::max(sizeof(test_model::hdf5::_Inner_RecordWithOptionalVector), sizeof(test_model::RecordWithOptionalVector)));
  }

  recordWithOptionalVectorData_dataset_state_.reset();
}

void StreamsWriter::WriteFixedVectorImpl(std::array<int32_t, 3> const& value) {
  if (!fixedVector_dataset_state_) {
    fixedVector_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "fixedVector", yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_INT32, 3), 0);
  }

  fixedVector_dataset_state_->Append<std::array<int32_t, 3>, std::array<int32_t, 3>>(value);
}

void StreamsWriter::WriteFixedVectorImpl(std::vector<std::array<int32_t, 3>> const& values) {
  if (!fixedVector_dataset_state_) {
    fixedVector_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "fixedVector", yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_INT32, 3), 0);
  }

  fixedVector_dataset_state_->AppendBatch<std::array<int32_t, 3>, std::array<int32_t, 3>>(values);
}

void StreamsWriter::EndFixedVectorImpl() {
  if (!fixedVector_dataset_state_) {
    fixedVector_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "fixedVector", yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_INT32, 3), 0);
  }

  fixedVector_dataset_state_.reset();
}

StreamsReader::StreamsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "Streams", schema_) {
}

bool StreamsReader::ReadIntDataImpl(int32_t& value) {
  if (!intData_dataset_state_) {
    intData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "intData", H5::PredType::NATIVE_INT32, 0);
  }

  bool has_value = intData_dataset_state_->Read<int32_t, int32_t>(value);
  if (!has_value) {
    intData_dataset_state_.reset();
  }

  return has_value;
}

bool StreamsReader::ReadIntDataImpl(std::vector<int32_t>& values) {
  if (!intData_dataset_state_) {
    intData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "intData", H5::PredType::NATIVE_INT32);
  }

  bool has_more = intData_dataset_state_->ReadBatch<int32_t, int32_t>(values);
  if (!has_more) {
    intData_dataset_state_.reset();
  }

  return has_more;
}

bool StreamsReader::ReadOptionalIntDataImpl(std::optional<int32_t>& value) {
  if (!optionalIntData_dataset_state_) {
    optionalIntData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "optionalIntData", yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), 0);
  }

  bool has_value = optionalIntData_dataset_state_->Read<yardl::hdf5::InnerOptional<int32_t, int32_t>, std::optional<int32_t>>(value);
  if (!has_value) {
    optionalIntData_dataset_state_.reset();
  }

  return has_value;
}

bool StreamsReader::ReadOptionalIntDataImpl(std::vector<std::optional<int32_t>>& values) {
  if (!optionalIntData_dataset_state_) {
    optionalIntData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "optionalIntData", yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32));
  }

  bool has_more = optionalIntData_dataset_state_->ReadBatch<yardl::hdf5::InnerOptional<int32_t, int32_t>, std::optional<int32_t>>(values);
  if (!has_more) {
    optionalIntData_dataset_state_.reset();
  }

  return has_more;
}

bool StreamsReader::ReadRecordWithOptionalVectorDataImpl(test_model::RecordWithOptionalVector& value) {
  if (!recordWithOptionalVectorData_dataset_state_) {
    recordWithOptionalVectorData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "recordWithOptionalVectorData", test_model::hdf5::GetRecordWithOptionalVectorHdf5Ddl(), std::max(sizeof(test_model::hdf5::_Inner_RecordWithOptionalVector), sizeof(test_model::RecordWithOptionalVector)));
  }

  bool has_value = recordWithOptionalVectorData_dataset_state_->Read<test_model::hdf5::_Inner_RecordWithOptionalVector, test_model::RecordWithOptionalVector>(value);
  if (!has_value) {
    recordWithOptionalVectorData_dataset_state_.reset();
  }

  return has_value;
}

bool StreamsReader::ReadRecordWithOptionalVectorDataImpl(std::vector<test_model::RecordWithOptionalVector>& values) {
  if (!recordWithOptionalVectorData_dataset_state_) {
    recordWithOptionalVectorData_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "recordWithOptionalVectorData", test_model::hdf5::GetRecordWithOptionalVectorHdf5Ddl());
  }

  bool has_more = recordWithOptionalVectorData_dataset_state_->ReadBatch<test_model::hdf5::_Inner_RecordWithOptionalVector, test_model::RecordWithOptionalVector>(values);
  if (!has_more) {
    recordWithOptionalVectorData_dataset_state_.reset();
  }

  return has_more;
}

bool StreamsReader::ReadFixedVectorImpl(std::array<int32_t, 3>& value) {
  if (!fixedVector_dataset_state_) {
    fixedVector_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "fixedVector", yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_INT32, 3), 0);
  }

  bool has_value = fixedVector_dataset_state_->Read<std::array<int32_t, 3>, std::array<int32_t, 3>>(value);
  if (!has_value) {
    fixedVector_dataset_state_.reset();
  }

  return has_value;
}

bool StreamsReader::ReadFixedVectorImpl(std::vector<std::array<int32_t, 3>>& values) {
  if (!fixedVector_dataset_state_) {
    fixedVector_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "fixedVector", yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_INT32, 3));
  }

  bool has_more = fixedVector_dataset_state_->ReadBatch<std::array<int32_t, 3>, std::array<int32_t, 3>>(values);
  if (!has_more) {
    fixedVector_dataset_state_.reset();
  }

  return has_more;
}

FixedArraysWriter::FixedArraysWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "FixedArrays", schema_) {
}

void FixedArraysWriter::WriteIntsImpl(yardl::FixedNDArray<int32_t, 2, 3> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::FixedNDArray<int32_t, 2, 3>, yardl::FixedNDArray<int32_t, 2, 3>>(group_, "ints", yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_INT32, {2, 3}), value);
}

void FixedArraysWriter::WriteFixedSimpleRecordArrayImpl(yardl::FixedNDArray<test_model::SimpleRecord, 3, 2> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::FixedNDArray<test_model::SimpleRecord, 3, 2>, yardl::FixedNDArray<test_model::SimpleRecord, 3, 2>>(group_, "fixedSimpleRecordArray", yardl::hdf5::FixedNDArrayDdl(test_model::hdf5::GetSimpleRecordHdf5Ddl(), {3, 2}), value);
}

void FixedArraysWriter::WriteFixedRecordWithVlensArrayImpl(yardl::FixedNDArray<test_model::RecordWithVlens, 2, 2> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerFixedNdArray<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens, 2, 2>, yardl::FixedNDArray<test_model::RecordWithVlens, 2, 2>>(group_, "fixedRecordWithVlensArray", yardl::hdf5::FixedNDArrayDdl(test_model::hdf5::GetRecordWithVlensHdf5Ddl(), {2, 2}), value);
}

void FixedArraysWriter::WriteRecordWithFixedArraysImpl(test_model::RecordWithFixedArrays const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_RecordWithFixedArrays, test_model::RecordWithFixedArrays>(group_, "recordWithFixedArrays", test_model::hdf5::GetRecordWithFixedArraysHdf5Ddl(), value);
}

void FixedArraysWriter::WriteNamedArrayImpl(test_model::NamedFixedNDArray const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::FixedNDArray<int32_t, 2, 4>, test_model::NamedFixedNDArray>(group_, "namedArray", yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_INT32, {2, 4}), value);
}

FixedArraysReader::FixedArraysReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "FixedArrays", schema_) {
}

void FixedArraysReader::ReadIntsImpl(yardl::FixedNDArray<int32_t, 2, 3>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::FixedNDArray<int32_t, 2, 3>, yardl::FixedNDArray<int32_t, 2, 3>>(group_, "ints", yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_INT32, {2, 3}), value);
}

void FixedArraysReader::ReadFixedSimpleRecordArrayImpl(yardl::FixedNDArray<test_model::SimpleRecord, 3, 2>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::FixedNDArray<test_model::SimpleRecord, 3, 2>, yardl::FixedNDArray<test_model::SimpleRecord, 3, 2>>(group_, "fixedSimpleRecordArray", yardl::hdf5::FixedNDArrayDdl(test_model::hdf5::GetSimpleRecordHdf5Ddl(), {3, 2}), value);
}

void FixedArraysReader::ReadFixedRecordWithVlensArrayImpl(yardl::FixedNDArray<test_model::RecordWithVlens, 2, 2>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerFixedNdArray<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens, 2, 2>, yardl::FixedNDArray<test_model::RecordWithVlens, 2, 2>>(group_, "fixedRecordWithVlensArray", yardl::hdf5::FixedNDArrayDdl(test_model::hdf5::GetRecordWithVlensHdf5Ddl(), {2, 2}), value);
}

void FixedArraysReader::ReadRecordWithFixedArraysImpl(test_model::RecordWithFixedArrays& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_RecordWithFixedArrays, test_model::RecordWithFixedArrays>(group_, "recordWithFixedArrays", test_model::hdf5::GetRecordWithFixedArraysHdf5Ddl(), value);
}

void FixedArraysReader::ReadNamedArrayImpl(test_model::NamedFixedNDArray& value) {
  yardl::hdf5::ReadScalarDataset<yardl::FixedNDArray<int32_t, 2, 4>, test_model::NamedFixedNDArray>(group_, "namedArray", yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_INT32, {2, 4}), value);
}

NDArraysWriter::NDArraysWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "NDArrays", schema_) {
}

void NDArraysWriter::WriteIntsImpl(yardl::NDArray<int32_t, 2> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerNdArray<int32_t, int32_t, 2>, yardl::NDArray<int32_t, 2>>(group_, "ints", yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32), value);
}

void NDArraysWriter::WriteSimpleRecordArrayImpl(yardl::NDArray<test_model::SimpleRecord, 2> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerNdArray<test_model::SimpleRecord, test_model::SimpleRecord, 2>, yardl::NDArray<test_model::SimpleRecord, 2>>(group_, "simpleRecordArray", yardl::hdf5::NDArrayDdl<test_model::SimpleRecord, test_model::SimpleRecord, 2>(test_model::hdf5::GetSimpleRecordHdf5Ddl()), value);
}

void NDArraysWriter::WriteRecordWithVlensArrayImpl(yardl::NDArray<test_model::RecordWithVlens, 2> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerNdArray<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens, 2>, yardl::NDArray<test_model::RecordWithVlens, 2>>(group_, "recordWithVlensArray", yardl::hdf5::NDArrayDdl<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens, 2>(test_model::hdf5::GetRecordWithVlensHdf5Ddl()), value);
}

void NDArraysWriter::WriteRecordWithNDArraysImpl(test_model::RecordWithNDArrays const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_RecordWithNDArrays, test_model::RecordWithNDArrays>(group_, "recordWithNDArrays", test_model::hdf5::GetRecordWithNDArraysHdf5Ddl(), value);
}

void NDArraysWriter::WriteNamedArrayImpl(test_model::NamedNDArray const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerNdArray<int32_t, int32_t, 2>, test_model::NamedNDArray>(group_, "namedArray", yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32), value);
}

NDArraysReader::NDArraysReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "NDArrays", schema_) {
}

void NDArraysReader::ReadIntsImpl(yardl::NDArray<int32_t, 2>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerNdArray<int32_t, int32_t, 2>, yardl::NDArray<int32_t, 2>>(group_, "ints", yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32), value);
}

void NDArraysReader::ReadSimpleRecordArrayImpl(yardl::NDArray<test_model::SimpleRecord, 2>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerNdArray<test_model::SimpleRecord, test_model::SimpleRecord, 2>, yardl::NDArray<test_model::SimpleRecord, 2>>(group_, "simpleRecordArray", yardl::hdf5::NDArrayDdl<test_model::SimpleRecord, test_model::SimpleRecord, 2>(test_model::hdf5::GetSimpleRecordHdf5Ddl()), value);
}

void NDArraysReader::ReadRecordWithVlensArrayImpl(yardl::NDArray<test_model::RecordWithVlens, 2>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerNdArray<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens, 2>, yardl::NDArray<test_model::RecordWithVlens, 2>>(group_, "recordWithVlensArray", yardl::hdf5::NDArrayDdl<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens, 2>(test_model::hdf5::GetRecordWithVlensHdf5Ddl()), value);
}

void NDArraysReader::ReadRecordWithNDArraysImpl(test_model::RecordWithNDArrays& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_RecordWithNDArrays, test_model::RecordWithNDArrays>(group_, "recordWithNDArrays", test_model::hdf5::GetRecordWithNDArraysHdf5Ddl(), value);
}

void NDArraysReader::ReadNamedArrayImpl(test_model::NamedNDArray& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerNdArray<int32_t, int32_t, 2>, test_model::NamedNDArray>(group_, "namedArray", yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32), value);
}

NDArraysSingleDimensionWriter::NDArraysSingleDimensionWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "NDArraysSingleDimension", schema_) {
}

void NDArraysSingleDimensionWriter::WriteIntsImpl(yardl::NDArray<int32_t, 1> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerVlen<int32_t, int32_t>, yardl::NDArray<int32_t, 1>>(group_, "ints", yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32), value);
}

void NDArraysSingleDimensionWriter::WriteSimpleRecordArrayImpl(yardl::NDArray<test_model::SimpleRecord, 1> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerVlen<test_model::SimpleRecord, test_model::SimpleRecord>, yardl::NDArray<test_model::SimpleRecord, 1>>(group_, "simpleRecordArray", yardl::hdf5::InnerVlenDdl(test_model::hdf5::GetSimpleRecordHdf5Ddl()), value);
}

void NDArraysSingleDimensionWriter::WriteRecordWithVlensArrayImpl(yardl::NDArray<test_model::RecordWithVlens, 1> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerVlen<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>, yardl::NDArray<test_model::RecordWithVlens, 1>>(group_, "recordWithVlensArray", yardl::hdf5::InnerVlenDdl(test_model::hdf5::GetRecordWithVlensHdf5Ddl()), value);
}

void NDArraysSingleDimensionWriter::WriteRecordWithNDArraysImpl(test_model::RecordWithNDArraysSingleDimension const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_RecordWithNDArraysSingleDimension, test_model::RecordWithNDArraysSingleDimension>(group_, "recordWithNDArrays", test_model::hdf5::GetRecordWithNDArraysSingleDimensionHdf5Ddl(), value);
}

NDArraysSingleDimensionReader::NDArraysSingleDimensionReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "NDArraysSingleDimension", schema_) {
}

void NDArraysSingleDimensionReader::ReadIntsImpl(yardl::NDArray<int32_t, 1>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerVlen<int32_t, int32_t>, yardl::NDArray<int32_t, 1>>(group_, "ints", yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32), value);
}

void NDArraysSingleDimensionReader::ReadSimpleRecordArrayImpl(yardl::NDArray<test_model::SimpleRecord, 1>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerVlen<test_model::SimpleRecord, test_model::SimpleRecord>, yardl::NDArray<test_model::SimpleRecord, 1>>(group_, "simpleRecordArray", yardl::hdf5::InnerVlenDdl(test_model::hdf5::GetSimpleRecordHdf5Ddl()), value);
}

void NDArraysSingleDimensionReader::ReadRecordWithVlensArrayImpl(yardl::NDArray<test_model::RecordWithVlens, 1>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerVlen<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>, yardl::NDArray<test_model::RecordWithVlens, 1>>(group_, "recordWithVlensArray", yardl::hdf5::InnerVlenDdl(test_model::hdf5::GetRecordWithVlensHdf5Ddl()), value);
}

void NDArraysSingleDimensionReader::ReadRecordWithNDArraysImpl(test_model::RecordWithNDArraysSingleDimension& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_RecordWithNDArraysSingleDimension, test_model::RecordWithNDArraysSingleDimension>(group_, "recordWithNDArrays", test_model::hdf5::GetRecordWithNDArraysSingleDimensionHdf5Ddl(), value);
}

DynamicNDArraysWriter::DynamicNDArraysWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "DynamicNDArrays", schema_) {
}

void DynamicNDArraysWriter::WriteIntsImpl(yardl::DynamicNDArray<int32_t> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerDynamicNdArray<int32_t, int32_t>, yardl::DynamicNDArray<int32_t>>(group_, "ints", yardl::hdf5::DynamicNDArrayDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), value);
}

void DynamicNDArraysWriter::WriteSimpleRecordArrayImpl(yardl::DynamicNDArray<test_model::SimpleRecord> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerDynamicNdArray<test_model::SimpleRecord, test_model::SimpleRecord>, yardl::DynamicNDArray<test_model::SimpleRecord>>(group_, "simpleRecordArray", yardl::hdf5::DynamicNDArrayDdl<test_model::SimpleRecord, test_model::SimpleRecord>(test_model::hdf5::GetSimpleRecordHdf5Ddl()), value);
}

void DynamicNDArraysWriter::WriteRecordWithVlensArrayImpl(yardl::DynamicNDArray<test_model::RecordWithVlens> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerDynamicNdArray<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>, yardl::DynamicNDArray<test_model::RecordWithVlens>>(group_, "recordWithVlensArray", yardl::hdf5::DynamicNDArrayDdl<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>(test_model::hdf5::GetRecordWithVlensHdf5Ddl()), value);
}

void DynamicNDArraysWriter::WriteRecordWithDynamicNDArraysImpl(test_model::RecordWithDynamicNDArrays const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_RecordWithDynamicNDArrays, test_model::RecordWithDynamicNDArrays>(group_, "recordWithDynamicNDArrays", test_model::hdf5::GetRecordWithDynamicNDArraysHdf5Ddl(), value);
}

DynamicNDArraysReader::DynamicNDArraysReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "DynamicNDArrays", schema_) {
}

void DynamicNDArraysReader::ReadIntsImpl(yardl::DynamicNDArray<int32_t>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerDynamicNdArray<int32_t, int32_t>, yardl::DynamicNDArray<int32_t>>(group_, "ints", yardl::hdf5::DynamicNDArrayDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), value);
}

void DynamicNDArraysReader::ReadSimpleRecordArrayImpl(yardl::DynamicNDArray<test_model::SimpleRecord>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerDynamicNdArray<test_model::SimpleRecord, test_model::SimpleRecord>, yardl::DynamicNDArray<test_model::SimpleRecord>>(group_, "simpleRecordArray", yardl::hdf5::DynamicNDArrayDdl<test_model::SimpleRecord, test_model::SimpleRecord>(test_model::hdf5::GetSimpleRecordHdf5Ddl()), value);
}

void DynamicNDArraysReader::ReadRecordWithVlensArrayImpl(yardl::DynamicNDArray<test_model::RecordWithVlens>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerDynamicNdArray<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>, yardl::DynamicNDArray<test_model::RecordWithVlens>>(group_, "recordWithVlensArray", yardl::hdf5::DynamicNDArrayDdl<test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>(test_model::hdf5::GetRecordWithVlensHdf5Ddl()), value);
}

void DynamicNDArraysReader::ReadRecordWithDynamicNDArraysImpl(test_model::RecordWithDynamicNDArrays& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_RecordWithDynamicNDArrays, test_model::RecordWithDynamicNDArrays>(group_, "recordWithDynamicNDArrays", test_model::hdf5::GetRecordWithDynamicNDArraysHdf5Ddl(), value);
}

MapsWriter::MapsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "Maps", schema_) {
}

void MapsWriter::WriteStringToIntImpl(std::unordered_map<std::string, int32_t> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerMap<yardl::hdf5::InnerVlenString, std::string, int32_t, int32_t>, std::unordered_map<std::string, int32_t>>(group_, "stringToInt", yardl::hdf5::InnerMapDdl<yardl::hdf5::InnerVlenString, int32_t>(yardl::hdf5::InnerVlenStringDdl(), H5::PredType::NATIVE_INT32), value);
}

void MapsWriter::WriteStringToUnionImpl(std::unordered_map<std::string, std::variant<std::string, int32_t>> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerMap<yardl::hdf5::InnerVlenString, std::string, ::InnerUnion2<yardl::hdf5::InnerVlenString, std::string, int32_t, int32_t>, std::variant<std::string, int32_t>>, std::unordered_map<std::string, std::variant<std::string, int32_t>>>(group_, "stringToUnion", yardl::hdf5::InnerMapDdl<yardl::hdf5::InnerVlenString, ::InnerUnion2<yardl::hdf5::InnerVlenString, std::string, int32_t, int32_t>>(yardl::hdf5::InnerVlenStringDdl(), ::InnerUnion2Ddl<yardl::hdf5::InnerVlenString, std::string, int32_t, int32_t>(false, yardl::hdf5::InnerVlenStringDdl(), "string", H5::PredType::NATIVE_INT32, "int32")), value);
}

void MapsWriter::WriteAliasedGenericImpl(test_model::AliasedMap<std::string, int32_t> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerMap<yardl::hdf5::InnerVlenString, std::string, int32_t, int32_t>, test_model::AliasedMap<std::string, int32_t>>(group_, "aliasedGeneric", yardl::hdf5::InnerMapDdl<yardl::hdf5::InnerVlenString, int32_t>(yardl::hdf5::InnerVlenStringDdl(), H5::PredType::NATIVE_INT32), value);
}

MapsReader::MapsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "Maps", schema_) {
}

void MapsReader::ReadStringToIntImpl(std::unordered_map<std::string, int32_t>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerMap<yardl::hdf5::InnerVlenString, std::string, int32_t, int32_t>, std::unordered_map<std::string, int32_t>>(group_, "stringToInt", yardl::hdf5::InnerMapDdl<yardl::hdf5::InnerVlenString, int32_t>(yardl::hdf5::InnerVlenStringDdl(), H5::PredType::NATIVE_INT32), value);
}

void MapsReader::ReadStringToUnionImpl(std::unordered_map<std::string, std::variant<std::string, int32_t>>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerMap<yardl::hdf5::InnerVlenString, std::string, ::InnerUnion2<yardl::hdf5::InnerVlenString, std::string, int32_t, int32_t>, std::variant<std::string, int32_t>>, std::unordered_map<std::string, std::variant<std::string, int32_t>>>(group_, "stringToUnion", yardl::hdf5::InnerMapDdl<yardl::hdf5::InnerVlenString, ::InnerUnion2<yardl::hdf5::InnerVlenString, std::string, int32_t, int32_t>>(yardl::hdf5::InnerVlenStringDdl(), ::InnerUnion2Ddl<yardl::hdf5::InnerVlenString, std::string, int32_t, int32_t>(false, yardl::hdf5::InnerVlenStringDdl(), "string", H5::PredType::NATIVE_INT32, "int32")), value);
}

void MapsReader::ReadAliasedGenericImpl(test_model::AliasedMap<std::string, int32_t>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerMap<yardl::hdf5::InnerVlenString, std::string, int32_t, int32_t>, test_model::AliasedMap<std::string, int32_t>>(group_, "aliasedGeneric", yardl::hdf5::InnerMapDdl<yardl::hdf5::InnerVlenString, int32_t>(yardl::hdf5::InnerVlenStringDdl(), H5::PredType::NATIVE_INT32), value);
}

UnionsWriter::UnionsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "Unions", schema_) {
}

void UnionsWriter::WriteIntOrSimpleRecordImpl(std::variant<int32_t, test_model::SimpleRecord> const& value) {
  yardl::hdf5::WriteScalarDataset<::InnerUnion2<int32_t, int32_t, test_model::SimpleRecord, test_model::SimpleRecord>, std::variant<int32_t, test_model::SimpleRecord>>(group_, "intOrSimpleRecord", ::InnerUnion2Ddl<int32_t, int32_t, test_model::SimpleRecord, test_model::SimpleRecord>(false, H5::PredType::NATIVE_INT32, "int32", test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord"), value);
}

void UnionsWriter::WriteIntOrRecordWithVlensImpl(std::variant<int32_t, test_model::RecordWithVlens> const& value) {
  yardl::hdf5::WriteScalarDataset<::InnerUnion2<int32_t, int32_t, test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>, std::variant<int32_t, test_model::RecordWithVlens>>(group_, "intOrRecordWithVlens", ::InnerUnion2Ddl<int32_t, int32_t, test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>(false, H5::PredType::NATIVE_INT32, "int32", test_model::hdf5::GetRecordWithVlensHdf5Ddl(), "RecordWithVlens"), value);
}

void UnionsWriter::WriteMonosotateOrIntOrSimpleRecordImpl(std::variant<std::monostate, int32_t, test_model::SimpleRecord> const& value) {
  yardl::hdf5::WriteScalarDataset<::InnerUnion2<int32_t, int32_t, test_model::SimpleRecord, test_model::SimpleRecord>, std::variant<std::monostate, int32_t, test_model::SimpleRecord>>(group_, "monosotateOrIntOrSimpleRecord", ::InnerUnion2Ddl<int32_t, int32_t, test_model::SimpleRecord, test_model::SimpleRecord>(true, H5::PredType::NATIVE_INT32, "int32", test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord"), value);
}

void UnionsWriter::WriteRecordWithUnionsImpl(test_model::RecordWithUnions const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_RecordWithUnions, test_model::RecordWithUnions>(group_, "recordWithUnions", test_model::hdf5::GetRecordWithUnionsHdf5Ddl(), value);
}

UnionsReader::UnionsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "Unions", schema_) {
}

void UnionsReader::ReadIntOrSimpleRecordImpl(std::variant<int32_t, test_model::SimpleRecord>& value) {
  yardl::hdf5::ReadScalarDataset<::InnerUnion2<int32_t, int32_t, test_model::SimpleRecord, test_model::SimpleRecord>, std::variant<int32_t, test_model::SimpleRecord>>(group_, "intOrSimpleRecord", ::InnerUnion2Ddl<int32_t, int32_t, test_model::SimpleRecord, test_model::SimpleRecord>(false, H5::PredType::NATIVE_INT32, "int32", test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord"), value);
}

void UnionsReader::ReadIntOrRecordWithVlensImpl(std::variant<int32_t, test_model::RecordWithVlens>& value) {
  yardl::hdf5::ReadScalarDataset<::InnerUnion2<int32_t, int32_t, test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>, std::variant<int32_t, test_model::RecordWithVlens>>(group_, "intOrRecordWithVlens", ::InnerUnion2Ddl<int32_t, int32_t, test_model::hdf5::_Inner_RecordWithVlens, test_model::RecordWithVlens>(false, H5::PredType::NATIVE_INT32, "int32", test_model::hdf5::GetRecordWithVlensHdf5Ddl(), "RecordWithVlens"), value);
}

void UnionsReader::ReadMonosotateOrIntOrSimpleRecordImpl(std::variant<std::monostate, int32_t, test_model::SimpleRecord>& value) {
  yardl::hdf5::ReadScalarDataset<::InnerUnion2<int32_t, int32_t, test_model::SimpleRecord, test_model::SimpleRecord>, std::variant<std::monostate, int32_t, test_model::SimpleRecord>>(group_, "monosotateOrIntOrSimpleRecord", ::InnerUnion2Ddl<int32_t, int32_t, test_model::SimpleRecord, test_model::SimpleRecord>(true, H5::PredType::NATIVE_INT32, "int32", test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord"), value);
}

void UnionsReader::ReadRecordWithUnionsImpl(test_model::RecordWithUnions& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_RecordWithUnions, test_model::RecordWithUnions>(group_, "recordWithUnions", test_model::hdf5::GetRecordWithUnionsHdf5Ddl(), value);
}

StreamsOfUnionsWriter::StreamsOfUnionsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "StreamsOfUnions", schema_) {
}

void StreamsOfUnionsWriter::WriteIntOrSimpleRecordImpl(std::variant<int32_t, test_model::SimpleRecord> const& value) {
  if (!intOrSimpleRecord_dataset_state_) {
    intOrSimpleRecord_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<2>>(group_, "intOrSimpleRecord", false, std::make_tuple(H5::PredType::NATIVE_INT32, "int32", static_cast<size_t>(0)), std::make_tuple(test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord", static_cast<size_t>(0)));
  }

  std::visit(
    [&](auto const& arg) {
      using T = std::decay_t<decltype(arg)>;
      if constexpr (std::is_same_v<T, int32_t>) {
        intOrSimpleRecord_dataset_state_->Append<int32_t, int32_t>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, test_model::SimpleRecord>) {
        intOrSimpleRecord_dataset_state_->Append<test_model::SimpleRecord, test_model::SimpleRecord>(static_cast<int8_t>(value.index()), arg);
      } else {
        static_assert(yardl::hdf5::always_false_v<T>, "non-exhaustive visitor!");
      }
    },
    value);
}

void StreamsOfUnionsWriter::EndIntOrSimpleRecordImpl() {
  if (!intOrSimpleRecord_dataset_state_) {
    intOrSimpleRecord_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<2>>(group_, "intOrSimpleRecord", false, std::make_tuple(H5::PredType::NATIVE_INT32, "int32", static_cast<size_t>(0)), std::make_tuple(test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord", static_cast<size_t>(0)));
  }

  intOrSimpleRecord_dataset_state_.reset();
}

void StreamsOfUnionsWriter::WriteNullableIntOrSimpleRecordImpl(std::variant<std::monostate, int32_t, test_model::SimpleRecord> const& value) {
  if (!nullableIntOrSimpleRecord_dataset_state_) {
    nullableIntOrSimpleRecord_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<2>>(group_, "nullableIntOrSimpleRecord", true, std::make_tuple(H5::PredType::NATIVE_INT32, "int32", static_cast<size_t>(0)), std::make_tuple(test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord", static_cast<size_t>(0)));
  }

  std::visit(
    [&](auto const& arg) {
      using T = std::decay_t<decltype(arg)>;
      if constexpr (std::is_same_v<T, std::monostate>) {
        nullableIntOrSimpleRecord_dataset_state_->Append<std::monostate, std::monostate>(static_cast<int8_t>(value.index()) -1, arg);
      } else if constexpr (std::is_same_v<T, int32_t>) {
        nullableIntOrSimpleRecord_dataset_state_->Append<int32_t, int32_t>(static_cast<int8_t>(value.index()) -1, arg);
      } else if constexpr (std::is_same_v<T, test_model::SimpleRecord>) {
        nullableIntOrSimpleRecord_dataset_state_->Append<test_model::SimpleRecord, test_model::SimpleRecord>(static_cast<int8_t>(value.index()) -1, arg);
      } else {
        static_assert(yardl::hdf5::always_false_v<T>, "non-exhaustive visitor!");
      }
    },
    value);
}

void StreamsOfUnionsWriter::EndNullableIntOrSimpleRecordImpl() {
  if (!nullableIntOrSimpleRecord_dataset_state_) {
    nullableIntOrSimpleRecord_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<2>>(group_, "nullableIntOrSimpleRecord", true, std::make_tuple(H5::PredType::NATIVE_INT32, "int32", static_cast<size_t>(0)), std::make_tuple(test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord", static_cast<size_t>(0)));
  }

  nullableIntOrSimpleRecord_dataset_state_.reset();
}

void StreamsOfUnionsWriter::Flush() {
  if (intOrSimpleRecord_dataset_state_) {
    intOrSimpleRecord_dataset_state_->Flush();
  }
  if (nullableIntOrSimpleRecord_dataset_state_) {
    nullableIntOrSimpleRecord_dataset_state_->Flush();
  }
}

StreamsOfUnionsReader::StreamsOfUnionsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "StreamsOfUnions", schema_) {
}

bool StreamsOfUnionsReader::ReadIntOrSimpleRecordImpl(std::variant<int32_t, test_model::SimpleRecord>& value) {
  if (!intOrSimpleRecord_dataset_state_) {
    intOrSimpleRecord_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetReader<2>>(group_, "intOrSimpleRecord", false, std::make_tuple(H5::PredType::NATIVE_INT32, "int32", static_cast<size_t>(0)), std::make_tuple(test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord", static_cast<size_t>(0)));
  }

  auto [has_result, type_index, reader] = intOrSimpleRecord_dataset_state_->ReadIndex();
  if (!has_result) {
    intOrSimpleRecord_dataset_state_.reset();
    return false;
  }

  switch (type_index) {
  case 0: {
    int32_t& ref = value.emplace<0>();
    reader->Read<int32_t, int32_t>(ref);
    break;
  }
  case 1: {
    test_model::SimpleRecord& ref = value.emplace<1>();
    reader->Read<test_model::SimpleRecord, test_model::SimpleRecord>(ref);
    break;
  }
  }

  return true;
}

bool StreamsOfUnionsReader::ReadNullableIntOrSimpleRecordImpl(std::variant<std::monostate, int32_t, test_model::SimpleRecord>& value) {
  if (!nullableIntOrSimpleRecord_dataset_state_) {
    nullableIntOrSimpleRecord_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetReader<2>>(group_, "nullableIntOrSimpleRecord", true, std::make_tuple(H5::PredType::NATIVE_INT32, "int32", static_cast<size_t>(0)), std::make_tuple(test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord", static_cast<size_t>(0)));
  }

  auto [has_result, type_index, reader] = nullableIntOrSimpleRecord_dataset_state_->ReadIndex();
  if (!has_result) {
    nullableIntOrSimpleRecord_dataset_state_.reset();
    return false;
  }

  switch (type_index) {
  case -1:
    value.emplace<0>();
    break;
  case 0: {
    int32_t& ref = value.emplace<1>();
    reader->Read<int32_t, int32_t>(ref);
    break;
  }
  case 1: {
    test_model::SimpleRecord& ref = value.emplace<2>();
    reader->Read<test_model::SimpleRecord, test_model::SimpleRecord>(ref);
    break;
  }
  }

  return true;
}

EnumsWriter::EnumsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "Enums", schema_) {
}

void EnumsWriter::WriteSingleImpl(test_model::Fruits const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::Fruits, test_model::Fruits>(group_, "single", test_model::hdf5::GetFruitsHdf5Ddl(), value);
}

void EnumsWriter::WriteVecImpl(std::vector<test_model::Fruits> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerVlen<test_model::Fruits, test_model::Fruits>, std::vector<test_model::Fruits>>(group_, "vec", yardl::hdf5::InnerVlenDdl(test_model::hdf5::GetFruitsHdf5Ddl()), value);
}

void EnumsWriter::WriteSizeImpl(test_model::SizeBasedEnum const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::SizeBasedEnum, test_model::SizeBasedEnum>(group_, "size", test_model::hdf5::GetSizeBasedEnumHdf5Ddl(), value);
}

EnumsReader::EnumsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "Enums", schema_) {
}

void EnumsReader::ReadSingleImpl(test_model::Fruits& value) {
  yardl::hdf5::ReadScalarDataset<test_model::Fruits, test_model::Fruits>(group_, "single", test_model::hdf5::GetFruitsHdf5Ddl(), value);
}

void EnumsReader::ReadVecImpl(std::vector<test_model::Fruits>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerVlen<test_model::Fruits, test_model::Fruits>, std::vector<test_model::Fruits>>(group_, "vec", yardl::hdf5::InnerVlenDdl(test_model::hdf5::GetFruitsHdf5Ddl()), value);
}

void EnumsReader::ReadSizeImpl(test_model::SizeBasedEnum& value) {
  yardl::hdf5::ReadScalarDataset<test_model::SizeBasedEnum, test_model::SizeBasedEnum>(group_, "size", test_model::hdf5::GetSizeBasedEnumHdf5Ddl(), value);
}

FlagsWriter::FlagsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "Flags", schema_) {
}

void FlagsWriter::WriteDaysImpl(test_model::DaysOfWeek const& value) {
  if (!days_dataset_state_) {
    days_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "days", H5::PredType::NATIVE_INT32, 0);
  }

  days_dataset_state_->Append<test_model::DaysOfWeek, test_model::DaysOfWeek>(value);
}

void FlagsWriter::WriteDaysImpl(std::vector<test_model::DaysOfWeek> const& values) {
  if (!days_dataset_state_) {
    days_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "days", H5::PredType::NATIVE_INT32, 0);
  }

  days_dataset_state_->AppendBatch<test_model::DaysOfWeek, test_model::DaysOfWeek>(values);
}

void FlagsWriter::EndDaysImpl() {
  if (!days_dataset_state_) {
    days_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "days", H5::PredType::NATIVE_INT32, 0);
  }

  days_dataset_state_.reset();
}

void FlagsWriter::WriteFormatsImpl(test_model::TextFormat const& value) {
  if (!formats_dataset_state_) {
    formats_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "formats", H5::PredType::NATIVE_INT32, 0);
  }

  formats_dataset_state_->Append<test_model::TextFormat, test_model::TextFormat>(value);
}

void FlagsWriter::WriteFormatsImpl(std::vector<test_model::TextFormat> const& values) {
  if (!formats_dataset_state_) {
    formats_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "formats", H5::PredType::NATIVE_INT32, 0);
  }

  formats_dataset_state_->AppendBatch<test_model::TextFormat, test_model::TextFormat>(values);
}

void FlagsWriter::EndFormatsImpl() {
  if (!formats_dataset_state_) {
    formats_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "formats", H5::PredType::NATIVE_INT32, 0);
  }

  formats_dataset_state_.reset();
}

FlagsReader::FlagsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "Flags", schema_) {
}

bool FlagsReader::ReadDaysImpl(test_model::DaysOfWeek& value) {
  if (!days_dataset_state_) {
    days_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "days", H5::PredType::NATIVE_INT32, 0);
  }

  bool has_value = days_dataset_state_->Read<test_model::DaysOfWeek, test_model::DaysOfWeek>(value);
  if (!has_value) {
    days_dataset_state_.reset();
  }

  return has_value;
}

bool FlagsReader::ReadDaysImpl(std::vector<test_model::DaysOfWeek>& values) {
  if (!days_dataset_state_) {
    days_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "days", H5::PredType::NATIVE_INT32);
  }

  bool has_more = days_dataset_state_->ReadBatch<test_model::DaysOfWeek, test_model::DaysOfWeek>(values);
  if (!has_more) {
    days_dataset_state_.reset();
  }

  return has_more;
}

bool FlagsReader::ReadFormatsImpl(test_model::TextFormat& value) {
  if (!formats_dataset_state_) {
    formats_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "formats", H5::PredType::NATIVE_INT32, 0);
  }

  bool has_value = formats_dataset_state_->Read<test_model::TextFormat, test_model::TextFormat>(value);
  if (!has_value) {
    formats_dataset_state_.reset();
  }

  return has_value;
}

bool FlagsReader::ReadFormatsImpl(std::vector<test_model::TextFormat>& values) {
  if (!formats_dataset_state_) {
    formats_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "formats", H5::PredType::NATIVE_INT32);
  }

  bool has_more = formats_dataset_state_->ReadBatch<test_model::TextFormat, test_model::TextFormat>(values);
  if (!has_more) {
    formats_dataset_state_.reset();
  }

  return has_more;
}

StateTestWriter::StateTestWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "StateTest", schema_) {
}

void StateTestWriter::WriteAnIntImpl(int32_t const& value) {
  yardl::hdf5::WriteScalarDataset<int32_t, int32_t>(group_, "anInt", H5::PredType::NATIVE_INT32, value);
}

void StateTestWriter::WriteAStreamImpl(int32_t const& value) {
  if (!aStream_dataset_state_) {
    aStream_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "aStream", H5::PredType::NATIVE_INT32, 0);
  }

  aStream_dataset_state_->Append<int32_t, int32_t>(value);
}

void StateTestWriter::WriteAStreamImpl(std::vector<int32_t> const& values) {
  if (!aStream_dataset_state_) {
    aStream_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "aStream", H5::PredType::NATIVE_INT32, 0);
  }

  aStream_dataset_state_->AppendBatch<int32_t, int32_t>(values);
}

void StateTestWriter::EndAStreamImpl() {
  if (!aStream_dataset_state_) {
    aStream_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "aStream", H5::PredType::NATIVE_INT32, 0);
  }

  aStream_dataset_state_.reset();
}

void StateTestWriter::WriteAnotherIntImpl(int32_t const& value) {
  yardl::hdf5::WriteScalarDataset<int32_t, int32_t>(group_, "anotherInt", H5::PredType::NATIVE_INT32, value);
}

StateTestReader::StateTestReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "StateTest", schema_) {
}

void StateTestReader::ReadAnIntImpl(int32_t& value) {
  yardl::hdf5::ReadScalarDataset<int32_t, int32_t>(group_, "anInt", H5::PredType::NATIVE_INT32, value);
}

bool StateTestReader::ReadAStreamImpl(int32_t& value) {
  if (!aStream_dataset_state_) {
    aStream_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "aStream", H5::PredType::NATIVE_INT32, 0);
  }

  bool has_value = aStream_dataset_state_->Read<int32_t, int32_t>(value);
  if (!has_value) {
    aStream_dataset_state_.reset();
  }

  return has_value;
}

bool StateTestReader::ReadAStreamImpl(std::vector<int32_t>& values) {
  if (!aStream_dataset_state_) {
    aStream_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "aStream", H5::PredType::NATIVE_INT32);
  }

  bool has_more = aStream_dataset_state_->ReadBatch<int32_t, int32_t>(values);
  if (!has_more) {
    aStream_dataset_state_.reset();
  }

  return has_more;
}

void StateTestReader::ReadAnotherIntImpl(int32_t& value) {
  yardl::hdf5::ReadScalarDataset<int32_t, int32_t>(group_, "anotherInt", H5::PredType::NATIVE_INT32, value);
}

SimpleGenericsWriter::SimpleGenericsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "SimpleGenerics", schema_) {
}

void SimpleGenericsWriter::WriteFloatImageImpl(test_model::Image<float> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>>(group_, "floatImage", yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT), value);
}

void SimpleGenericsWriter::WriteIntImageImpl(test_model::Image<int32_t> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerNdArray<int32_t, int32_t, 2>, test_model::Image<int32_t>>(group_, "intImage", yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32), value);
}

void SimpleGenericsWriter::WriteIntImageAlternateSyntaxImpl(test_model::Image<int32_t> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerNdArray<int32_t, int32_t, 2>, test_model::Image<int32_t>>(group_, "intImageAlternateSyntax", yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32), value);
}

void SimpleGenericsWriter::WriteStringImageImpl(test_model::Image<std::string> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerNdArray<yardl::hdf5::InnerVlenString, std::string, 2>, test_model::Image<std::string>>(group_, "stringImage", yardl::hdf5::NDArrayDdl<yardl::hdf5::InnerVlenString, std::string, 2>(yardl::hdf5::InnerVlenStringDdl()), value);
}

void SimpleGenericsWriter::WriteIntFloatTupleImpl(test_model::MyTuple<int32_t, float> const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::MyTuple<int32_t, float>, test_model::MyTuple<int32_t, float>>(group_, "intFloatTuple", test_model::hdf5::GetMyTupleHdf5Ddl<int32_t, int32_t, float, float>(H5::PredType::NATIVE_INT32, H5::PredType::NATIVE_FLOAT), value);
}

void SimpleGenericsWriter::WriteFloatFloatTupleImpl(test_model::MyTuple<float, float> const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::MyTuple<float, float>, test_model::MyTuple<float, float>>(group_, "floatFloatTuple", test_model::hdf5::GetMyTupleHdf5Ddl<float, float, float, float>(H5::PredType::NATIVE_FLOAT, H5::PredType::NATIVE_FLOAT), value);
}

void SimpleGenericsWriter::WriteIntFloatTupleAlternateSyntaxImpl(test_model::MyTuple<int32_t, float> const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::MyTuple<int32_t, float>, test_model::MyTuple<int32_t, float>>(group_, "intFloatTupleAlternateSyntax", test_model::hdf5::GetMyTupleHdf5Ddl<int32_t, int32_t, float, float>(H5::PredType::NATIVE_INT32, H5::PredType::NATIVE_FLOAT), value);
}

void SimpleGenericsWriter::WriteIntStringTupleImpl(test_model::MyTuple<int32_t, std::string> const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_MyTuple<int32_t, int32_t, yardl::hdf5::InnerVlenString, std::string>, test_model::MyTuple<int32_t, std::string>>(group_, "intStringTuple", test_model::hdf5::GetMyTupleHdf5Ddl<int32_t, int32_t, yardl::hdf5::InnerVlenString, std::string>(H5::PredType::NATIVE_INT32, yardl::hdf5::InnerVlenStringDdl()), value);
}

void SimpleGenericsWriter::WriteStreamOfTypeVariantsImpl(std::variant<test_model::Image<float>, test_model::Image<double>> const& value) {
  if (!streamOfTypeVariants_dataset_state_) {
    streamOfTypeVariants_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<2>>(group_, "streamOfTypeVariants", false, std::make_tuple(yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT), "Image<float32>", static_cast<size_t>(std::max(sizeof(::InnerUnion2<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>, yardl::hdf5::InnerNdArray<double, double, 2>, test_model::Image<double>>), sizeof(std::variant<test_model::Image<float>, test_model::Image<double>>)))), std::make_tuple(yardl::hdf5::NDArrayDdl<double, double, 2>(H5::PredType::NATIVE_DOUBLE), "Image<float64>", static_cast<size_t>(std::max(sizeof(::InnerUnion2<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>, yardl::hdf5::InnerNdArray<double, double, 2>, test_model::Image<double>>), sizeof(std::variant<test_model::Image<float>, test_model::Image<double>>)))));
  }

  std::visit(
    [&](auto const& arg) {
      using T = std::decay_t<decltype(arg)>;
      if constexpr (std::is_same_v<T, test_model::Image<float>>) {
        streamOfTypeVariants_dataset_state_->Append<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, test_model::Image<double>>) {
        streamOfTypeVariants_dataset_state_->Append<yardl::hdf5::InnerNdArray<double, double, 2>, test_model::Image<double>>(static_cast<int8_t>(value.index()), arg);
      } else {
        static_assert(yardl::hdf5::always_false_v<T>, "non-exhaustive visitor!");
      }
    },
    value);
}

void SimpleGenericsWriter::EndStreamOfTypeVariantsImpl() {
  if (!streamOfTypeVariants_dataset_state_) {
    streamOfTypeVariants_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<2>>(group_, "streamOfTypeVariants", false, std::make_tuple(yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT), "Image<float32>", static_cast<size_t>(std::max(sizeof(::InnerUnion2<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>, yardl::hdf5::InnerNdArray<double, double, 2>, test_model::Image<double>>), sizeof(std::variant<test_model::Image<float>, test_model::Image<double>>)))), std::make_tuple(yardl::hdf5::NDArrayDdl<double, double, 2>(H5::PredType::NATIVE_DOUBLE), "Image<float64>", static_cast<size_t>(std::max(sizeof(::InnerUnion2<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>, yardl::hdf5::InnerNdArray<double, double, 2>, test_model::Image<double>>), sizeof(std::variant<test_model::Image<float>, test_model::Image<double>>)))));
  }

  streamOfTypeVariants_dataset_state_.reset();
}

void SimpleGenericsWriter::Flush() {
  if (streamOfTypeVariants_dataset_state_) {
    streamOfTypeVariants_dataset_state_->Flush();
  }
}

SimpleGenericsReader::SimpleGenericsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "SimpleGenerics", schema_) {
}

void SimpleGenericsReader::ReadFloatImageImpl(test_model::Image<float>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>>(group_, "floatImage", yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT), value);
}

void SimpleGenericsReader::ReadIntImageImpl(test_model::Image<int32_t>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerNdArray<int32_t, int32_t, 2>, test_model::Image<int32_t>>(group_, "intImage", yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32), value);
}

void SimpleGenericsReader::ReadIntImageAlternateSyntaxImpl(test_model::Image<int32_t>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerNdArray<int32_t, int32_t, 2>, test_model::Image<int32_t>>(group_, "intImageAlternateSyntax", yardl::hdf5::NDArrayDdl<int32_t, int32_t, 2>(H5::PredType::NATIVE_INT32), value);
}

void SimpleGenericsReader::ReadStringImageImpl(test_model::Image<std::string>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerNdArray<yardl::hdf5::InnerVlenString, std::string, 2>, test_model::Image<std::string>>(group_, "stringImage", yardl::hdf5::NDArrayDdl<yardl::hdf5::InnerVlenString, std::string, 2>(yardl::hdf5::InnerVlenStringDdl()), value);
}

void SimpleGenericsReader::ReadIntFloatTupleImpl(test_model::MyTuple<int32_t, float>& value) {
  yardl::hdf5::ReadScalarDataset<test_model::MyTuple<int32_t, float>, test_model::MyTuple<int32_t, float>>(group_, "intFloatTuple", test_model::hdf5::GetMyTupleHdf5Ddl<int32_t, int32_t, float, float>(H5::PredType::NATIVE_INT32, H5::PredType::NATIVE_FLOAT), value);
}

void SimpleGenericsReader::ReadFloatFloatTupleImpl(test_model::MyTuple<float, float>& value) {
  yardl::hdf5::ReadScalarDataset<test_model::MyTuple<float, float>, test_model::MyTuple<float, float>>(group_, "floatFloatTuple", test_model::hdf5::GetMyTupleHdf5Ddl<float, float, float, float>(H5::PredType::NATIVE_FLOAT, H5::PredType::NATIVE_FLOAT), value);
}

void SimpleGenericsReader::ReadIntFloatTupleAlternateSyntaxImpl(test_model::MyTuple<int32_t, float>& value) {
  yardl::hdf5::ReadScalarDataset<test_model::MyTuple<int32_t, float>, test_model::MyTuple<int32_t, float>>(group_, "intFloatTupleAlternateSyntax", test_model::hdf5::GetMyTupleHdf5Ddl<int32_t, int32_t, float, float>(H5::PredType::NATIVE_INT32, H5::PredType::NATIVE_FLOAT), value);
}

void SimpleGenericsReader::ReadIntStringTupleImpl(test_model::MyTuple<int32_t, std::string>& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_MyTuple<int32_t, int32_t, yardl::hdf5::InnerVlenString, std::string>, test_model::MyTuple<int32_t, std::string>>(group_, "intStringTuple", test_model::hdf5::GetMyTupleHdf5Ddl<int32_t, int32_t, yardl::hdf5::InnerVlenString, std::string>(H5::PredType::NATIVE_INT32, yardl::hdf5::InnerVlenStringDdl()), value);
}

bool SimpleGenericsReader::ReadStreamOfTypeVariantsImpl(std::variant<test_model::Image<float>, test_model::Image<double>>& value) {
  if (!streamOfTypeVariants_dataset_state_) {
    streamOfTypeVariants_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetReader<2>>(group_, "streamOfTypeVariants", false, std::make_tuple(yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT), "Image<float32>", static_cast<size_t>(std::max(sizeof(::InnerUnion2<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>, yardl::hdf5::InnerNdArray<double, double, 2>, test_model::Image<double>>), sizeof(std::variant<test_model::Image<float>, test_model::Image<double>>)))), std::make_tuple(yardl::hdf5::NDArrayDdl<double, double, 2>(H5::PredType::NATIVE_DOUBLE), "Image<float64>", static_cast<size_t>(std::max(sizeof(::InnerUnion2<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>, yardl::hdf5::InnerNdArray<double, double, 2>, test_model::Image<double>>), sizeof(std::variant<test_model::Image<float>, test_model::Image<double>>)))));
  }

  auto [has_result, type_index, reader] = streamOfTypeVariants_dataset_state_->ReadIndex();
  if (!has_result) {
    streamOfTypeVariants_dataset_state_.reset();
    return false;
  }

  switch (type_index) {
  case 0: {
    test_model::Image<float>& ref = value.emplace<0>();
    reader->Read<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>>(ref);
    break;
  }
  case 1: {
    test_model::Image<double>& ref = value.emplace<1>();
    reader->Read<yardl::hdf5::InnerNdArray<double, double, 2>, test_model::Image<double>>(ref);
    break;
  }
  }

  return true;
}

AdvancedGenericsWriter::AdvancedGenericsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "AdvancedGenerics", schema_) {
}

void AdvancedGenericsWriter::WriteIntImageImageImpl(test_model::Image<test_model::Image<float>> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerNdArray<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>, 2>, test_model::Image<test_model::Image<float>>>(group_, "intImageImage", yardl::hdf5::NDArrayDdl<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>, 2>(yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT)), value);
}

void AdvancedGenericsWriter::WriteGenericRecord1Impl(test_model::GenericRecord<int32_t, std::string> const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_GenericRecord<int32_t, int32_t, yardl::hdf5::InnerVlenString, std::string>, test_model::GenericRecord<int32_t, std::string>>(group_, "genericRecord1", test_model::hdf5::GetGenericRecordHdf5Ddl<int32_t, int32_t, yardl::hdf5::InnerVlenString, std::string>(H5::PredType::NATIVE_INT32, yardl::hdf5::InnerVlenStringDdl()), value);
}

void AdvancedGenericsWriter::WriteTupleOfOptionalsImpl(test_model::MyTuple<std::optional<int32_t>, std::optional<std::string>> const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_MyTuple<yardl::hdf5::InnerOptional<int32_t, int32_t>, std::optional<int32_t>, yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string>, std::optional<std::string>>, test_model::MyTuple<std::optional<int32_t>, std::optional<std::string>>>(group_, "tupleOfOptionals", test_model::hdf5::GetMyTupleHdf5Ddl<yardl::hdf5::InnerOptional<int32_t, int32_t>, std::optional<int32_t>, yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string>, std::optional<std::string>>(yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl())), value);
}

void AdvancedGenericsWriter::WriteTupleOfOptionalsAlternateSyntaxImpl(test_model::MyTuple<std::optional<int32_t>, std::optional<std::string>> const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_MyTuple<yardl::hdf5::InnerOptional<int32_t, int32_t>, std::optional<int32_t>, yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string>, std::optional<std::string>>, test_model::MyTuple<std::optional<int32_t>, std::optional<std::string>>>(group_, "tupleOfOptionalsAlternateSyntax", test_model::hdf5::GetMyTupleHdf5Ddl<yardl::hdf5::InnerOptional<int32_t, int32_t>, std::optional<int32_t>, yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string>, std::optional<std::string>>(yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl())), value);
}

void AdvancedGenericsWriter::WriteTupleOfVectorsImpl(test_model::MyTuple<std::vector<int32_t>, std::vector<float>> const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_MyTuple<yardl::hdf5::InnerVlen<int32_t, int32_t>, std::vector<int32_t>, yardl::hdf5::InnerVlen<float, float>, std::vector<float>>, test_model::MyTuple<std::vector<int32_t>, std::vector<float>>>(group_, "tupleOfVectors", test_model::hdf5::GetMyTupleHdf5Ddl<yardl::hdf5::InnerVlen<int32_t, int32_t>, std::vector<int32_t>, yardl::hdf5::InnerVlen<float, float>, std::vector<float>>(yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT)), value);
}

AdvancedGenericsReader::AdvancedGenericsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "AdvancedGenerics", schema_) {
}

void AdvancedGenericsReader::ReadIntImageImageImpl(test_model::Image<test_model::Image<float>>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerNdArray<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>, 2>, test_model::Image<test_model::Image<float>>>(group_, "intImageImage", yardl::hdf5::NDArrayDdl<yardl::hdf5::InnerNdArray<float, float, 2>, test_model::Image<float>, 2>(yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT)), value);
}

void AdvancedGenericsReader::ReadGenericRecord1Impl(test_model::GenericRecord<int32_t, std::string>& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_GenericRecord<int32_t, int32_t, yardl::hdf5::InnerVlenString, std::string>, test_model::GenericRecord<int32_t, std::string>>(group_, "genericRecord1", test_model::hdf5::GetGenericRecordHdf5Ddl<int32_t, int32_t, yardl::hdf5::InnerVlenString, std::string>(H5::PredType::NATIVE_INT32, yardl::hdf5::InnerVlenStringDdl()), value);
}

void AdvancedGenericsReader::ReadTupleOfOptionalsImpl(test_model::MyTuple<std::optional<int32_t>, std::optional<std::string>>& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_MyTuple<yardl::hdf5::InnerOptional<int32_t, int32_t>, std::optional<int32_t>, yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string>, std::optional<std::string>>, test_model::MyTuple<std::optional<int32_t>, std::optional<std::string>>>(group_, "tupleOfOptionals", test_model::hdf5::GetMyTupleHdf5Ddl<yardl::hdf5::InnerOptional<int32_t, int32_t>, std::optional<int32_t>, yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string>, std::optional<std::string>>(yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl())), value);
}

void AdvancedGenericsReader::ReadTupleOfOptionalsAlternateSyntaxImpl(test_model::MyTuple<std::optional<int32_t>, std::optional<std::string>>& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_MyTuple<yardl::hdf5::InnerOptional<int32_t, int32_t>, std::optional<int32_t>, yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string>, std::optional<std::string>>, test_model::MyTuple<std::optional<int32_t>, std::optional<std::string>>>(group_, "tupleOfOptionalsAlternateSyntax", test_model::hdf5::GetMyTupleHdf5Ddl<yardl::hdf5::InnerOptional<int32_t, int32_t>, std::optional<int32_t>, yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string>, std::optional<std::string>>(yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl())), value);
}

void AdvancedGenericsReader::ReadTupleOfVectorsImpl(test_model::MyTuple<std::vector<int32_t>, std::vector<float>>& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_MyTuple<yardl::hdf5::InnerVlen<int32_t, int32_t>, std::vector<int32_t>, yardl::hdf5::InnerVlen<float, float>, std::vector<float>>, test_model::MyTuple<std::vector<int32_t>, std::vector<float>>>(group_, "tupleOfVectors", test_model::hdf5::GetMyTupleHdf5Ddl<yardl::hdf5::InnerVlen<int32_t, int32_t>, std::vector<int32_t>, yardl::hdf5::InnerVlen<float, float>, std::vector<float>>(yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT)), value);
}

AliasesWriter::AliasesWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "Aliases", schema_) {
}

void AliasesWriter::WriteAliasedStringImpl(test_model::AliasedString const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerVlenString, test_model::AliasedString>(group_, "aliasedString", yardl::hdf5::InnerVlenStringDdl(), value);
}

void AliasesWriter::WriteAliasedEnumImpl(test_model::AliasedEnum const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::Fruits, test_model::AliasedEnum>(group_, "aliasedEnum", test_model::hdf5::GetFruitsHdf5Ddl(), value);
}

void AliasesWriter::WriteAliasedOpenGenericImpl(test_model::AliasedOpenGeneric<test_model::AliasedString, test_model::AliasedEnum> const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_MyTuple<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>, test_model::AliasedOpenGeneric<test_model::AliasedString, test_model::AliasedEnum>>(group_, "aliasedOpenGeneric", test_model::hdf5::GetMyTupleHdf5Ddl<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>(yardl::hdf5::InnerVlenStringDdl(), test_model::hdf5::GetFruitsHdf5Ddl()), value);
}

void AliasesWriter::WriteAliasedClosedGenericImpl(test_model::AliasedClosedGeneric const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_MyTuple<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>, test_model::AliasedClosedGeneric>(group_, "aliasedClosedGeneric", test_model::hdf5::GetMyTupleHdf5Ddl<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>(yardl::hdf5::InnerVlenStringDdl(), test_model::hdf5::GetFruitsHdf5Ddl()), value);
}

void AliasesWriter::WriteAliasedOptionalImpl(test_model::AliasedOptional const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerOptional<int32_t, int32_t>, test_model::AliasedOptional>(group_, "aliasedOptional", yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), value);
}

void AliasesWriter::WriteAliasedGenericOptionalImpl(test_model::AliasedGenericOptional<float> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerOptional<float, float>, test_model::AliasedGenericOptional<float>>(group_, "aliasedGenericOptional", yardl::hdf5::OptionalTypeDdl<float, float>(H5::PredType::NATIVE_FLOAT), value);
}

void AliasesWriter::WriteAliasedGenericUnion2Impl(test_model::AliasedGenericUnion2<test_model::AliasedString, test_model::AliasedEnum> const& value) {
  yardl::hdf5::WriteScalarDataset<::InnerUnion2<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>, test_model::AliasedGenericUnion2<test_model::AliasedString, test_model::AliasedEnum>>(group_, "aliasedGenericUnion2", ::InnerUnion2Ddl<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>(false, yardl::hdf5::InnerVlenStringDdl(), "T1", test_model::hdf5::GetFruitsHdf5Ddl(), "T2"), value);
}

void AliasesWriter::WriteAliasedGenericVectorImpl(test_model::AliasedGenericVector<float> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerVlen<float, float>, test_model::AliasedGenericVector<float>>(group_, "aliasedGenericVector", yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT), value);
}

void AliasesWriter::WriteAliasedGenericFixedVectorImpl(test_model::AliasedGenericFixedVector<float> const& value) {
  yardl::hdf5::WriteScalarDataset<std::array<float, 3>, test_model::AliasedGenericFixedVector<float>>(group_, "aliasedGenericFixedVector", yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_FLOAT, 3), value);
}

void AliasesWriter::WriteStreamOfAliasedGenericUnion2Impl(test_model::AliasedGenericUnion2<test_model::AliasedString, test_model::AliasedEnum> const& value) {
  if (!streamOfAliasedGenericUnion2_dataset_state_) {
    streamOfAliasedGenericUnion2_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<2>>(group_, "streamOfAliasedGenericUnion2", false, std::make_tuple(yardl::hdf5::InnerVlenStringDdl(), "T1", static_cast<size_t>(std::max(sizeof(::InnerUnion2<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>), sizeof(std::variant<test_model::AliasedString, test_model::AliasedEnum>)))), std::make_tuple(test_model::hdf5::GetFruitsHdf5Ddl(), "T2", static_cast<size_t>(std::max(sizeof(::InnerUnion2<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>), sizeof(std::variant<test_model::AliasedString, test_model::AliasedEnum>)))));
  }

  std::visit(
    [&](auto const& arg) {
      using T = std::decay_t<decltype(arg)>;
      if constexpr (std::is_same_v<T, test_model::AliasedString>) {
        streamOfAliasedGenericUnion2_dataset_state_->Append<yardl::hdf5::InnerVlenString, test_model::AliasedString>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, test_model::AliasedEnum>) {
        streamOfAliasedGenericUnion2_dataset_state_->Append<test_model::Fruits, test_model::AliasedEnum>(static_cast<int8_t>(value.index()), arg);
      } else {
        static_assert(yardl::hdf5::always_false_v<T>, "non-exhaustive visitor!");
      }
    },
    value);
}

void AliasesWriter::EndStreamOfAliasedGenericUnion2Impl() {
  if (!streamOfAliasedGenericUnion2_dataset_state_) {
    streamOfAliasedGenericUnion2_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<2>>(group_, "streamOfAliasedGenericUnion2", false, std::make_tuple(yardl::hdf5::InnerVlenStringDdl(), "T1", static_cast<size_t>(std::max(sizeof(::InnerUnion2<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>), sizeof(std::variant<test_model::AliasedString, test_model::AliasedEnum>)))), std::make_tuple(test_model::hdf5::GetFruitsHdf5Ddl(), "T2", static_cast<size_t>(std::max(sizeof(::InnerUnion2<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>), sizeof(std::variant<test_model::AliasedString, test_model::AliasedEnum>)))));
  }

  streamOfAliasedGenericUnion2_dataset_state_.reset();
}

void AliasesWriter::Flush() {
  if (streamOfAliasedGenericUnion2_dataset_state_) {
    streamOfAliasedGenericUnion2_dataset_state_->Flush();
  }
}

AliasesReader::AliasesReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "Aliases", schema_) {
}

void AliasesReader::ReadAliasedStringImpl(test_model::AliasedString& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerVlenString, test_model::AliasedString>(group_, "aliasedString", yardl::hdf5::InnerVlenStringDdl(), value);
}

void AliasesReader::ReadAliasedEnumImpl(test_model::AliasedEnum& value) {
  yardl::hdf5::ReadScalarDataset<test_model::Fruits, test_model::AliasedEnum>(group_, "aliasedEnum", test_model::hdf5::GetFruitsHdf5Ddl(), value);
}

void AliasesReader::ReadAliasedOpenGenericImpl(test_model::AliasedOpenGeneric<test_model::AliasedString, test_model::AliasedEnum>& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_MyTuple<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>, test_model::AliasedOpenGeneric<test_model::AliasedString, test_model::AliasedEnum>>(group_, "aliasedOpenGeneric", test_model::hdf5::GetMyTupleHdf5Ddl<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>(yardl::hdf5::InnerVlenStringDdl(), test_model::hdf5::GetFruitsHdf5Ddl()), value);
}

void AliasesReader::ReadAliasedClosedGenericImpl(test_model::AliasedClosedGeneric& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_MyTuple<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>, test_model::AliasedClosedGeneric>(group_, "aliasedClosedGeneric", test_model::hdf5::GetMyTupleHdf5Ddl<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>(yardl::hdf5::InnerVlenStringDdl(), test_model::hdf5::GetFruitsHdf5Ddl()), value);
}

void AliasesReader::ReadAliasedOptionalImpl(test_model::AliasedOptional& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerOptional<int32_t, int32_t>, test_model::AliasedOptional>(group_, "aliasedOptional", yardl::hdf5::OptionalTypeDdl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), value);
}

void AliasesReader::ReadAliasedGenericOptionalImpl(test_model::AliasedGenericOptional<float>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerOptional<float, float>, test_model::AliasedGenericOptional<float>>(group_, "aliasedGenericOptional", yardl::hdf5::OptionalTypeDdl<float, float>(H5::PredType::NATIVE_FLOAT), value);
}

void AliasesReader::ReadAliasedGenericUnion2Impl(test_model::AliasedGenericUnion2<test_model::AliasedString, test_model::AliasedEnum>& value) {
  yardl::hdf5::ReadScalarDataset<::InnerUnion2<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>, test_model::AliasedGenericUnion2<test_model::AliasedString, test_model::AliasedEnum>>(group_, "aliasedGenericUnion2", ::InnerUnion2Ddl<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>(false, yardl::hdf5::InnerVlenStringDdl(), "T1", test_model::hdf5::GetFruitsHdf5Ddl(), "T2"), value);
}

void AliasesReader::ReadAliasedGenericVectorImpl(test_model::AliasedGenericVector<float>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerVlen<float, float>, test_model::AliasedGenericVector<float>>(group_, "aliasedGenericVector", yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT), value);
}

void AliasesReader::ReadAliasedGenericFixedVectorImpl(test_model::AliasedGenericFixedVector<float>& value) {
  yardl::hdf5::ReadScalarDataset<std::array<float, 3>, test_model::AliasedGenericFixedVector<float>>(group_, "aliasedGenericFixedVector", yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_FLOAT, 3), value);
}

bool AliasesReader::ReadStreamOfAliasedGenericUnion2Impl(test_model::AliasedGenericUnion2<test_model::AliasedString, test_model::AliasedEnum>& value) {
  if (!streamOfAliasedGenericUnion2_dataset_state_) {
    streamOfAliasedGenericUnion2_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetReader<2>>(group_, "streamOfAliasedGenericUnion2", false, std::make_tuple(yardl::hdf5::InnerVlenStringDdl(), "T1", static_cast<size_t>(std::max(sizeof(::InnerUnion2<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>), sizeof(std::variant<test_model::AliasedString, test_model::AliasedEnum>)))), std::make_tuple(test_model::hdf5::GetFruitsHdf5Ddl(), "T2", static_cast<size_t>(std::max(sizeof(::InnerUnion2<yardl::hdf5::InnerVlenString, test_model::AliasedString, test_model::Fruits, test_model::AliasedEnum>), sizeof(std::variant<test_model::AliasedString, test_model::AliasedEnum>)))));
  }

  auto [has_result, type_index, reader] = streamOfAliasedGenericUnion2_dataset_state_->ReadIndex();
  if (!has_result) {
    streamOfAliasedGenericUnion2_dataset_state_.reset();
    return false;
  }

  switch (type_index) {
  case 0: {
    test_model::AliasedString& ref = value.emplace<0>();
    reader->Read<yardl::hdf5::InnerVlenString, test_model::AliasedString>(ref);
    break;
  }
  case 1: {
    test_model::AliasedEnum& ref = value.emplace<1>();
    reader->Read<test_model::Fruits, test_model::AliasedEnum>(ref);
    break;
  }
  }

  return true;
}

StreamsOfAliasedUnionsWriter::StreamsOfAliasedUnionsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "StreamsOfAliasedUnions", schema_) {
}

void StreamsOfAliasedUnionsWriter::WriteIntOrSimpleRecordImpl(test_model::AliasedIntOrSimpleRecord const& value) {
  if (!intOrSimpleRecord_dataset_state_) {
    intOrSimpleRecord_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<2>>(group_, "intOrSimpleRecord", false, std::make_tuple(H5::PredType::NATIVE_INT32, "int32", static_cast<size_t>(0)), std::make_tuple(test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord", static_cast<size_t>(0)));
  }

  std::visit(
    [&](auto const& arg) {
      using T = std::decay_t<decltype(arg)>;
      if constexpr (std::is_same_v<T, int32_t>) {
        intOrSimpleRecord_dataset_state_->Append<int32_t, int32_t>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, test_model::SimpleRecord>) {
        intOrSimpleRecord_dataset_state_->Append<test_model::SimpleRecord, test_model::SimpleRecord>(static_cast<int8_t>(value.index()), arg);
      } else {
        static_assert(yardl::hdf5::always_false_v<T>, "non-exhaustive visitor!");
      }
    },
    value);
}

void StreamsOfAliasedUnionsWriter::EndIntOrSimpleRecordImpl() {
  if (!intOrSimpleRecord_dataset_state_) {
    intOrSimpleRecord_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<2>>(group_, "intOrSimpleRecord", false, std::make_tuple(H5::PredType::NATIVE_INT32, "int32", static_cast<size_t>(0)), std::make_tuple(test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord", static_cast<size_t>(0)));
  }

  intOrSimpleRecord_dataset_state_.reset();
}

void StreamsOfAliasedUnionsWriter::WriteNullableIntOrSimpleRecordImpl(test_model::AliasedNullableIntSimpleRecord const& value) {
  if (!nullableIntOrSimpleRecord_dataset_state_) {
    nullableIntOrSimpleRecord_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<2>>(group_, "nullableIntOrSimpleRecord", true, std::make_tuple(H5::PredType::NATIVE_INT32, "int32", static_cast<size_t>(0)), std::make_tuple(test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord", static_cast<size_t>(0)));
  }

  std::visit(
    [&](auto const& arg) {
      using T = std::decay_t<decltype(arg)>;
      if constexpr (std::is_same_v<T, std::monostate>) {
        nullableIntOrSimpleRecord_dataset_state_->Append<std::monostate, std::monostate>(static_cast<int8_t>(value.index()) -1, arg);
      } else if constexpr (std::is_same_v<T, int32_t>) {
        nullableIntOrSimpleRecord_dataset_state_->Append<int32_t, int32_t>(static_cast<int8_t>(value.index()) -1, arg);
      } else if constexpr (std::is_same_v<T, test_model::SimpleRecord>) {
        nullableIntOrSimpleRecord_dataset_state_->Append<test_model::SimpleRecord, test_model::SimpleRecord>(static_cast<int8_t>(value.index()) -1, arg);
      } else {
        static_assert(yardl::hdf5::always_false_v<T>, "non-exhaustive visitor!");
      }
    },
    value);
}

void StreamsOfAliasedUnionsWriter::EndNullableIntOrSimpleRecordImpl() {
  if (!nullableIntOrSimpleRecord_dataset_state_) {
    nullableIntOrSimpleRecord_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<2>>(group_, "nullableIntOrSimpleRecord", true, std::make_tuple(H5::PredType::NATIVE_INT32, "int32", static_cast<size_t>(0)), std::make_tuple(test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord", static_cast<size_t>(0)));
  }

  nullableIntOrSimpleRecord_dataset_state_.reset();
}

void StreamsOfAliasedUnionsWriter::Flush() {
  if (intOrSimpleRecord_dataset_state_) {
    intOrSimpleRecord_dataset_state_->Flush();
  }
  if (nullableIntOrSimpleRecord_dataset_state_) {
    nullableIntOrSimpleRecord_dataset_state_->Flush();
  }
}

StreamsOfAliasedUnionsReader::StreamsOfAliasedUnionsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "StreamsOfAliasedUnions", schema_) {
}

bool StreamsOfAliasedUnionsReader::ReadIntOrSimpleRecordImpl(test_model::AliasedIntOrSimpleRecord& value) {
  if (!intOrSimpleRecord_dataset_state_) {
    intOrSimpleRecord_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetReader<2>>(group_, "intOrSimpleRecord", false, std::make_tuple(H5::PredType::NATIVE_INT32, "int32", static_cast<size_t>(0)), std::make_tuple(test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord", static_cast<size_t>(0)));
  }

  auto [has_result, type_index, reader] = intOrSimpleRecord_dataset_state_->ReadIndex();
  if (!has_result) {
    intOrSimpleRecord_dataset_state_.reset();
    return false;
  }

  switch (type_index) {
  case 0: {
    int32_t& ref = value.emplace<0>();
    reader->Read<int32_t, int32_t>(ref);
    break;
  }
  case 1: {
    test_model::SimpleRecord& ref = value.emplace<1>();
    reader->Read<test_model::SimpleRecord, test_model::SimpleRecord>(ref);
    break;
  }
  }

  return true;
}

bool StreamsOfAliasedUnionsReader::ReadNullableIntOrSimpleRecordImpl(test_model::AliasedNullableIntSimpleRecord& value) {
  if (!nullableIntOrSimpleRecord_dataset_state_) {
    nullableIntOrSimpleRecord_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetReader<2>>(group_, "nullableIntOrSimpleRecord", true, std::make_tuple(H5::PredType::NATIVE_INT32, "int32", static_cast<size_t>(0)), std::make_tuple(test_model::hdf5::GetSimpleRecordHdf5Ddl(), "SimpleRecord", static_cast<size_t>(0)));
  }

  auto [has_result, type_index, reader] = nullableIntOrSimpleRecord_dataset_state_->ReadIndex();
  if (!has_result) {
    nullableIntOrSimpleRecord_dataset_state_.reset();
    return false;
  }

  switch (type_index) {
  case -1:
    value.emplace<0>();
    break;
  case 0: {
    int32_t& ref = value.emplace<1>();
    reader->Read<int32_t, int32_t>(ref);
    break;
  }
  case 1: {
    test_model::SimpleRecord& ref = value.emplace<2>();
    reader->Read<test_model::SimpleRecord, test_model::SimpleRecord>(ref);
    break;
  }
  }

  return true;
}

ProtocolWithComputedFieldsWriter::ProtocolWithComputedFieldsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "ProtocolWithComputedFields", schema_) {
}

void ProtocolWithComputedFieldsWriter::WriteRecordWithComputedFieldsImpl(test_model::RecordWithComputedFields const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::hdf5::_Inner_RecordWithComputedFields, test_model::RecordWithComputedFields>(group_, "recordWithComputedFields", test_model::hdf5::GetRecordWithComputedFieldsHdf5Ddl(), value);
}

ProtocolWithComputedFieldsReader::ProtocolWithComputedFieldsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "ProtocolWithComputedFields", schema_) {
}

void ProtocolWithComputedFieldsReader::ReadRecordWithComputedFieldsImpl(test_model::RecordWithComputedFields& value) {
  yardl::hdf5::ReadScalarDataset<test_model::hdf5::_Inner_RecordWithComputedFields, test_model::RecordWithComputedFields>(group_, "recordWithComputedFields", test_model::hdf5::GetRecordWithComputedFieldsHdf5Ddl(), value);
}

ProtocolWithKeywordStepsWriter::ProtocolWithKeywordStepsWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "ProtocolWithKeywordSteps", schema_) {
}

void ProtocolWithKeywordStepsWriter::WriteIntImpl(test_model::RecordWithKeywordFields const& value) {
  if (!int_dataset_state_) {
    int_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "int", test_model::hdf5::GetRecordWithKeywordFieldsHdf5Ddl(), std::max(sizeof(test_model::hdf5::_Inner_RecordWithKeywordFields), sizeof(test_model::RecordWithKeywordFields)));
  }

  int_dataset_state_->Append<test_model::hdf5::_Inner_RecordWithKeywordFields, test_model::RecordWithKeywordFields>(value);
}

void ProtocolWithKeywordStepsWriter::WriteIntImpl(std::vector<test_model::RecordWithKeywordFields> const& values) {
  if (!int_dataset_state_) {
    int_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "int", test_model::hdf5::GetRecordWithKeywordFieldsHdf5Ddl(), std::max(sizeof(test_model::hdf5::_Inner_RecordWithKeywordFields), sizeof(test_model::RecordWithKeywordFields)));
  }

  int_dataset_state_->AppendBatch<test_model::hdf5::_Inner_RecordWithKeywordFields, test_model::RecordWithKeywordFields>(values);
}

void ProtocolWithKeywordStepsWriter::EndIntImpl() {
  if (!int_dataset_state_) {
    int_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "int", test_model::hdf5::GetRecordWithKeywordFieldsHdf5Ddl(), std::max(sizeof(test_model::hdf5::_Inner_RecordWithKeywordFields), sizeof(test_model::RecordWithKeywordFields)));
  }

  int_dataset_state_.reset();
}

void ProtocolWithKeywordStepsWriter::WriteFloatImpl(test_model::EnumWithKeywordSymbols const& value) {
  yardl::hdf5::WriteScalarDataset<test_model::EnumWithKeywordSymbols, test_model::EnumWithKeywordSymbols>(group_, "float", test_model::hdf5::GetEnumWithKeywordSymbolsHdf5Ddl(), value);
}

ProtocolWithKeywordStepsReader::ProtocolWithKeywordStepsReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "ProtocolWithKeywordSteps", schema_) {
}

bool ProtocolWithKeywordStepsReader::ReadIntImpl(test_model::RecordWithKeywordFields& value) {
  if (!int_dataset_state_) {
    int_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "int", test_model::hdf5::GetRecordWithKeywordFieldsHdf5Ddl(), std::max(sizeof(test_model::hdf5::_Inner_RecordWithKeywordFields), sizeof(test_model::RecordWithKeywordFields)));
  }

  bool has_value = int_dataset_state_->Read<test_model::hdf5::_Inner_RecordWithKeywordFields, test_model::RecordWithKeywordFields>(value);
  if (!has_value) {
    int_dataset_state_.reset();
  }

  return has_value;
}

bool ProtocolWithKeywordStepsReader::ReadIntImpl(std::vector<test_model::RecordWithKeywordFields>& values) {
  if (!int_dataset_state_) {
    int_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "int", test_model::hdf5::GetRecordWithKeywordFieldsHdf5Ddl());
  }

  bool has_more = int_dataset_state_->ReadBatch<test_model::hdf5::_Inner_RecordWithKeywordFields, test_model::RecordWithKeywordFields>(values);
  if (!has_more) {
    int_dataset_state_.reset();
  }

  return has_more;
}

void ProtocolWithKeywordStepsReader::ReadFloatImpl(test_model::EnumWithKeywordSymbols& value) {
  yardl::hdf5::ReadScalarDataset<test_model::EnumWithKeywordSymbols, test_model::EnumWithKeywordSymbols>(group_, "float", test_model::hdf5::GetEnumWithKeywordSymbolsHdf5Ddl(), value);
}

} // namespace test_model::hdf5
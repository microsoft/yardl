% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef RecordWithDynamicNDArrays < handle
  properties
    ints
    simple_record_array
    record_with_vlens_array
  end

  methods
    function self = RecordWithDynamicNDArrays(kwargs)
      arguments
        kwargs.ints = int32.empty();
        kwargs.simple_record_array = test_model.SimpleRecord.empty();
        kwargs.record_with_vlens_array = test_model.RecordWithVlens.empty();
      end
      self.ints = kwargs.ints;
      self.simple_record_array = kwargs.simple_record_array;
      self.record_with_vlens_array = kwargs.record_with_vlens_array;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "test_model.RecordWithDynamicNDArrays") && ...
        isequal({self.ints}, {other.ints}) && ...
        isequal({self.simple_record_array}, {other.simple_record_array}) && ...
        isequal({self.record_with_vlens_array}, {other.record_with_vlens_array});
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end

    function res = isequal(self, other)
      res = all(eq(self, other));
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = test_model.RecordWithDynamicNDArrays();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end

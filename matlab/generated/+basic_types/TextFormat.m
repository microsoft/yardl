% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef TextFormat < uint64
  methods (Static)
    function v = REGULAR
      v = basic_types.TextFormat(0);
    end
    function v = BOLD
      v = basic_types.TextFormat(1);
    end
    function v = ITALIC
      v = basic_types.TextFormat(2);
    end
    function v = UNDERLINE
      v = basic_types.TextFormat(4);
    end
    function v = STRIKETHROUGH
      v = basic_types.TextFormat(8);
    end

    function z = zeros(varargin)
      elem = basic_types.TextFormat(0);
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end

  methods
    function self = TextFormat(varargin)
      if nargin == 0
        value = 0;
      elseif nargin == 1
        value = varargin{1};
      else
        value = 0;
        for i = 1:nargin
          value = bitor(value, varargin{i});
        end
      end
      self@uint64(value);
    end

    function res = has_flags(self, flag)
      res = bitand(self, flag) == flag;
    end

    function res = with_flags(self, flag)
      res = basic_types.TextFormat(bitor(self, flag));
    end

    function res = without_flags(self, flag)
      res = basic_types.TextFormat(bitand(self, bitcmp(flag)));
    end
  end
end

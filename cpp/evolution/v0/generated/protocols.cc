// This file was generated by the "yardl" tool. DO NOT EDIT.

#include "protocols.h"

#ifdef _MSC_VER
#define unlikely(x) x
#else
#define unlikely(x) __builtin_expect((x), 0)
#endif

namespace evo_test {
std::string ProtocolWithChangesWriterBase::schema_ = R"({"protocol":{"name":"ProtocolWithChanges","sequence":[{"name":"int8ToInt","type":"int8"},{"name":"int8ToLong","type":"int8"},{"name":"int8ToUint","type":"int8"},{"name":"int8ToUlong","type":"int8"},{"name":"int8ToFloat","type":"int8"},{"name":"int8ToDouble","type":"int8"},{"name":"intToUint","type":"int32"},{"name":"intToLong","type":"int32"},{"name":"intToFloat","type":"int32"},{"name":"intToDouble","type":"int32"},{"name":"uintToUlong","type":"uint32"},{"name":"uintToFloat","type":"uint32"},{"name":"uintToDouble","type":"uint32"},{"name":"floatToDouble","type":"float32"},{"name":"complexFloatToComplexDouble","type":"complexfloat32"},{"name":"intToString","type":"int32"},{"name":"uintToString","type":"uint32"},{"name":"longToString","type":"int64"},{"name":"ulongToString","type":"uint64"},{"name":"floatToString","type":"float32"},{"name":"doubleToString","type":"float64"},{"name":"intToOptional","type":"int32"},{"name":"floatToOptional","type":"float32"},{"name":"stringToOptional","type":"string"},{"name":"intToUnion","type":"int32"},{"name":"floatToUnion","type":"float32"},{"name":"stringToUnion","type":"string"},{"name":"optionalIntToFloat","type":[null,"int32"]},{"name":"optionalFloatToString","type":[null,"float32"]},{"name":"aliasedLongToString","type":"EvoTest.AliasedLongToString"},{"name":"stringToAliasedString","type":"string"},{"name":"stringToAliasedInt","type":"string"},{"name":"enumToAliasedEnum","type":"EvoTest.GrowingEnum"},{"name":"optionalIntToUnion","type":[null,"int32"]},{"name":"optionalRecordToUnion","type":[null,"EvoTest.RecordWithChanges"]},{"name":"recordWithChanges","type":"EvoTest.RecordWithChanges"},{"name":"aliasedRecordWithChanges","type":"EvoTest.AliasedRecordWithChanges"},{"name":"recordToRenamedRecord","type":"EvoTest.RenamedRecord"},{"name":"recordToAliasedRecord","type":"EvoTest.RecordWithChanges"},{"name":"recordToAliasedAlias","type":"EvoTest.RecordWithChanges"},{"name":"streamIntToStringToFloat","type":{"stream":{"items":"int32"}}},{"name":"vectorIntToStringToFloat","type":{"vector":{"items":"int32"}}},{"name":"intFloatUnionReordered","type":[{"tag":"int32","type":"int32"},{"tag":"float32","type":"float32"}]},{"name":"vectorUnionReordered","type":{"vector":{"items":[{"tag":"int32","type":"int32"},{"tag":"float32","type":"float32"}]}}},{"name":"streamUnionReordered","type":{"stream":{"items":[{"tag":"int32","type":"int32"},{"tag":"string","type":"string"}]}}},{"name":"streamOfAliasTypeChange","type":{"stream":{"items":"EvoTest.StreamItem"}}},{"name":"rlink","type":"EvoTest.RLink"},{"name":"rlinkRX","type":"EvoTest.RLink"},{"name":"rlinkRY","type":"EvoTest.RLink"},{"name":"rlinkRZ","type":"EvoTest.RLink"},{"name":"raRLink","type":"EvoTest.RA"},{"name":"raRX","type":"EvoTest.RA"},{"name":"raRY","type":"EvoTest.RA"},{"name":"raRZ","type":"EvoTest.RA"},{"name":"rbRLink","type":"EvoTest.RB"},{"name":"rbRX","type":"EvoTest.RB"},{"name":"rbRY","type":"EvoTest.RB"},{"name":"rbRZ","type":"EvoTest.RB"},{"name":"rcRLink","type":"EvoTest.RC"},{"name":"rcRX","type":"EvoTest.RC"},{"name":"rcRY","type":"EvoTest.RC"},{"name":"rcRZ","type":"EvoTest.RC"},{"name":"rlinkRNew","type":"EvoTest.RLink"},{"name":"raRNew","type":"EvoTest.RA"},{"name":"rbRNew","type":"EvoTest.RB"},{"name":"rcRNew","type":"EvoTest.RC"},{"name":"rlinkRUnion","type":"EvoTest.RLink"},{"name":"raRUnion","type":"EvoTest.RA"},{"name":"rbRUnion","type":"EvoTest.RB"},{"name":"rcRUnion","type":"EvoTest.RC"},{"name":"optionalRecordWithChanges","type":[null,"EvoTest.RecordWithChanges"]},{"name":"aliasedOptionalRecordWithChanges","type":[null,"EvoTest.AliasedRecordWithChanges"]},{"name":"unionRecordWithChanges","type":[{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"int32","type":"int32"}]},{"name":"unionWithSameTypeset","type":[{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"int32","type":"int32"},{"tag":"float32","type":"float32"},{"tag":"string","type":"string"}]},{"name":"unionWithTypesAdded","type":[{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"float32","type":"float32"}]},{"name":"unionWithTypesRemoved","type":[{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"int32","type":"int32"},{"tag":"float32","type":"float32"},{"tag":"string","type":"string"}]},{"name":"recordToOptional","type":"EvoTest.RecordWithChanges"},{"name":"recordToAliasedOptional","type":"EvoTest.RecordWithChanges"},{"name":"recordToUnion","type":"EvoTest.RecordWithChanges"},{"name":"recordToAliasedUnion","type":"EvoTest.RecordWithChanges"},{"name":"unionToAliasedUnion","type":[{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"int32","type":"int32"}]},{"name":"unionToAliasedUnionWithChanges","type":[{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"int32","type":"int32"}]},{"name":"optionalToAliasedOptional","type":[null,"EvoTest.RecordWithChanges"]},{"name":"optionalToAliasedOptionalWithChanges","type":[null,"int32"]},{"name":"genericRecord","type":{"name":"EvoTest.GenericRecord","typeArguments":["int32","string"]}},{"name":"genericRecordToOpenAlias","type":{"name":"EvoTest.GenericRecord","typeArguments":["int32","string"]}},{"name":"genericRecordToClosedAlias","type":{"name":"EvoTest.GenericRecord","typeArguments":["int32","string"]}},{"name":"genericRecordToHalfClosedAlias","type":{"name":"EvoTest.GenericRecord","typeArguments":["int32","string"]}},{"name":"aliasedGenericRecordToAlias","type":{"name":"EvoTest.AliasedHalfClosedGenericRecord","typeArguments":["int32"]}},{"name":"genericRecordToReversed","type":{"name":"EvoTest.GenericRecord","typeArguments":["int32","string"]}},{"name":"closedGenericRecordToUnion","type":"EvoTest.AliasedClosedGenericRecord"},{"name":"genericRecordToAliasedUnion","type":{"name":"EvoTest.GenericRecord","typeArguments":["int32","string"]}},{"name":"genericUnionToReversed","type":"EvoTest.AliasedClosedGenericUnion"},{"name":"genericUnionOfChangedRecord","type":"EvoTest.AliasedClosedGenericUnion"},{"name":"genericParentRecord","type":{"name":"EvoTest.GenericParentRecord","typeArguments":["int32"]}},{"name":"genericNestedRecords","type":{"name":"EvoTest.GenericRecord","typeArguments":[{"name":"EvoTest.UnchangedGeneric","typeArguments":["int32"]},{"name":"EvoTest.ChangedGeneric","typeArguments":["string","int32"]}]}},{"name":"genericRecordStream","type":{"stream":{"items":{"name":"EvoTest.GenericRecord","typeArguments":["int32","string"]}}}},{"name":"genericParentRecordStream","type":{"stream":{"items":{"name":"EvoTest.GenericParentRecord","typeArguments":["int32"]}}}},{"name":"vectorRecordWithChanges","type":{"vector":{"items":"EvoTest.RecordWithChanges"}}},{"name":"streamedRecordWithChanges","type":{"stream":{"items":"EvoTest.RecordWithChanges"}}}]},"types":[{"name":"AliasedClosedGenericRecord","type":{"name":"EvoTest.AliasedHalfClosedGenericRecord","typeArguments":["int32"]}},{"name":"AliasedClosedGenericUnion","type":{"name":"EvoTest.AliasedHalfClosedGenericUnion","typeArguments":[{"name":"EvoTest.GenericRecord","typeArguments":["int32","string"]}]}},{"name":"AliasedHalfClosedGenericRecord","typeParameters":["T"],"type":{"name":"EvoTest.GenericRecord","typeArguments":["T","string"]}},{"name":"AliasedHalfClosedGenericUnion","typeParameters":["T"],"type":{"name":"EvoTest.GenericUnion","typeArguments":["T","float32"]}},{"name":"AliasedLongToString","type":"int64"},{"name":"AliasedRecordWithChanges","type":"EvoTest.RecordWithChanges"},{"name":"ChangedGeneric","typeParameters":["Y","Z"],"fields":[{"name":"y","type":"Y"},{"name":"z","type":{"name":"EvoTest.UnchangedGeneric","typeArguments":["Z"]}}]},{"name":"GenericParentRecord","typeParameters":["T"],"fields":[{"name":"record","type":{"name":"EvoTest.GenericRecord","typeArguments":["T","string"]}},{"name":"recordOfUnion","type":{"name":"EvoTest.GenericRecord","typeArguments":[{"name":"EvoTest.GenericUnion","typeArguments":["T","float32"]},"string"]}},{"name":"unionOfRecord","type":{"name":"EvoTest.GenericUnion","typeArguments":[{"name":"EvoTest.GenericRecord","typeArguments":["int32","string"]},"float32"]}}]},{"name":"GenericRecord","typeParameters":["T1","T2"],"fields":[{"name":"removed","type":[null,"bool"]},{"name":"field1","type":"T1"},{"name":"field2","type":"T2"}]},{"name":"GenericUnion","typeParameters":["T1","T2"],"type":[{"tag":"T1","type":"T1"},{"tag":"T2","type":"T2"}]},{"name":"GrowingEnum","base":"uint16","values":[{"symbol":"a","value":0},{"symbol":"b","value":1},{"symbol":"c","value":2}]},{"name":"RA","type":"EvoTest.RB"},{"name":"RB","type":"EvoTest.RC"},{"name":"RC","fields":[{"name":"subject","type":"string"}]},{"name":"RLink","type":"EvoTest.RA"},{"name":"RecordWithChanges","fields":[{"name":"deprecatedFloat","type":"float32"},{"name":"intToLong","type":"int32"},{"name":"deprecatedVector","type":{"vector":{"items":"int32"}}},{"name":"floatToDouble","type":"float32"},{"name":"deprecatedArray","type":{"array":{"items":"uint8","dimensions":[{"length":7}]}}},{"name":"optionalLongToString","type":[null,"int64"]},{"name":"deprecatedMap","type":{"map":{"keys":"string","values":{"vector":{"items":"int32"}}}}},{"name":"unchangedRecord","type":"EvoTest.UnchangedRecord"}]},{"name":"RenamedRecord","fields":[{"name":"i","type":"int32"},{"name":"s","type":"string"}]},{"name":"StreamItem","type":"EvoTest.RecordWithChanges"},{"name":"UnchangedGeneric","typeParameters":["T2"],"fields":[{"name":"field","type":"T2"}]},{"name":"UnchangedRecord","fields":[{"name":"name","type":"string"},{"name":"age","type":"int32"},{"name":"meta","type":{"map":{"keys":"string","values":"float64"}}}]}]})";

std::vector<std::string> ProtocolWithChangesWriterBase::previous_schemas_ = {
};

std::string ProtocolWithChangesWriterBase::SchemaFromVersion(Version version) {
  switch (version) {
  case Version::Current: return ProtocolWithChangesWriterBase::schema_; break;
  default: throw std::runtime_error("The version does not correspond to any schema supported by protocol ProtocolWithChanges.");
  }

}

void ProtocolWithChangesWriterBase::WriteInt8ToInt(int8_t const& value) {
  if (unlikely(state_ != 0)) {
    InvalidState(0, false);
  }

  WriteInt8ToIntImpl(value);
  state_ = 1;
}

void ProtocolWithChangesWriterBase::WriteInt8ToLong(int8_t const& value) {
  if (unlikely(state_ != 1)) {
    InvalidState(1, false);
  }

  WriteInt8ToLongImpl(value);
  state_ = 2;
}

void ProtocolWithChangesWriterBase::WriteInt8ToUint(int8_t const& value) {
  if (unlikely(state_ != 2)) {
    InvalidState(2, false);
  }

  WriteInt8ToUintImpl(value);
  state_ = 3;
}

void ProtocolWithChangesWriterBase::WriteInt8ToUlong(int8_t const& value) {
  if (unlikely(state_ != 3)) {
    InvalidState(3, false);
  }

  WriteInt8ToUlongImpl(value);
  state_ = 4;
}

void ProtocolWithChangesWriterBase::WriteInt8ToFloat(int8_t const& value) {
  if (unlikely(state_ != 4)) {
    InvalidState(4, false);
  }

  WriteInt8ToFloatImpl(value);
  state_ = 5;
}

void ProtocolWithChangesWriterBase::WriteInt8ToDouble(int8_t const& value) {
  if (unlikely(state_ != 5)) {
    InvalidState(5, false);
  }

  WriteInt8ToDoubleImpl(value);
  state_ = 6;
}

void ProtocolWithChangesWriterBase::WriteIntToUint(int32_t const& value) {
  if (unlikely(state_ != 6)) {
    InvalidState(6, false);
  }

  WriteIntToUintImpl(value);
  state_ = 7;
}

void ProtocolWithChangesWriterBase::WriteIntToLong(int32_t const& value) {
  if (unlikely(state_ != 7)) {
    InvalidState(7, false);
  }

  WriteIntToLongImpl(value);
  state_ = 8;
}

void ProtocolWithChangesWriterBase::WriteIntToFloat(int32_t const& value) {
  if (unlikely(state_ != 8)) {
    InvalidState(8, false);
  }

  WriteIntToFloatImpl(value);
  state_ = 9;
}

void ProtocolWithChangesWriterBase::WriteIntToDouble(int32_t const& value) {
  if (unlikely(state_ != 9)) {
    InvalidState(9, false);
  }

  WriteIntToDoubleImpl(value);
  state_ = 10;
}

void ProtocolWithChangesWriterBase::WriteUintToUlong(uint32_t const& value) {
  if (unlikely(state_ != 10)) {
    InvalidState(10, false);
  }

  WriteUintToUlongImpl(value);
  state_ = 11;
}

void ProtocolWithChangesWriterBase::WriteUintToFloat(uint32_t const& value) {
  if (unlikely(state_ != 11)) {
    InvalidState(11, false);
  }

  WriteUintToFloatImpl(value);
  state_ = 12;
}

void ProtocolWithChangesWriterBase::WriteUintToDouble(uint32_t const& value) {
  if (unlikely(state_ != 12)) {
    InvalidState(12, false);
  }

  WriteUintToDoubleImpl(value);
  state_ = 13;
}

void ProtocolWithChangesWriterBase::WriteFloatToDouble(float const& value) {
  if (unlikely(state_ != 13)) {
    InvalidState(13, false);
  }

  WriteFloatToDoubleImpl(value);
  state_ = 14;
}

void ProtocolWithChangesWriterBase::WriteComplexFloatToComplexDouble(std::complex<float> const& value) {
  if (unlikely(state_ != 14)) {
    InvalidState(14, false);
  }

  WriteComplexFloatToComplexDoubleImpl(value);
  state_ = 15;
}

void ProtocolWithChangesWriterBase::WriteIntToString(int32_t const& value) {
  if (unlikely(state_ != 15)) {
    InvalidState(15, false);
  }

  WriteIntToStringImpl(value);
  state_ = 16;
}

void ProtocolWithChangesWriterBase::WriteUintToString(uint32_t const& value) {
  if (unlikely(state_ != 16)) {
    InvalidState(16, false);
  }

  WriteUintToStringImpl(value);
  state_ = 17;
}

void ProtocolWithChangesWriterBase::WriteLongToString(int64_t const& value) {
  if (unlikely(state_ != 17)) {
    InvalidState(17, false);
  }

  WriteLongToStringImpl(value);
  state_ = 18;
}

void ProtocolWithChangesWriterBase::WriteUlongToString(uint64_t const& value) {
  if (unlikely(state_ != 18)) {
    InvalidState(18, false);
  }

  WriteUlongToStringImpl(value);
  state_ = 19;
}

void ProtocolWithChangesWriterBase::WriteFloatToString(float const& value) {
  if (unlikely(state_ != 19)) {
    InvalidState(19, false);
  }

  WriteFloatToStringImpl(value);
  state_ = 20;
}

void ProtocolWithChangesWriterBase::WriteDoubleToString(double const& value) {
  if (unlikely(state_ != 20)) {
    InvalidState(20, false);
  }

  WriteDoubleToStringImpl(value);
  state_ = 21;
}

void ProtocolWithChangesWriterBase::WriteIntToOptional(int32_t const& value) {
  if (unlikely(state_ != 21)) {
    InvalidState(21, false);
  }

  WriteIntToOptionalImpl(value);
  state_ = 22;
}

void ProtocolWithChangesWriterBase::WriteFloatToOptional(float const& value) {
  if (unlikely(state_ != 22)) {
    InvalidState(22, false);
  }

  WriteFloatToOptionalImpl(value);
  state_ = 23;
}

void ProtocolWithChangesWriterBase::WriteStringToOptional(std::string const& value) {
  if (unlikely(state_ != 23)) {
    InvalidState(23, false);
  }

  WriteStringToOptionalImpl(value);
  state_ = 24;
}

void ProtocolWithChangesWriterBase::WriteIntToUnion(int32_t const& value) {
  if (unlikely(state_ != 24)) {
    InvalidState(24, false);
  }

  WriteIntToUnionImpl(value);
  state_ = 25;
}

void ProtocolWithChangesWriterBase::WriteFloatToUnion(float const& value) {
  if (unlikely(state_ != 25)) {
    InvalidState(25, false);
  }

  WriteFloatToUnionImpl(value);
  state_ = 26;
}

void ProtocolWithChangesWriterBase::WriteStringToUnion(std::string const& value) {
  if (unlikely(state_ != 26)) {
    InvalidState(26, false);
  }

  WriteStringToUnionImpl(value);
  state_ = 27;
}

void ProtocolWithChangesWriterBase::WriteOptionalIntToFloat(std::optional<int32_t> const& value) {
  if (unlikely(state_ != 27)) {
    InvalidState(27, false);
  }

  WriteOptionalIntToFloatImpl(value);
  state_ = 28;
}

void ProtocolWithChangesWriterBase::WriteOptionalFloatToString(std::optional<float> const& value) {
  if (unlikely(state_ != 28)) {
    InvalidState(28, false);
  }

  WriteOptionalFloatToStringImpl(value);
  state_ = 29;
}

void ProtocolWithChangesWriterBase::WriteAliasedLongToString(evo_test::AliasedLongToString const& value) {
  if (unlikely(state_ != 29)) {
    InvalidState(29, false);
  }

  WriteAliasedLongToStringImpl(value);
  state_ = 30;
}

void ProtocolWithChangesWriterBase::WriteStringToAliasedString(std::string const& value) {
  if (unlikely(state_ != 30)) {
    InvalidState(30, false);
  }

  WriteStringToAliasedStringImpl(value);
  state_ = 31;
}

void ProtocolWithChangesWriterBase::WriteStringToAliasedInt(std::string const& value) {
  if (unlikely(state_ != 31)) {
    InvalidState(31, false);
  }

  WriteStringToAliasedIntImpl(value);
  state_ = 32;
}

void ProtocolWithChangesWriterBase::WriteEnumToAliasedEnum(evo_test::GrowingEnum const& value) {
  if (unlikely(state_ != 32)) {
    InvalidState(32, false);
  }

  WriteEnumToAliasedEnumImpl(value);
  state_ = 33;
}

void ProtocolWithChangesWriterBase::WriteOptionalIntToUnion(std::optional<int32_t> const& value) {
  if (unlikely(state_ != 33)) {
    InvalidState(33, false);
  }

  WriteOptionalIntToUnionImpl(value);
  state_ = 34;
}

void ProtocolWithChangesWriterBase::WriteOptionalRecordToUnion(std::optional<evo_test::RecordWithChanges> const& value) {
  if (unlikely(state_ != 34)) {
    InvalidState(34, false);
  }

  WriteOptionalRecordToUnionImpl(value);
  state_ = 35;
}

void ProtocolWithChangesWriterBase::WriteRecordWithChanges(evo_test::RecordWithChanges const& value) {
  if (unlikely(state_ != 35)) {
    InvalidState(35, false);
  }

  WriteRecordWithChangesImpl(value);
  state_ = 36;
}

void ProtocolWithChangesWriterBase::WriteAliasedRecordWithChanges(evo_test::AliasedRecordWithChanges const& value) {
  if (unlikely(state_ != 36)) {
    InvalidState(36, false);
  }

  WriteAliasedRecordWithChangesImpl(value);
  state_ = 37;
}

void ProtocolWithChangesWriterBase::WriteRecordToRenamedRecord(evo_test::RenamedRecord const& value) {
  if (unlikely(state_ != 37)) {
    InvalidState(37, false);
  }

  WriteRecordToRenamedRecordImpl(value);
  state_ = 38;
}

void ProtocolWithChangesWriterBase::WriteRecordToAliasedRecord(evo_test::RecordWithChanges const& value) {
  if (unlikely(state_ != 38)) {
    InvalidState(38, false);
  }

  WriteRecordToAliasedRecordImpl(value);
  state_ = 39;
}

void ProtocolWithChangesWriterBase::WriteRecordToAliasedAlias(evo_test::RecordWithChanges const& value) {
  if (unlikely(state_ != 39)) {
    InvalidState(39, false);
  }

  WriteRecordToAliasedAliasImpl(value);
  state_ = 40;
}

void ProtocolWithChangesWriterBase::WriteStreamIntToStringToFloat(int32_t const& value) {
  if (unlikely(state_ != 40)) {
    InvalidState(40, false);
  }

  WriteStreamIntToStringToFloatImpl(value);
}

void ProtocolWithChangesWriterBase::WriteStreamIntToStringToFloat(std::vector<int32_t> const& values) {
  if (unlikely(state_ != 40)) {
    InvalidState(40, false);
  }

  WriteStreamIntToStringToFloatImpl(values);
}

void ProtocolWithChangesWriterBase::EndStreamIntToStringToFloat() {
  if (unlikely(state_ != 40)) {
    InvalidState(40, true);
  }

  EndStreamIntToStringToFloatImpl();
  state_ = 41;
}

// fallback implementation
void ProtocolWithChangesWriterBase::WriteStreamIntToStringToFloatImpl(std::vector<int32_t> const& values) {
  for (auto const& v : values) {
    WriteStreamIntToStringToFloatImpl(v);
  }
}

void ProtocolWithChangesWriterBase::WriteVectorIntToStringToFloat(std::vector<int32_t> const& value) {
  if (unlikely(state_ != 41)) {
    InvalidState(41, false);
  }

  WriteVectorIntToStringToFloatImpl(value);
  state_ = 42;
}

void ProtocolWithChangesWriterBase::WriteIntFloatUnionReordered(std::variant<int32_t, float> const& value) {
  if (unlikely(state_ != 42)) {
    InvalidState(42, false);
  }

  WriteIntFloatUnionReorderedImpl(value);
  state_ = 43;
}

void ProtocolWithChangesWriterBase::WriteVectorUnionReordered(std::vector<std::variant<int32_t, float>> const& value) {
  if (unlikely(state_ != 43)) {
    InvalidState(43, false);
  }

  WriteVectorUnionReorderedImpl(value);
  state_ = 44;
}

void ProtocolWithChangesWriterBase::WriteStreamUnionReordered(std::variant<int32_t, std::string> const& value) {
  if (unlikely(state_ != 44)) {
    InvalidState(44, false);
  }

  WriteStreamUnionReorderedImpl(value);
}

void ProtocolWithChangesWriterBase::WriteStreamUnionReordered(std::vector<std::variant<int32_t, std::string>> const& values) {
  if (unlikely(state_ != 44)) {
    InvalidState(44, false);
  }

  WriteStreamUnionReorderedImpl(values);
}

void ProtocolWithChangesWriterBase::EndStreamUnionReordered() {
  if (unlikely(state_ != 44)) {
    InvalidState(44, true);
  }

  EndStreamUnionReorderedImpl();
  state_ = 45;
}

// fallback implementation
void ProtocolWithChangesWriterBase::WriteStreamUnionReorderedImpl(std::vector<std::variant<int32_t, std::string>> const& values) {
  for (auto const& v : values) {
    WriteStreamUnionReorderedImpl(v);
  }
}

void ProtocolWithChangesWriterBase::WriteStreamOfAliasTypeChange(evo_test::StreamItem const& value) {
  if (unlikely(state_ != 45)) {
    InvalidState(45, false);
  }

  WriteStreamOfAliasTypeChangeImpl(value);
}

void ProtocolWithChangesWriterBase::WriteStreamOfAliasTypeChange(std::vector<evo_test::StreamItem> const& values) {
  if (unlikely(state_ != 45)) {
    InvalidState(45, false);
  }

  WriteStreamOfAliasTypeChangeImpl(values);
}

void ProtocolWithChangesWriterBase::EndStreamOfAliasTypeChange() {
  if (unlikely(state_ != 45)) {
    InvalidState(45, true);
  }

  EndStreamOfAliasTypeChangeImpl();
  state_ = 46;
}

// fallback implementation
void ProtocolWithChangesWriterBase::WriteStreamOfAliasTypeChangeImpl(std::vector<evo_test::StreamItem> const& values) {
  for (auto const& v : values) {
    WriteStreamOfAliasTypeChangeImpl(v);
  }
}

void ProtocolWithChangesWriterBase::WriteRlink(evo_test::RLink const& value) {
  if (unlikely(state_ != 46)) {
    InvalidState(46, false);
  }

  WriteRlinkImpl(value);
  state_ = 47;
}

void ProtocolWithChangesWriterBase::WriteRlinkRX(evo_test::RLink const& value) {
  if (unlikely(state_ != 47)) {
    InvalidState(47, false);
  }

  WriteRlinkRXImpl(value);
  state_ = 48;
}

void ProtocolWithChangesWriterBase::WriteRlinkRY(evo_test::RLink const& value) {
  if (unlikely(state_ != 48)) {
    InvalidState(48, false);
  }

  WriteRlinkRYImpl(value);
  state_ = 49;
}

void ProtocolWithChangesWriterBase::WriteRlinkRZ(evo_test::RLink const& value) {
  if (unlikely(state_ != 49)) {
    InvalidState(49, false);
  }

  WriteRlinkRZImpl(value);
  state_ = 50;
}

void ProtocolWithChangesWriterBase::WriteRaRLink(evo_test::RA const& value) {
  if (unlikely(state_ != 50)) {
    InvalidState(50, false);
  }

  WriteRaRLinkImpl(value);
  state_ = 51;
}

void ProtocolWithChangesWriterBase::WriteRaRX(evo_test::RA const& value) {
  if (unlikely(state_ != 51)) {
    InvalidState(51, false);
  }

  WriteRaRXImpl(value);
  state_ = 52;
}

void ProtocolWithChangesWriterBase::WriteRaRY(evo_test::RA const& value) {
  if (unlikely(state_ != 52)) {
    InvalidState(52, false);
  }

  WriteRaRYImpl(value);
  state_ = 53;
}

void ProtocolWithChangesWriterBase::WriteRaRZ(evo_test::RA const& value) {
  if (unlikely(state_ != 53)) {
    InvalidState(53, false);
  }

  WriteRaRZImpl(value);
  state_ = 54;
}

void ProtocolWithChangesWriterBase::WriteRbRLink(evo_test::RB const& value) {
  if (unlikely(state_ != 54)) {
    InvalidState(54, false);
  }

  WriteRbRLinkImpl(value);
  state_ = 55;
}

void ProtocolWithChangesWriterBase::WriteRbRX(evo_test::RB const& value) {
  if (unlikely(state_ != 55)) {
    InvalidState(55, false);
  }

  WriteRbRXImpl(value);
  state_ = 56;
}

void ProtocolWithChangesWriterBase::WriteRbRY(evo_test::RB const& value) {
  if (unlikely(state_ != 56)) {
    InvalidState(56, false);
  }

  WriteRbRYImpl(value);
  state_ = 57;
}

void ProtocolWithChangesWriterBase::WriteRbRZ(evo_test::RB const& value) {
  if (unlikely(state_ != 57)) {
    InvalidState(57, false);
  }

  WriteRbRZImpl(value);
  state_ = 58;
}

void ProtocolWithChangesWriterBase::WriteRcRLink(evo_test::RC const& value) {
  if (unlikely(state_ != 58)) {
    InvalidState(58, false);
  }

  WriteRcRLinkImpl(value);
  state_ = 59;
}

void ProtocolWithChangesWriterBase::WriteRcRX(evo_test::RC const& value) {
  if (unlikely(state_ != 59)) {
    InvalidState(59, false);
  }

  WriteRcRXImpl(value);
  state_ = 60;
}

void ProtocolWithChangesWriterBase::WriteRcRY(evo_test::RC const& value) {
  if (unlikely(state_ != 60)) {
    InvalidState(60, false);
  }

  WriteRcRYImpl(value);
  state_ = 61;
}

void ProtocolWithChangesWriterBase::WriteRcRZ(evo_test::RC const& value) {
  if (unlikely(state_ != 61)) {
    InvalidState(61, false);
  }

  WriteRcRZImpl(value);
  state_ = 62;
}

void ProtocolWithChangesWriterBase::WriteRlinkRNew(evo_test::RLink const& value) {
  if (unlikely(state_ != 62)) {
    InvalidState(62, false);
  }

  WriteRlinkRNewImpl(value);
  state_ = 63;
}

void ProtocolWithChangesWriterBase::WriteRaRNew(evo_test::RA const& value) {
  if (unlikely(state_ != 63)) {
    InvalidState(63, false);
  }

  WriteRaRNewImpl(value);
  state_ = 64;
}

void ProtocolWithChangesWriterBase::WriteRbRNew(evo_test::RB const& value) {
  if (unlikely(state_ != 64)) {
    InvalidState(64, false);
  }

  WriteRbRNewImpl(value);
  state_ = 65;
}

void ProtocolWithChangesWriterBase::WriteRcRNew(evo_test::RC const& value) {
  if (unlikely(state_ != 65)) {
    InvalidState(65, false);
  }

  WriteRcRNewImpl(value);
  state_ = 66;
}

void ProtocolWithChangesWriterBase::WriteRlinkRUnion(evo_test::RLink const& value) {
  if (unlikely(state_ != 66)) {
    InvalidState(66, false);
  }

  WriteRlinkRUnionImpl(value);
  state_ = 67;
}

void ProtocolWithChangesWriterBase::WriteRaRUnion(evo_test::RA const& value) {
  if (unlikely(state_ != 67)) {
    InvalidState(67, false);
  }

  WriteRaRUnionImpl(value);
  state_ = 68;
}

void ProtocolWithChangesWriterBase::WriteRbRUnion(evo_test::RB const& value) {
  if (unlikely(state_ != 68)) {
    InvalidState(68, false);
  }

  WriteRbRUnionImpl(value);
  state_ = 69;
}

void ProtocolWithChangesWriterBase::WriteRcRUnion(evo_test::RC const& value) {
  if (unlikely(state_ != 69)) {
    InvalidState(69, false);
  }

  WriteRcRUnionImpl(value);
  state_ = 70;
}

void ProtocolWithChangesWriterBase::WriteOptionalRecordWithChanges(std::optional<evo_test::RecordWithChanges> const& value) {
  if (unlikely(state_ != 70)) {
    InvalidState(70, false);
  }

  WriteOptionalRecordWithChangesImpl(value);
  state_ = 71;
}

void ProtocolWithChangesWriterBase::WriteAliasedOptionalRecordWithChanges(std::optional<evo_test::AliasedRecordWithChanges> const& value) {
  if (unlikely(state_ != 71)) {
    InvalidState(71, false);
  }

  WriteAliasedOptionalRecordWithChangesImpl(value);
  state_ = 72;
}

void ProtocolWithChangesWriterBase::WriteUnionRecordWithChanges(std::variant<evo_test::RecordWithChanges, int32_t> const& value) {
  if (unlikely(state_ != 72)) {
    InvalidState(72, false);
  }

  WriteUnionRecordWithChangesImpl(value);
  state_ = 73;
}

void ProtocolWithChangesWriterBase::WriteUnionWithSameTypeset(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string> const& value) {
  if (unlikely(state_ != 73)) {
    InvalidState(73, false);
  }

  WriteUnionWithSameTypesetImpl(value);
  state_ = 74;
}

void ProtocolWithChangesWriterBase::WriteUnionWithTypesAdded(std::variant<evo_test::RecordWithChanges, float> const& value) {
  if (unlikely(state_ != 74)) {
    InvalidState(74, false);
  }

  WriteUnionWithTypesAddedImpl(value);
  state_ = 75;
}

void ProtocolWithChangesWriterBase::WriteUnionWithTypesRemoved(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string> const& value) {
  if (unlikely(state_ != 75)) {
    InvalidState(75, false);
  }

  WriteUnionWithTypesRemovedImpl(value);
  state_ = 76;
}

void ProtocolWithChangesWriterBase::WriteRecordToOptional(evo_test::RecordWithChanges const& value) {
  if (unlikely(state_ != 76)) {
    InvalidState(76, false);
  }

  WriteRecordToOptionalImpl(value);
  state_ = 77;
}

void ProtocolWithChangesWriterBase::WriteRecordToAliasedOptional(evo_test::RecordWithChanges const& value) {
  if (unlikely(state_ != 77)) {
    InvalidState(77, false);
  }

  WriteRecordToAliasedOptionalImpl(value);
  state_ = 78;
}

void ProtocolWithChangesWriterBase::WriteRecordToUnion(evo_test::RecordWithChanges const& value) {
  if (unlikely(state_ != 78)) {
    InvalidState(78, false);
  }

  WriteRecordToUnionImpl(value);
  state_ = 79;
}

void ProtocolWithChangesWriterBase::WriteRecordToAliasedUnion(evo_test::RecordWithChanges const& value) {
  if (unlikely(state_ != 79)) {
    InvalidState(79, false);
  }

  WriteRecordToAliasedUnionImpl(value);
  state_ = 80;
}

void ProtocolWithChangesWriterBase::WriteUnionToAliasedUnion(std::variant<evo_test::RecordWithChanges, int32_t> const& value) {
  if (unlikely(state_ != 80)) {
    InvalidState(80, false);
  }

  WriteUnionToAliasedUnionImpl(value);
  state_ = 81;
}

void ProtocolWithChangesWriterBase::WriteUnionToAliasedUnionWithChanges(std::variant<evo_test::RecordWithChanges, int32_t> const& value) {
  if (unlikely(state_ != 81)) {
    InvalidState(81, false);
  }

  WriteUnionToAliasedUnionWithChangesImpl(value);
  state_ = 82;
}

void ProtocolWithChangesWriterBase::WriteOptionalToAliasedOptional(std::optional<evo_test::RecordWithChanges> const& value) {
  if (unlikely(state_ != 82)) {
    InvalidState(82, false);
  }

  WriteOptionalToAliasedOptionalImpl(value);
  state_ = 83;
}

void ProtocolWithChangesWriterBase::WriteOptionalToAliasedOptionalWithChanges(std::optional<int32_t> const& value) {
  if (unlikely(state_ != 83)) {
    InvalidState(83, false);
  }

  WriteOptionalToAliasedOptionalWithChangesImpl(value);
  state_ = 84;
}

void ProtocolWithChangesWriterBase::WriteGenericRecord(evo_test::GenericRecord<int32_t, std::string> const& value) {
  if (unlikely(state_ != 84)) {
    InvalidState(84, false);
  }

  WriteGenericRecordImpl(value);
  state_ = 85;
}

void ProtocolWithChangesWriterBase::WriteGenericRecordToOpenAlias(evo_test::GenericRecord<int32_t, std::string> const& value) {
  if (unlikely(state_ != 85)) {
    InvalidState(85, false);
  }

  WriteGenericRecordToOpenAliasImpl(value);
  state_ = 86;
}

void ProtocolWithChangesWriterBase::WriteGenericRecordToClosedAlias(evo_test::GenericRecord<int32_t, std::string> const& value) {
  if (unlikely(state_ != 86)) {
    InvalidState(86, false);
  }

  WriteGenericRecordToClosedAliasImpl(value);
  state_ = 87;
}

void ProtocolWithChangesWriterBase::WriteGenericRecordToHalfClosedAlias(evo_test::GenericRecord<int32_t, std::string> const& value) {
  if (unlikely(state_ != 87)) {
    InvalidState(87, false);
  }

  WriteGenericRecordToHalfClosedAliasImpl(value);
  state_ = 88;
}

void ProtocolWithChangesWriterBase::WriteAliasedGenericRecordToAlias(evo_test::AliasedHalfClosedGenericRecord<int32_t> const& value) {
  if (unlikely(state_ != 88)) {
    InvalidState(88, false);
  }

  WriteAliasedGenericRecordToAliasImpl(value);
  state_ = 89;
}

void ProtocolWithChangesWriterBase::WriteGenericRecordToReversed(evo_test::GenericRecord<int32_t, std::string> const& value) {
  if (unlikely(state_ != 89)) {
    InvalidState(89, false);
  }

  WriteGenericRecordToReversedImpl(value);
  state_ = 90;
}

void ProtocolWithChangesWriterBase::WriteClosedGenericRecordToUnion(evo_test::AliasedClosedGenericRecord const& value) {
  if (unlikely(state_ != 90)) {
    InvalidState(90, false);
  }

  WriteClosedGenericRecordToUnionImpl(value);
  state_ = 91;
}

void ProtocolWithChangesWriterBase::WriteGenericRecordToAliasedUnion(evo_test::GenericRecord<int32_t, std::string> const& value) {
  if (unlikely(state_ != 91)) {
    InvalidState(91, false);
  }

  WriteGenericRecordToAliasedUnionImpl(value);
  state_ = 92;
}

void ProtocolWithChangesWriterBase::WriteGenericUnionToReversed(evo_test::AliasedClosedGenericUnion const& value) {
  if (unlikely(state_ != 92)) {
    InvalidState(92, false);
  }

  WriteGenericUnionToReversedImpl(value);
  state_ = 93;
}

void ProtocolWithChangesWriterBase::WriteGenericUnionOfChangedRecord(evo_test::AliasedClosedGenericUnion const& value) {
  if (unlikely(state_ != 93)) {
    InvalidState(93, false);
  }

  WriteGenericUnionOfChangedRecordImpl(value);
  state_ = 94;
}

void ProtocolWithChangesWriterBase::WriteGenericParentRecord(evo_test::GenericParentRecord<int32_t> const& value) {
  if (unlikely(state_ != 94)) {
    InvalidState(94, false);
  }

  WriteGenericParentRecordImpl(value);
  state_ = 95;
}

void ProtocolWithChangesWriterBase::WriteGenericNestedRecords(evo_test::GenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::ChangedGeneric<std::string, int32_t>> const& value) {
  if (unlikely(state_ != 95)) {
    InvalidState(95, false);
  }

  WriteGenericNestedRecordsImpl(value);
  state_ = 96;
}

void ProtocolWithChangesWriterBase::WriteGenericRecordStream(evo_test::GenericRecord<int32_t, std::string> const& value) {
  if (unlikely(state_ != 96)) {
    InvalidState(96, false);
  }

  WriteGenericRecordStreamImpl(value);
}

void ProtocolWithChangesWriterBase::WriteGenericRecordStream(std::vector<evo_test::GenericRecord<int32_t, std::string>> const& values) {
  if (unlikely(state_ != 96)) {
    InvalidState(96, false);
  }

  WriteGenericRecordStreamImpl(values);
}

void ProtocolWithChangesWriterBase::EndGenericRecordStream() {
  if (unlikely(state_ != 96)) {
    InvalidState(96, true);
  }

  EndGenericRecordStreamImpl();
  state_ = 97;
}

// fallback implementation
void ProtocolWithChangesWriterBase::WriteGenericRecordStreamImpl(std::vector<evo_test::GenericRecord<int32_t, std::string>> const& values) {
  for (auto const& v : values) {
    WriteGenericRecordStreamImpl(v);
  }
}

void ProtocolWithChangesWriterBase::WriteGenericParentRecordStream(evo_test::GenericParentRecord<int32_t> const& value) {
  if (unlikely(state_ != 97)) {
    InvalidState(97, false);
  }

  WriteGenericParentRecordStreamImpl(value);
}

void ProtocolWithChangesWriterBase::WriteGenericParentRecordStream(std::vector<evo_test::GenericParentRecord<int32_t>> const& values) {
  if (unlikely(state_ != 97)) {
    InvalidState(97, false);
  }

  WriteGenericParentRecordStreamImpl(values);
}

void ProtocolWithChangesWriterBase::EndGenericParentRecordStream() {
  if (unlikely(state_ != 97)) {
    InvalidState(97, true);
  }

  EndGenericParentRecordStreamImpl();
  state_ = 98;
}

// fallback implementation
void ProtocolWithChangesWriterBase::WriteGenericParentRecordStreamImpl(std::vector<evo_test::GenericParentRecord<int32_t>> const& values) {
  for (auto const& v : values) {
    WriteGenericParentRecordStreamImpl(v);
  }
}

void ProtocolWithChangesWriterBase::WriteVectorRecordWithChanges(std::vector<evo_test::RecordWithChanges> const& value) {
  if (unlikely(state_ != 98)) {
    InvalidState(98, false);
  }

  WriteVectorRecordWithChangesImpl(value);
  state_ = 99;
}

void ProtocolWithChangesWriterBase::WriteStreamedRecordWithChanges(evo_test::RecordWithChanges const& value) {
  if (unlikely(state_ != 99)) {
    InvalidState(99, false);
  }

  WriteStreamedRecordWithChangesImpl(value);
}

void ProtocolWithChangesWriterBase::WriteStreamedRecordWithChanges(std::vector<evo_test::RecordWithChanges> const& values) {
  if (unlikely(state_ != 99)) {
    InvalidState(99, false);
  }

  WriteStreamedRecordWithChangesImpl(values);
}

void ProtocolWithChangesWriterBase::EndStreamedRecordWithChanges() {
  if (unlikely(state_ != 99)) {
    InvalidState(99, true);
  }

  EndStreamedRecordWithChangesImpl();
  state_ = 100;
}

// fallback implementation
void ProtocolWithChangesWriterBase::WriteStreamedRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges> const& values) {
  for (auto const& v : values) {
    WriteStreamedRecordWithChangesImpl(v);
  }
}

void ProtocolWithChangesWriterBase::Close() {
  if (unlikely(state_ != 100)) {
    InvalidState(100, false);
  }

  CloseImpl();
}

void ProtocolWithChangesWriterBase::InvalidState(uint8_t attempted, [[maybe_unused]] bool end) {
  std::string expected_method;
  switch (state_) {
  case 0: expected_method = "WriteInt8ToInt()"; break;
  case 1: expected_method = "WriteInt8ToLong()"; break;
  case 2: expected_method = "WriteInt8ToUint()"; break;
  case 3: expected_method = "WriteInt8ToUlong()"; break;
  case 4: expected_method = "WriteInt8ToFloat()"; break;
  case 5: expected_method = "WriteInt8ToDouble()"; break;
  case 6: expected_method = "WriteIntToUint()"; break;
  case 7: expected_method = "WriteIntToLong()"; break;
  case 8: expected_method = "WriteIntToFloat()"; break;
  case 9: expected_method = "WriteIntToDouble()"; break;
  case 10: expected_method = "WriteUintToUlong()"; break;
  case 11: expected_method = "WriteUintToFloat()"; break;
  case 12: expected_method = "WriteUintToDouble()"; break;
  case 13: expected_method = "WriteFloatToDouble()"; break;
  case 14: expected_method = "WriteComplexFloatToComplexDouble()"; break;
  case 15: expected_method = "WriteIntToString()"; break;
  case 16: expected_method = "WriteUintToString()"; break;
  case 17: expected_method = "WriteLongToString()"; break;
  case 18: expected_method = "WriteUlongToString()"; break;
  case 19: expected_method = "WriteFloatToString()"; break;
  case 20: expected_method = "WriteDoubleToString()"; break;
  case 21: expected_method = "WriteIntToOptional()"; break;
  case 22: expected_method = "WriteFloatToOptional()"; break;
  case 23: expected_method = "WriteStringToOptional()"; break;
  case 24: expected_method = "WriteIntToUnion()"; break;
  case 25: expected_method = "WriteFloatToUnion()"; break;
  case 26: expected_method = "WriteStringToUnion()"; break;
  case 27: expected_method = "WriteOptionalIntToFloat()"; break;
  case 28: expected_method = "WriteOptionalFloatToString()"; break;
  case 29: expected_method = "WriteAliasedLongToString()"; break;
  case 30: expected_method = "WriteStringToAliasedString()"; break;
  case 31: expected_method = "WriteStringToAliasedInt()"; break;
  case 32: expected_method = "WriteEnumToAliasedEnum()"; break;
  case 33: expected_method = "WriteOptionalIntToUnion()"; break;
  case 34: expected_method = "WriteOptionalRecordToUnion()"; break;
  case 35: expected_method = "WriteRecordWithChanges()"; break;
  case 36: expected_method = "WriteAliasedRecordWithChanges()"; break;
  case 37: expected_method = "WriteRecordToRenamedRecord()"; break;
  case 38: expected_method = "WriteRecordToAliasedRecord()"; break;
  case 39: expected_method = "WriteRecordToAliasedAlias()"; break;
  case 40: expected_method = "WriteStreamIntToStringToFloat() or EndStreamIntToStringToFloat()"; break;
  case 41: expected_method = "WriteVectorIntToStringToFloat()"; break;
  case 42: expected_method = "WriteIntFloatUnionReordered()"; break;
  case 43: expected_method = "WriteVectorUnionReordered()"; break;
  case 44: expected_method = "WriteStreamUnionReordered() or EndStreamUnionReordered()"; break;
  case 45: expected_method = "WriteStreamOfAliasTypeChange() or EndStreamOfAliasTypeChange()"; break;
  case 46: expected_method = "WriteRlink()"; break;
  case 47: expected_method = "WriteRlinkRX()"; break;
  case 48: expected_method = "WriteRlinkRY()"; break;
  case 49: expected_method = "WriteRlinkRZ()"; break;
  case 50: expected_method = "WriteRaRLink()"; break;
  case 51: expected_method = "WriteRaRX()"; break;
  case 52: expected_method = "WriteRaRY()"; break;
  case 53: expected_method = "WriteRaRZ()"; break;
  case 54: expected_method = "WriteRbRLink()"; break;
  case 55: expected_method = "WriteRbRX()"; break;
  case 56: expected_method = "WriteRbRY()"; break;
  case 57: expected_method = "WriteRbRZ()"; break;
  case 58: expected_method = "WriteRcRLink()"; break;
  case 59: expected_method = "WriteRcRX()"; break;
  case 60: expected_method = "WriteRcRY()"; break;
  case 61: expected_method = "WriteRcRZ()"; break;
  case 62: expected_method = "WriteRlinkRNew()"; break;
  case 63: expected_method = "WriteRaRNew()"; break;
  case 64: expected_method = "WriteRbRNew()"; break;
  case 65: expected_method = "WriteRcRNew()"; break;
  case 66: expected_method = "WriteRlinkRUnion()"; break;
  case 67: expected_method = "WriteRaRUnion()"; break;
  case 68: expected_method = "WriteRbRUnion()"; break;
  case 69: expected_method = "WriteRcRUnion()"; break;
  case 70: expected_method = "WriteOptionalRecordWithChanges()"; break;
  case 71: expected_method = "WriteAliasedOptionalRecordWithChanges()"; break;
  case 72: expected_method = "WriteUnionRecordWithChanges()"; break;
  case 73: expected_method = "WriteUnionWithSameTypeset()"; break;
  case 74: expected_method = "WriteUnionWithTypesAdded()"; break;
  case 75: expected_method = "WriteUnionWithTypesRemoved()"; break;
  case 76: expected_method = "WriteRecordToOptional()"; break;
  case 77: expected_method = "WriteRecordToAliasedOptional()"; break;
  case 78: expected_method = "WriteRecordToUnion()"; break;
  case 79: expected_method = "WriteRecordToAliasedUnion()"; break;
  case 80: expected_method = "WriteUnionToAliasedUnion()"; break;
  case 81: expected_method = "WriteUnionToAliasedUnionWithChanges()"; break;
  case 82: expected_method = "WriteOptionalToAliasedOptional()"; break;
  case 83: expected_method = "WriteOptionalToAliasedOptionalWithChanges()"; break;
  case 84: expected_method = "WriteGenericRecord()"; break;
  case 85: expected_method = "WriteGenericRecordToOpenAlias()"; break;
  case 86: expected_method = "WriteGenericRecordToClosedAlias()"; break;
  case 87: expected_method = "WriteGenericRecordToHalfClosedAlias()"; break;
  case 88: expected_method = "WriteAliasedGenericRecordToAlias()"; break;
  case 89: expected_method = "WriteGenericRecordToReversed()"; break;
  case 90: expected_method = "WriteClosedGenericRecordToUnion()"; break;
  case 91: expected_method = "WriteGenericRecordToAliasedUnion()"; break;
  case 92: expected_method = "WriteGenericUnionToReversed()"; break;
  case 93: expected_method = "WriteGenericUnionOfChangedRecord()"; break;
  case 94: expected_method = "WriteGenericParentRecord()"; break;
  case 95: expected_method = "WriteGenericNestedRecords()"; break;
  case 96: expected_method = "WriteGenericRecordStream() or EndGenericRecordStream()"; break;
  case 97: expected_method = "WriteGenericParentRecordStream() or EndGenericParentRecordStream()"; break;
  case 98: expected_method = "WriteVectorRecordWithChanges()"; break;
  case 99: expected_method = "WriteStreamedRecordWithChanges() or EndStreamedRecordWithChanges()"; break;
  }
  std::string attempted_method;
  switch (attempted) {
  case 0: attempted_method = "WriteInt8ToInt()"; break;
  case 1: attempted_method = "WriteInt8ToLong()"; break;
  case 2: attempted_method = "WriteInt8ToUint()"; break;
  case 3: attempted_method = "WriteInt8ToUlong()"; break;
  case 4: attempted_method = "WriteInt8ToFloat()"; break;
  case 5: attempted_method = "WriteInt8ToDouble()"; break;
  case 6: attempted_method = "WriteIntToUint()"; break;
  case 7: attempted_method = "WriteIntToLong()"; break;
  case 8: attempted_method = "WriteIntToFloat()"; break;
  case 9: attempted_method = "WriteIntToDouble()"; break;
  case 10: attempted_method = "WriteUintToUlong()"; break;
  case 11: attempted_method = "WriteUintToFloat()"; break;
  case 12: attempted_method = "WriteUintToDouble()"; break;
  case 13: attempted_method = "WriteFloatToDouble()"; break;
  case 14: attempted_method = "WriteComplexFloatToComplexDouble()"; break;
  case 15: attempted_method = "WriteIntToString()"; break;
  case 16: attempted_method = "WriteUintToString()"; break;
  case 17: attempted_method = "WriteLongToString()"; break;
  case 18: attempted_method = "WriteUlongToString()"; break;
  case 19: attempted_method = "WriteFloatToString()"; break;
  case 20: attempted_method = "WriteDoubleToString()"; break;
  case 21: attempted_method = "WriteIntToOptional()"; break;
  case 22: attempted_method = "WriteFloatToOptional()"; break;
  case 23: attempted_method = "WriteStringToOptional()"; break;
  case 24: attempted_method = "WriteIntToUnion()"; break;
  case 25: attempted_method = "WriteFloatToUnion()"; break;
  case 26: attempted_method = "WriteStringToUnion()"; break;
  case 27: attempted_method = "WriteOptionalIntToFloat()"; break;
  case 28: attempted_method = "WriteOptionalFloatToString()"; break;
  case 29: attempted_method = "WriteAliasedLongToString()"; break;
  case 30: attempted_method = "WriteStringToAliasedString()"; break;
  case 31: attempted_method = "WriteStringToAliasedInt()"; break;
  case 32: attempted_method = "WriteEnumToAliasedEnum()"; break;
  case 33: attempted_method = "WriteOptionalIntToUnion()"; break;
  case 34: attempted_method = "WriteOptionalRecordToUnion()"; break;
  case 35: attempted_method = "WriteRecordWithChanges()"; break;
  case 36: attempted_method = "WriteAliasedRecordWithChanges()"; break;
  case 37: attempted_method = "WriteRecordToRenamedRecord()"; break;
  case 38: attempted_method = "WriteRecordToAliasedRecord()"; break;
  case 39: attempted_method = "WriteRecordToAliasedAlias()"; break;
  case 40: attempted_method = end ? "EndStreamIntToStringToFloat()" : "WriteStreamIntToStringToFloat()"; break;
  case 41: attempted_method = "WriteVectorIntToStringToFloat()"; break;
  case 42: attempted_method = "WriteIntFloatUnionReordered()"; break;
  case 43: attempted_method = "WriteVectorUnionReordered()"; break;
  case 44: attempted_method = end ? "EndStreamUnionReordered()" : "WriteStreamUnionReordered()"; break;
  case 45: attempted_method = end ? "EndStreamOfAliasTypeChange()" : "WriteStreamOfAliasTypeChange()"; break;
  case 46: attempted_method = "WriteRlink()"; break;
  case 47: attempted_method = "WriteRlinkRX()"; break;
  case 48: attempted_method = "WriteRlinkRY()"; break;
  case 49: attempted_method = "WriteRlinkRZ()"; break;
  case 50: attempted_method = "WriteRaRLink()"; break;
  case 51: attempted_method = "WriteRaRX()"; break;
  case 52: attempted_method = "WriteRaRY()"; break;
  case 53: attempted_method = "WriteRaRZ()"; break;
  case 54: attempted_method = "WriteRbRLink()"; break;
  case 55: attempted_method = "WriteRbRX()"; break;
  case 56: attempted_method = "WriteRbRY()"; break;
  case 57: attempted_method = "WriteRbRZ()"; break;
  case 58: attempted_method = "WriteRcRLink()"; break;
  case 59: attempted_method = "WriteRcRX()"; break;
  case 60: attempted_method = "WriteRcRY()"; break;
  case 61: attempted_method = "WriteRcRZ()"; break;
  case 62: attempted_method = "WriteRlinkRNew()"; break;
  case 63: attempted_method = "WriteRaRNew()"; break;
  case 64: attempted_method = "WriteRbRNew()"; break;
  case 65: attempted_method = "WriteRcRNew()"; break;
  case 66: attempted_method = "WriteRlinkRUnion()"; break;
  case 67: attempted_method = "WriteRaRUnion()"; break;
  case 68: attempted_method = "WriteRbRUnion()"; break;
  case 69: attempted_method = "WriteRcRUnion()"; break;
  case 70: attempted_method = "WriteOptionalRecordWithChanges()"; break;
  case 71: attempted_method = "WriteAliasedOptionalRecordWithChanges()"; break;
  case 72: attempted_method = "WriteUnionRecordWithChanges()"; break;
  case 73: attempted_method = "WriteUnionWithSameTypeset()"; break;
  case 74: attempted_method = "WriteUnionWithTypesAdded()"; break;
  case 75: attempted_method = "WriteUnionWithTypesRemoved()"; break;
  case 76: attempted_method = "WriteRecordToOptional()"; break;
  case 77: attempted_method = "WriteRecordToAliasedOptional()"; break;
  case 78: attempted_method = "WriteRecordToUnion()"; break;
  case 79: attempted_method = "WriteRecordToAliasedUnion()"; break;
  case 80: attempted_method = "WriteUnionToAliasedUnion()"; break;
  case 81: attempted_method = "WriteUnionToAliasedUnionWithChanges()"; break;
  case 82: attempted_method = "WriteOptionalToAliasedOptional()"; break;
  case 83: attempted_method = "WriteOptionalToAliasedOptionalWithChanges()"; break;
  case 84: attempted_method = "WriteGenericRecord()"; break;
  case 85: attempted_method = "WriteGenericRecordToOpenAlias()"; break;
  case 86: attempted_method = "WriteGenericRecordToClosedAlias()"; break;
  case 87: attempted_method = "WriteGenericRecordToHalfClosedAlias()"; break;
  case 88: attempted_method = "WriteAliasedGenericRecordToAlias()"; break;
  case 89: attempted_method = "WriteGenericRecordToReversed()"; break;
  case 90: attempted_method = "WriteClosedGenericRecordToUnion()"; break;
  case 91: attempted_method = "WriteGenericRecordToAliasedUnion()"; break;
  case 92: attempted_method = "WriteGenericUnionToReversed()"; break;
  case 93: attempted_method = "WriteGenericUnionOfChangedRecord()"; break;
  case 94: attempted_method = "WriteGenericParentRecord()"; break;
  case 95: attempted_method = "WriteGenericNestedRecords()"; break;
  case 96: attempted_method = end ? "EndGenericRecordStream()" : "WriteGenericRecordStream()"; break;
  case 97: attempted_method = end ? "EndGenericParentRecordStream()" : "WriteGenericParentRecordStream()"; break;
  case 98: attempted_method = "WriteVectorRecordWithChanges()"; break;
  case 99: attempted_method = end ? "EndStreamedRecordWithChanges()" : "WriteStreamedRecordWithChanges()"; break;
  case 100: attempted_method = "Close()"; break;
  }
  throw std::runtime_error("Expected call to " + expected_method + " but received call to " + attempted_method + " instead.");
}

std::string ProtocolWithChangesReaderBase::schema_ = ProtocolWithChangesWriterBase::schema_;

std::vector<std::string> ProtocolWithChangesReaderBase::previous_schemas_ = ProtocolWithChangesWriterBase::previous_schemas_;

Version ProtocolWithChangesReaderBase::VersionFromSchema(std::string const& schema) {
  if (schema == ProtocolWithChangesWriterBase::schema_) {
    return Version::Current;
  }
  throw std::runtime_error("The schema does not match any version supported by protocol ProtocolWithChanges.");
}

void ProtocolWithChangesReaderBase::ReadInt8ToInt(int8_t& value) {
  if (unlikely(state_ != 0)) {
    InvalidState(0);
  }

  ReadInt8ToIntImpl(value);
  state_ = 2;
}

void ProtocolWithChangesReaderBase::ReadInt8ToLong(int8_t& value) {
  if (unlikely(state_ != 2)) {
    InvalidState(2);
  }

  ReadInt8ToLongImpl(value);
  state_ = 4;
}

void ProtocolWithChangesReaderBase::ReadInt8ToUint(int8_t& value) {
  if (unlikely(state_ != 4)) {
    InvalidState(4);
  }

  ReadInt8ToUintImpl(value);
  state_ = 6;
}

void ProtocolWithChangesReaderBase::ReadInt8ToUlong(int8_t& value) {
  if (unlikely(state_ != 6)) {
    InvalidState(6);
  }

  ReadInt8ToUlongImpl(value);
  state_ = 8;
}

void ProtocolWithChangesReaderBase::ReadInt8ToFloat(int8_t& value) {
  if (unlikely(state_ != 8)) {
    InvalidState(8);
  }

  ReadInt8ToFloatImpl(value);
  state_ = 10;
}

void ProtocolWithChangesReaderBase::ReadInt8ToDouble(int8_t& value) {
  if (unlikely(state_ != 10)) {
    InvalidState(10);
  }

  ReadInt8ToDoubleImpl(value);
  state_ = 12;
}

void ProtocolWithChangesReaderBase::ReadIntToUint(int32_t& value) {
  if (unlikely(state_ != 12)) {
    InvalidState(12);
  }

  ReadIntToUintImpl(value);
  state_ = 14;
}

void ProtocolWithChangesReaderBase::ReadIntToLong(int32_t& value) {
  if (unlikely(state_ != 14)) {
    InvalidState(14);
  }

  ReadIntToLongImpl(value);
  state_ = 16;
}

void ProtocolWithChangesReaderBase::ReadIntToFloat(int32_t& value) {
  if (unlikely(state_ != 16)) {
    InvalidState(16);
  }

  ReadIntToFloatImpl(value);
  state_ = 18;
}

void ProtocolWithChangesReaderBase::ReadIntToDouble(int32_t& value) {
  if (unlikely(state_ != 18)) {
    InvalidState(18);
  }

  ReadIntToDoubleImpl(value);
  state_ = 20;
}

void ProtocolWithChangesReaderBase::ReadUintToUlong(uint32_t& value) {
  if (unlikely(state_ != 20)) {
    InvalidState(20);
  }

  ReadUintToUlongImpl(value);
  state_ = 22;
}

void ProtocolWithChangesReaderBase::ReadUintToFloat(uint32_t& value) {
  if (unlikely(state_ != 22)) {
    InvalidState(22);
  }

  ReadUintToFloatImpl(value);
  state_ = 24;
}

void ProtocolWithChangesReaderBase::ReadUintToDouble(uint32_t& value) {
  if (unlikely(state_ != 24)) {
    InvalidState(24);
  }

  ReadUintToDoubleImpl(value);
  state_ = 26;
}

void ProtocolWithChangesReaderBase::ReadFloatToDouble(float& value) {
  if (unlikely(state_ != 26)) {
    InvalidState(26);
  }

  ReadFloatToDoubleImpl(value);
  state_ = 28;
}

void ProtocolWithChangesReaderBase::ReadComplexFloatToComplexDouble(std::complex<float>& value) {
  if (unlikely(state_ != 28)) {
    InvalidState(28);
  }

  ReadComplexFloatToComplexDoubleImpl(value);
  state_ = 30;
}

void ProtocolWithChangesReaderBase::ReadIntToString(int32_t& value) {
  if (unlikely(state_ != 30)) {
    InvalidState(30);
  }

  ReadIntToStringImpl(value);
  state_ = 32;
}

void ProtocolWithChangesReaderBase::ReadUintToString(uint32_t& value) {
  if (unlikely(state_ != 32)) {
    InvalidState(32);
  }

  ReadUintToStringImpl(value);
  state_ = 34;
}

void ProtocolWithChangesReaderBase::ReadLongToString(int64_t& value) {
  if (unlikely(state_ != 34)) {
    InvalidState(34);
  }

  ReadLongToStringImpl(value);
  state_ = 36;
}

void ProtocolWithChangesReaderBase::ReadUlongToString(uint64_t& value) {
  if (unlikely(state_ != 36)) {
    InvalidState(36);
  }

  ReadUlongToStringImpl(value);
  state_ = 38;
}

void ProtocolWithChangesReaderBase::ReadFloatToString(float& value) {
  if (unlikely(state_ != 38)) {
    InvalidState(38);
  }

  ReadFloatToStringImpl(value);
  state_ = 40;
}

void ProtocolWithChangesReaderBase::ReadDoubleToString(double& value) {
  if (unlikely(state_ != 40)) {
    InvalidState(40);
  }

  ReadDoubleToStringImpl(value);
  state_ = 42;
}

void ProtocolWithChangesReaderBase::ReadIntToOptional(int32_t& value) {
  if (unlikely(state_ != 42)) {
    InvalidState(42);
  }

  ReadIntToOptionalImpl(value);
  state_ = 44;
}

void ProtocolWithChangesReaderBase::ReadFloatToOptional(float& value) {
  if (unlikely(state_ != 44)) {
    InvalidState(44);
  }

  ReadFloatToOptionalImpl(value);
  state_ = 46;
}

void ProtocolWithChangesReaderBase::ReadStringToOptional(std::string& value) {
  if (unlikely(state_ != 46)) {
    InvalidState(46);
  }

  ReadStringToOptionalImpl(value);
  state_ = 48;
}

void ProtocolWithChangesReaderBase::ReadIntToUnion(int32_t& value) {
  if (unlikely(state_ != 48)) {
    InvalidState(48);
  }

  ReadIntToUnionImpl(value);
  state_ = 50;
}

void ProtocolWithChangesReaderBase::ReadFloatToUnion(float& value) {
  if (unlikely(state_ != 50)) {
    InvalidState(50);
  }

  ReadFloatToUnionImpl(value);
  state_ = 52;
}

void ProtocolWithChangesReaderBase::ReadStringToUnion(std::string& value) {
  if (unlikely(state_ != 52)) {
    InvalidState(52);
  }

  ReadStringToUnionImpl(value);
  state_ = 54;
}

void ProtocolWithChangesReaderBase::ReadOptionalIntToFloat(std::optional<int32_t>& value) {
  if (unlikely(state_ != 54)) {
    InvalidState(54);
  }

  ReadOptionalIntToFloatImpl(value);
  state_ = 56;
}

void ProtocolWithChangesReaderBase::ReadOptionalFloatToString(std::optional<float>& value) {
  if (unlikely(state_ != 56)) {
    InvalidState(56);
  }

  ReadOptionalFloatToStringImpl(value);
  state_ = 58;
}

void ProtocolWithChangesReaderBase::ReadAliasedLongToString(evo_test::AliasedLongToString& value) {
  if (unlikely(state_ != 58)) {
    InvalidState(58);
  }

  ReadAliasedLongToStringImpl(value);
  state_ = 60;
}

void ProtocolWithChangesReaderBase::ReadStringToAliasedString(std::string& value) {
  if (unlikely(state_ != 60)) {
    InvalidState(60);
  }

  ReadStringToAliasedStringImpl(value);
  state_ = 62;
}

void ProtocolWithChangesReaderBase::ReadStringToAliasedInt(std::string& value) {
  if (unlikely(state_ != 62)) {
    InvalidState(62);
  }

  ReadStringToAliasedIntImpl(value);
  state_ = 64;
}

void ProtocolWithChangesReaderBase::ReadEnumToAliasedEnum(evo_test::GrowingEnum& value) {
  if (unlikely(state_ != 64)) {
    InvalidState(64);
  }

  ReadEnumToAliasedEnumImpl(value);
  state_ = 66;
}

void ProtocolWithChangesReaderBase::ReadOptionalIntToUnion(std::optional<int32_t>& value) {
  if (unlikely(state_ != 66)) {
    InvalidState(66);
  }

  ReadOptionalIntToUnionImpl(value);
  state_ = 68;
}

void ProtocolWithChangesReaderBase::ReadOptionalRecordToUnion(std::optional<evo_test::RecordWithChanges>& value) {
  if (unlikely(state_ != 68)) {
    InvalidState(68);
  }

  ReadOptionalRecordToUnionImpl(value);
  state_ = 70;
}

void ProtocolWithChangesReaderBase::ReadRecordWithChanges(evo_test::RecordWithChanges& value) {
  if (unlikely(state_ != 70)) {
    InvalidState(70);
  }

  ReadRecordWithChangesImpl(value);
  state_ = 72;
}

void ProtocolWithChangesReaderBase::ReadAliasedRecordWithChanges(evo_test::AliasedRecordWithChanges& value) {
  if (unlikely(state_ != 72)) {
    InvalidState(72);
  }

  ReadAliasedRecordWithChangesImpl(value);
  state_ = 74;
}

void ProtocolWithChangesReaderBase::ReadRecordToRenamedRecord(evo_test::RenamedRecord& value) {
  if (unlikely(state_ != 74)) {
    InvalidState(74);
  }

  ReadRecordToRenamedRecordImpl(value);
  state_ = 76;
}

void ProtocolWithChangesReaderBase::ReadRecordToAliasedRecord(evo_test::RecordWithChanges& value) {
  if (unlikely(state_ != 76)) {
    InvalidState(76);
  }

  ReadRecordToAliasedRecordImpl(value);
  state_ = 78;
}

void ProtocolWithChangesReaderBase::ReadRecordToAliasedAlias(evo_test::RecordWithChanges& value) {
  if (unlikely(state_ != 78)) {
    InvalidState(78);
  }

  ReadRecordToAliasedAliasImpl(value);
  state_ = 80;
}

bool ProtocolWithChangesReaderBase::ReadStreamIntToStringToFloat(int32_t& value) {
  if (unlikely(state_ != 80)) {
    if (state_ == 81) {
      state_ = 82;
      return false;
    }
    InvalidState(80);
  }

  bool result = ReadStreamIntToStringToFloatImpl(value);
  if (!result) {
    state_ = 82;
  }
  return result;
}

bool ProtocolWithChangesReaderBase::ReadStreamIntToStringToFloat(std::vector<int32_t>& values) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (unlikely(state_ != 80)) {
    if (state_ == 81) {
      state_ = 82;
      values.clear();
      return false;
    }
    InvalidState(80);
  }

  if (!ReadStreamIntToStringToFloatImpl(values)) {
    state_ = 81;
    return values.size() > 0;
  }
  return true;
}

// fallback implementation
bool ProtocolWithChangesReaderBase::ReadStreamIntToStringToFloatImpl(std::vector<int32_t>& values) {
  size_t i = 0;
  while (true) {
    if (i == values.size()) {
      values.resize(i + 1);
    }
    if (!ReadStreamIntToStringToFloatImpl(values[i])) {
      values.resize(i);
      return false;
    }
    i++;
    if (i == values.capacity()) {
      return true;
    }
  }
}

void ProtocolWithChangesReaderBase::ReadVectorIntToStringToFloat(std::vector<int32_t>& value) {
  if (unlikely(state_ != 82)) {
    if (state_ == 81) {
      state_ = 82;
    } else {
      InvalidState(82);
    }
  }

  ReadVectorIntToStringToFloatImpl(value);
  state_ = 84;
}

void ProtocolWithChangesReaderBase::ReadIntFloatUnionReordered(std::variant<int32_t, float>& value) {
  if (unlikely(state_ != 84)) {
    InvalidState(84);
  }

  ReadIntFloatUnionReorderedImpl(value);
  state_ = 86;
}

void ProtocolWithChangesReaderBase::ReadVectorUnionReordered(std::vector<std::variant<int32_t, float>>& value) {
  if (unlikely(state_ != 86)) {
    InvalidState(86);
  }

  ReadVectorUnionReorderedImpl(value);
  state_ = 88;
}

bool ProtocolWithChangesReaderBase::ReadStreamUnionReordered(std::variant<int32_t, std::string>& value) {
  if (unlikely(state_ != 88)) {
    if (state_ == 89) {
      state_ = 90;
      return false;
    }
    InvalidState(88);
  }

  bool result = ReadStreamUnionReorderedImpl(value);
  if (!result) {
    state_ = 90;
  }
  return result;
}

bool ProtocolWithChangesReaderBase::ReadStreamUnionReordered(std::vector<std::variant<int32_t, std::string>>& values) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (unlikely(state_ != 88)) {
    if (state_ == 89) {
      state_ = 90;
      values.clear();
      return false;
    }
    InvalidState(88);
  }

  if (!ReadStreamUnionReorderedImpl(values)) {
    state_ = 89;
    return values.size() > 0;
  }
  return true;
}

// fallback implementation
bool ProtocolWithChangesReaderBase::ReadStreamUnionReorderedImpl(std::vector<std::variant<int32_t, std::string>>& values) {
  size_t i = 0;
  while (true) {
    if (i == values.size()) {
      values.resize(i + 1);
    }
    if (!ReadStreamUnionReorderedImpl(values[i])) {
      values.resize(i);
      return false;
    }
    i++;
    if (i == values.capacity()) {
      return true;
    }
  }
}

bool ProtocolWithChangesReaderBase::ReadStreamOfAliasTypeChange(evo_test::StreamItem& value) {
  if (unlikely(state_ != 90)) {
    if (state_ == 91) {
      state_ = 92;
      return false;
    }
    if (state_ == 89) {
      state_ = 90;
    } else {
      InvalidState(90);
    }
  }

  bool result = ReadStreamOfAliasTypeChangeImpl(value);
  if (!result) {
    state_ = 92;
  }
  return result;
}

bool ProtocolWithChangesReaderBase::ReadStreamOfAliasTypeChange(std::vector<evo_test::StreamItem>& values) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (unlikely(state_ != 90)) {
    if (state_ == 91) {
      state_ = 92;
      values.clear();
      return false;
    }
    if (state_ == 89) {
      state_ = 90;
    } else {
      InvalidState(90);
    }
  }

  if (!ReadStreamOfAliasTypeChangeImpl(values)) {
    state_ = 91;
    return values.size() > 0;
  }
  return true;
}

// fallback implementation
bool ProtocolWithChangesReaderBase::ReadStreamOfAliasTypeChangeImpl(std::vector<evo_test::StreamItem>& values) {
  size_t i = 0;
  while (true) {
    if (i == values.size()) {
      values.resize(i + 1);
    }
    if (!ReadStreamOfAliasTypeChangeImpl(values[i])) {
      values.resize(i);
      return false;
    }
    i++;
    if (i == values.capacity()) {
      return true;
    }
  }
}

void ProtocolWithChangesReaderBase::ReadRlink(evo_test::RLink& value) {
  if (unlikely(state_ != 92)) {
    if (state_ == 91) {
      state_ = 92;
    } else {
      InvalidState(92);
    }
  }

  ReadRlinkImpl(value);
  state_ = 94;
}

void ProtocolWithChangesReaderBase::ReadRlinkRX(evo_test::RLink& value) {
  if (unlikely(state_ != 94)) {
    InvalidState(94);
  }

  ReadRlinkRXImpl(value);
  state_ = 96;
}

void ProtocolWithChangesReaderBase::ReadRlinkRY(evo_test::RLink& value) {
  if (unlikely(state_ != 96)) {
    InvalidState(96);
  }

  ReadRlinkRYImpl(value);
  state_ = 98;
}

void ProtocolWithChangesReaderBase::ReadRlinkRZ(evo_test::RLink& value) {
  if (unlikely(state_ != 98)) {
    InvalidState(98);
  }

  ReadRlinkRZImpl(value);
  state_ = 100;
}

void ProtocolWithChangesReaderBase::ReadRaRLink(evo_test::RA& value) {
  if (unlikely(state_ != 100)) {
    InvalidState(100);
  }

  ReadRaRLinkImpl(value);
  state_ = 102;
}

void ProtocolWithChangesReaderBase::ReadRaRX(evo_test::RA& value) {
  if (unlikely(state_ != 102)) {
    InvalidState(102);
  }

  ReadRaRXImpl(value);
  state_ = 104;
}

void ProtocolWithChangesReaderBase::ReadRaRY(evo_test::RA& value) {
  if (unlikely(state_ != 104)) {
    InvalidState(104);
  }

  ReadRaRYImpl(value);
  state_ = 106;
}

void ProtocolWithChangesReaderBase::ReadRaRZ(evo_test::RA& value) {
  if (unlikely(state_ != 106)) {
    InvalidState(106);
  }

  ReadRaRZImpl(value);
  state_ = 108;
}

void ProtocolWithChangesReaderBase::ReadRbRLink(evo_test::RB& value) {
  if (unlikely(state_ != 108)) {
    InvalidState(108);
  }

  ReadRbRLinkImpl(value);
  state_ = 110;
}

void ProtocolWithChangesReaderBase::ReadRbRX(evo_test::RB& value) {
  if (unlikely(state_ != 110)) {
    InvalidState(110);
  }

  ReadRbRXImpl(value);
  state_ = 112;
}

void ProtocolWithChangesReaderBase::ReadRbRY(evo_test::RB& value) {
  if (unlikely(state_ != 112)) {
    InvalidState(112);
  }

  ReadRbRYImpl(value);
  state_ = 114;
}

void ProtocolWithChangesReaderBase::ReadRbRZ(evo_test::RB& value) {
  if (unlikely(state_ != 114)) {
    InvalidState(114);
  }

  ReadRbRZImpl(value);
  state_ = 116;
}

void ProtocolWithChangesReaderBase::ReadRcRLink(evo_test::RC& value) {
  if (unlikely(state_ != 116)) {
    InvalidState(116);
  }

  ReadRcRLinkImpl(value);
  state_ = 118;
}

void ProtocolWithChangesReaderBase::ReadRcRX(evo_test::RC& value) {
  if (unlikely(state_ != 118)) {
    InvalidState(118);
  }

  ReadRcRXImpl(value);
  state_ = 120;
}

void ProtocolWithChangesReaderBase::ReadRcRY(evo_test::RC& value) {
  if (unlikely(state_ != 120)) {
    InvalidState(120);
  }

  ReadRcRYImpl(value);
  state_ = 122;
}

void ProtocolWithChangesReaderBase::ReadRcRZ(evo_test::RC& value) {
  if (unlikely(state_ != 122)) {
    InvalidState(122);
  }

  ReadRcRZImpl(value);
  state_ = 124;
}

void ProtocolWithChangesReaderBase::ReadRlinkRNew(evo_test::RLink& value) {
  if (unlikely(state_ != 124)) {
    InvalidState(124);
  }

  ReadRlinkRNewImpl(value);
  state_ = 126;
}

void ProtocolWithChangesReaderBase::ReadRaRNew(evo_test::RA& value) {
  if (unlikely(state_ != 126)) {
    InvalidState(126);
  }

  ReadRaRNewImpl(value);
  state_ = 128;
}

void ProtocolWithChangesReaderBase::ReadRbRNew(evo_test::RB& value) {
  if (unlikely(state_ != 128)) {
    InvalidState(128);
  }

  ReadRbRNewImpl(value);
  state_ = 130;
}

void ProtocolWithChangesReaderBase::ReadRcRNew(evo_test::RC& value) {
  if (unlikely(state_ != 130)) {
    InvalidState(130);
  }

  ReadRcRNewImpl(value);
  state_ = 132;
}

void ProtocolWithChangesReaderBase::ReadRlinkRUnion(evo_test::RLink& value) {
  if (unlikely(state_ != 132)) {
    InvalidState(132);
  }

  ReadRlinkRUnionImpl(value);
  state_ = 134;
}

void ProtocolWithChangesReaderBase::ReadRaRUnion(evo_test::RA& value) {
  if (unlikely(state_ != 134)) {
    InvalidState(134);
  }

  ReadRaRUnionImpl(value);
  state_ = 136;
}

void ProtocolWithChangesReaderBase::ReadRbRUnion(evo_test::RB& value) {
  if (unlikely(state_ != 136)) {
    InvalidState(136);
  }

  ReadRbRUnionImpl(value);
  state_ = 138;
}

void ProtocolWithChangesReaderBase::ReadRcRUnion(evo_test::RC& value) {
  if (unlikely(state_ != 138)) {
    InvalidState(138);
  }

  ReadRcRUnionImpl(value);
  state_ = 140;
}

void ProtocolWithChangesReaderBase::ReadOptionalRecordWithChanges(std::optional<evo_test::RecordWithChanges>& value) {
  if (unlikely(state_ != 140)) {
    InvalidState(140);
  }

  ReadOptionalRecordWithChangesImpl(value);
  state_ = 142;
}

void ProtocolWithChangesReaderBase::ReadAliasedOptionalRecordWithChanges(std::optional<evo_test::AliasedRecordWithChanges>& value) {
  if (unlikely(state_ != 142)) {
    InvalidState(142);
  }

  ReadAliasedOptionalRecordWithChangesImpl(value);
  state_ = 144;
}

void ProtocolWithChangesReaderBase::ReadUnionRecordWithChanges(std::variant<evo_test::RecordWithChanges, int32_t>& value) {
  if (unlikely(state_ != 144)) {
    InvalidState(144);
  }

  ReadUnionRecordWithChangesImpl(value);
  state_ = 146;
}

void ProtocolWithChangesReaderBase::ReadUnionWithSameTypeset(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string>& value) {
  if (unlikely(state_ != 146)) {
    InvalidState(146);
  }

  ReadUnionWithSameTypesetImpl(value);
  state_ = 148;
}

void ProtocolWithChangesReaderBase::ReadUnionWithTypesAdded(std::variant<evo_test::RecordWithChanges, float>& value) {
  if (unlikely(state_ != 148)) {
    InvalidState(148);
  }

  ReadUnionWithTypesAddedImpl(value);
  state_ = 150;
}

void ProtocolWithChangesReaderBase::ReadUnionWithTypesRemoved(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string>& value) {
  if (unlikely(state_ != 150)) {
    InvalidState(150);
  }

  ReadUnionWithTypesRemovedImpl(value);
  state_ = 152;
}

void ProtocolWithChangesReaderBase::ReadRecordToOptional(evo_test::RecordWithChanges& value) {
  if (unlikely(state_ != 152)) {
    InvalidState(152);
  }

  ReadRecordToOptionalImpl(value);
  state_ = 154;
}

void ProtocolWithChangesReaderBase::ReadRecordToAliasedOptional(evo_test::RecordWithChanges& value) {
  if (unlikely(state_ != 154)) {
    InvalidState(154);
  }

  ReadRecordToAliasedOptionalImpl(value);
  state_ = 156;
}

void ProtocolWithChangesReaderBase::ReadRecordToUnion(evo_test::RecordWithChanges& value) {
  if (unlikely(state_ != 156)) {
    InvalidState(156);
  }

  ReadRecordToUnionImpl(value);
  state_ = 158;
}

void ProtocolWithChangesReaderBase::ReadRecordToAliasedUnion(evo_test::RecordWithChanges& value) {
  if (unlikely(state_ != 158)) {
    InvalidState(158);
  }

  ReadRecordToAliasedUnionImpl(value);
  state_ = 160;
}

void ProtocolWithChangesReaderBase::ReadUnionToAliasedUnion(std::variant<evo_test::RecordWithChanges, int32_t>& value) {
  if (unlikely(state_ != 160)) {
    InvalidState(160);
  }

  ReadUnionToAliasedUnionImpl(value);
  state_ = 162;
}

void ProtocolWithChangesReaderBase::ReadUnionToAliasedUnionWithChanges(std::variant<evo_test::RecordWithChanges, int32_t>& value) {
  if (unlikely(state_ != 162)) {
    InvalidState(162);
  }

  ReadUnionToAliasedUnionWithChangesImpl(value);
  state_ = 164;
}

void ProtocolWithChangesReaderBase::ReadOptionalToAliasedOptional(std::optional<evo_test::RecordWithChanges>& value) {
  if (unlikely(state_ != 164)) {
    InvalidState(164);
  }

  ReadOptionalToAliasedOptionalImpl(value);
  state_ = 166;
}

void ProtocolWithChangesReaderBase::ReadOptionalToAliasedOptionalWithChanges(std::optional<int32_t>& value) {
  if (unlikely(state_ != 166)) {
    InvalidState(166);
  }

  ReadOptionalToAliasedOptionalWithChangesImpl(value);
  state_ = 168;
}

void ProtocolWithChangesReaderBase::ReadGenericRecord(evo_test::GenericRecord<int32_t, std::string>& value) {
  if (unlikely(state_ != 168)) {
    InvalidState(168);
  }

  ReadGenericRecordImpl(value);
  state_ = 170;
}

void ProtocolWithChangesReaderBase::ReadGenericRecordToOpenAlias(evo_test::GenericRecord<int32_t, std::string>& value) {
  if (unlikely(state_ != 170)) {
    InvalidState(170);
  }

  ReadGenericRecordToOpenAliasImpl(value);
  state_ = 172;
}

void ProtocolWithChangesReaderBase::ReadGenericRecordToClosedAlias(evo_test::GenericRecord<int32_t, std::string>& value) {
  if (unlikely(state_ != 172)) {
    InvalidState(172);
  }

  ReadGenericRecordToClosedAliasImpl(value);
  state_ = 174;
}

void ProtocolWithChangesReaderBase::ReadGenericRecordToHalfClosedAlias(evo_test::GenericRecord<int32_t, std::string>& value) {
  if (unlikely(state_ != 174)) {
    InvalidState(174);
  }

  ReadGenericRecordToHalfClosedAliasImpl(value);
  state_ = 176;
}

void ProtocolWithChangesReaderBase::ReadAliasedGenericRecordToAlias(evo_test::AliasedHalfClosedGenericRecord<int32_t>& value) {
  if (unlikely(state_ != 176)) {
    InvalidState(176);
  }

  ReadAliasedGenericRecordToAliasImpl(value);
  state_ = 178;
}

void ProtocolWithChangesReaderBase::ReadGenericRecordToReversed(evo_test::GenericRecord<int32_t, std::string>& value) {
  if (unlikely(state_ != 178)) {
    InvalidState(178);
  }

  ReadGenericRecordToReversedImpl(value);
  state_ = 180;
}

void ProtocolWithChangesReaderBase::ReadClosedGenericRecordToUnion(evo_test::AliasedClosedGenericRecord& value) {
  if (unlikely(state_ != 180)) {
    InvalidState(180);
  }

  ReadClosedGenericRecordToUnionImpl(value);
  state_ = 182;
}

void ProtocolWithChangesReaderBase::ReadGenericRecordToAliasedUnion(evo_test::GenericRecord<int32_t, std::string>& value) {
  if (unlikely(state_ != 182)) {
    InvalidState(182);
  }

  ReadGenericRecordToAliasedUnionImpl(value);
  state_ = 184;
}

void ProtocolWithChangesReaderBase::ReadGenericUnionToReversed(evo_test::AliasedClosedGenericUnion& value) {
  if (unlikely(state_ != 184)) {
    InvalidState(184);
  }

  ReadGenericUnionToReversedImpl(value);
  state_ = 186;
}

void ProtocolWithChangesReaderBase::ReadGenericUnionOfChangedRecord(evo_test::AliasedClosedGenericUnion& value) {
  if (unlikely(state_ != 186)) {
    InvalidState(186);
  }

  ReadGenericUnionOfChangedRecordImpl(value);
  state_ = 188;
}

void ProtocolWithChangesReaderBase::ReadGenericParentRecord(evo_test::GenericParentRecord<int32_t>& value) {
  if (unlikely(state_ != 188)) {
    InvalidState(188);
  }

  ReadGenericParentRecordImpl(value);
  state_ = 190;
}

void ProtocolWithChangesReaderBase::ReadGenericNestedRecords(evo_test::GenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::ChangedGeneric<std::string, int32_t>>& value) {
  if (unlikely(state_ != 190)) {
    InvalidState(190);
  }

  ReadGenericNestedRecordsImpl(value);
  state_ = 192;
}

bool ProtocolWithChangesReaderBase::ReadGenericRecordStream(evo_test::GenericRecord<int32_t, std::string>& value) {
  if (unlikely(state_ != 192)) {
    if (state_ == 193) {
      state_ = 194;
      return false;
    }
    InvalidState(192);
  }

  bool result = ReadGenericRecordStreamImpl(value);
  if (!result) {
    state_ = 194;
  }
  return result;
}

bool ProtocolWithChangesReaderBase::ReadGenericRecordStream(std::vector<evo_test::GenericRecord<int32_t, std::string>>& values) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (unlikely(state_ != 192)) {
    if (state_ == 193) {
      state_ = 194;
      values.clear();
      return false;
    }
    InvalidState(192);
  }

  if (!ReadGenericRecordStreamImpl(values)) {
    state_ = 193;
    return values.size() > 0;
  }
  return true;
}

// fallback implementation
bool ProtocolWithChangesReaderBase::ReadGenericRecordStreamImpl(std::vector<evo_test::GenericRecord<int32_t, std::string>>& values) {
  size_t i = 0;
  while (true) {
    if (i == values.size()) {
      values.resize(i + 1);
    }
    if (!ReadGenericRecordStreamImpl(values[i])) {
      values.resize(i);
      return false;
    }
    i++;
    if (i == values.capacity()) {
      return true;
    }
  }
}

bool ProtocolWithChangesReaderBase::ReadGenericParentRecordStream(evo_test::GenericParentRecord<int32_t>& value) {
  if (unlikely(state_ != 194)) {
    if (state_ == 195) {
      state_ = 196;
      return false;
    }
    if (state_ == 193) {
      state_ = 194;
    } else {
      InvalidState(194);
    }
  }

  bool result = ReadGenericParentRecordStreamImpl(value);
  if (!result) {
    state_ = 196;
  }
  return result;
}

bool ProtocolWithChangesReaderBase::ReadGenericParentRecordStream(std::vector<evo_test::GenericParentRecord<int32_t>>& values) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (unlikely(state_ != 194)) {
    if (state_ == 195) {
      state_ = 196;
      values.clear();
      return false;
    }
    if (state_ == 193) {
      state_ = 194;
    } else {
      InvalidState(194);
    }
  }

  if (!ReadGenericParentRecordStreamImpl(values)) {
    state_ = 195;
    return values.size() > 0;
  }
  return true;
}

// fallback implementation
bool ProtocolWithChangesReaderBase::ReadGenericParentRecordStreamImpl(std::vector<evo_test::GenericParentRecord<int32_t>>& values) {
  size_t i = 0;
  while (true) {
    if (i == values.size()) {
      values.resize(i + 1);
    }
    if (!ReadGenericParentRecordStreamImpl(values[i])) {
      values.resize(i);
      return false;
    }
    i++;
    if (i == values.capacity()) {
      return true;
    }
  }
}

void ProtocolWithChangesReaderBase::ReadVectorRecordWithChanges(std::vector<evo_test::RecordWithChanges>& value) {
  if (unlikely(state_ != 196)) {
    if (state_ == 195) {
      state_ = 196;
    } else {
      InvalidState(196);
    }
  }

  ReadVectorRecordWithChangesImpl(value);
  state_ = 198;
}

bool ProtocolWithChangesReaderBase::ReadStreamedRecordWithChanges(evo_test::RecordWithChanges& value) {
  if (unlikely(state_ != 198)) {
    if (state_ == 199) {
      state_ = 200;
      return false;
    }
    InvalidState(198);
  }

  bool result = ReadStreamedRecordWithChangesImpl(value);
  if (!result) {
    state_ = 200;
  }
  return result;
}

bool ProtocolWithChangesReaderBase::ReadStreamedRecordWithChanges(std::vector<evo_test::RecordWithChanges>& values) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (unlikely(state_ != 198)) {
    if (state_ == 199) {
      state_ = 200;
      values.clear();
      return false;
    }
    InvalidState(198);
  }

  if (!ReadStreamedRecordWithChangesImpl(values)) {
    state_ = 199;
    return values.size() > 0;
  }
  return true;
}

// fallback implementation
bool ProtocolWithChangesReaderBase::ReadStreamedRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges>& values) {
  size_t i = 0;
  while (true) {
    if (i == values.size()) {
      values.resize(i + 1);
    }
    if (!ReadStreamedRecordWithChangesImpl(values[i])) {
      values.resize(i);
      return false;
    }
    i++;
    if (i == values.capacity()) {
      return true;
    }
  }
}

void ProtocolWithChangesReaderBase::Close() {
  if (unlikely(state_ != 200)) {
    if (state_ == 199) {
      state_ = 200;
    } else {
      InvalidState(200);
    }
  }

  CloseImpl();
}

void ProtocolWithChangesReaderBase::CopyTo(ProtocolWithChangesWriterBase& writer, size_t stream_int_to_string_to_float_buffer_size, size_t stream_union_reordered_buffer_size, size_t stream_of_alias_type_change_buffer_size, size_t generic_record_stream_buffer_size, size_t generic_parent_record_stream_buffer_size, size_t streamed_record_with_changes_buffer_size) {
  {
    int8_t value;
    ReadInt8ToInt(value);
    writer.WriteInt8ToInt(value);
  }
  {
    int8_t value;
    ReadInt8ToLong(value);
    writer.WriteInt8ToLong(value);
  }
  {
    int8_t value;
    ReadInt8ToUint(value);
    writer.WriteInt8ToUint(value);
  }
  {
    int8_t value;
    ReadInt8ToUlong(value);
    writer.WriteInt8ToUlong(value);
  }
  {
    int8_t value;
    ReadInt8ToFloat(value);
    writer.WriteInt8ToFloat(value);
  }
  {
    int8_t value;
    ReadInt8ToDouble(value);
    writer.WriteInt8ToDouble(value);
  }
  {
    int32_t value;
    ReadIntToUint(value);
    writer.WriteIntToUint(value);
  }
  {
    int32_t value;
    ReadIntToLong(value);
    writer.WriteIntToLong(value);
  }
  {
    int32_t value;
    ReadIntToFloat(value);
    writer.WriteIntToFloat(value);
  }
  {
    int32_t value;
    ReadIntToDouble(value);
    writer.WriteIntToDouble(value);
  }
  {
    uint32_t value;
    ReadUintToUlong(value);
    writer.WriteUintToUlong(value);
  }
  {
    uint32_t value;
    ReadUintToFloat(value);
    writer.WriteUintToFloat(value);
  }
  {
    uint32_t value;
    ReadUintToDouble(value);
    writer.WriteUintToDouble(value);
  }
  {
    float value;
    ReadFloatToDouble(value);
    writer.WriteFloatToDouble(value);
  }
  {
    std::complex<float> value;
    ReadComplexFloatToComplexDouble(value);
    writer.WriteComplexFloatToComplexDouble(value);
  }
  {
    int32_t value;
    ReadIntToString(value);
    writer.WriteIntToString(value);
  }
  {
    uint32_t value;
    ReadUintToString(value);
    writer.WriteUintToString(value);
  }
  {
    int64_t value;
    ReadLongToString(value);
    writer.WriteLongToString(value);
  }
  {
    uint64_t value;
    ReadUlongToString(value);
    writer.WriteUlongToString(value);
  }
  {
    float value;
    ReadFloatToString(value);
    writer.WriteFloatToString(value);
  }
  {
    double value;
    ReadDoubleToString(value);
    writer.WriteDoubleToString(value);
  }
  {
    int32_t value;
    ReadIntToOptional(value);
    writer.WriteIntToOptional(value);
  }
  {
    float value;
    ReadFloatToOptional(value);
    writer.WriteFloatToOptional(value);
  }
  {
    std::string value;
    ReadStringToOptional(value);
    writer.WriteStringToOptional(value);
  }
  {
    int32_t value;
    ReadIntToUnion(value);
    writer.WriteIntToUnion(value);
  }
  {
    float value;
    ReadFloatToUnion(value);
    writer.WriteFloatToUnion(value);
  }
  {
    std::string value;
    ReadStringToUnion(value);
    writer.WriteStringToUnion(value);
  }
  {
    std::optional<int32_t> value;
    ReadOptionalIntToFloat(value);
    writer.WriteOptionalIntToFloat(value);
  }
  {
    std::optional<float> value;
    ReadOptionalFloatToString(value);
    writer.WriteOptionalFloatToString(value);
  }
  {
    evo_test::AliasedLongToString value;
    ReadAliasedLongToString(value);
    writer.WriteAliasedLongToString(value);
  }
  {
    std::string value;
    ReadStringToAliasedString(value);
    writer.WriteStringToAliasedString(value);
  }
  {
    std::string value;
    ReadStringToAliasedInt(value);
    writer.WriteStringToAliasedInt(value);
  }
  {
    evo_test::GrowingEnum value;
    ReadEnumToAliasedEnum(value);
    writer.WriteEnumToAliasedEnum(value);
  }
  {
    std::optional<int32_t> value;
    ReadOptionalIntToUnion(value);
    writer.WriteOptionalIntToUnion(value);
  }
  {
    std::optional<evo_test::RecordWithChanges> value;
    ReadOptionalRecordToUnion(value);
    writer.WriteOptionalRecordToUnion(value);
  }
  {
    evo_test::RecordWithChanges value;
    ReadRecordWithChanges(value);
    writer.WriteRecordWithChanges(value);
  }
  {
    evo_test::AliasedRecordWithChanges value;
    ReadAliasedRecordWithChanges(value);
    writer.WriteAliasedRecordWithChanges(value);
  }
  {
    evo_test::RenamedRecord value;
    ReadRecordToRenamedRecord(value);
    writer.WriteRecordToRenamedRecord(value);
  }
  {
    evo_test::RecordWithChanges value;
    ReadRecordToAliasedRecord(value);
    writer.WriteRecordToAliasedRecord(value);
  }
  {
    evo_test::RecordWithChanges value;
    ReadRecordToAliasedAlias(value);
    writer.WriteRecordToAliasedAlias(value);
  }
  if (stream_int_to_string_to_float_buffer_size > 1) {
    std::vector<int32_t> values;
    values.reserve(stream_int_to_string_to_float_buffer_size);
    while(ReadStreamIntToStringToFloat(values)) {
      writer.WriteStreamIntToStringToFloat(values);
    }
    writer.EndStreamIntToStringToFloat();
  } else {
    int32_t value;
    while(ReadStreamIntToStringToFloat(value)) {
      writer.WriteStreamIntToStringToFloat(value);
    }
    writer.EndStreamIntToStringToFloat();
  }
  {
    std::vector<int32_t> value;
    ReadVectorIntToStringToFloat(value);
    writer.WriteVectorIntToStringToFloat(value);
  }
  {
    std::variant<int32_t, float> value;
    ReadIntFloatUnionReordered(value);
    writer.WriteIntFloatUnionReordered(value);
  }
  {
    std::vector<std::variant<int32_t, float>> value;
    ReadVectorUnionReordered(value);
    writer.WriteVectorUnionReordered(value);
  }
  if (stream_union_reordered_buffer_size > 1) {
    std::vector<std::variant<int32_t, std::string>> values;
    values.reserve(stream_union_reordered_buffer_size);
    while(ReadStreamUnionReordered(values)) {
      writer.WriteStreamUnionReordered(values);
    }
    writer.EndStreamUnionReordered();
  } else {
    std::variant<int32_t, std::string> value;
    while(ReadStreamUnionReordered(value)) {
      writer.WriteStreamUnionReordered(value);
    }
    writer.EndStreamUnionReordered();
  }
  if (stream_of_alias_type_change_buffer_size > 1) {
    std::vector<evo_test::StreamItem> values;
    values.reserve(stream_of_alias_type_change_buffer_size);
    while(ReadStreamOfAliasTypeChange(values)) {
      writer.WriteStreamOfAliasTypeChange(values);
    }
    writer.EndStreamOfAliasTypeChange();
  } else {
    evo_test::StreamItem value;
    while(ReadStreamOfAliasTypeChange(value)) {
      writer.WriteStreamOfAliasTypeChange(value);
    }
    writer.EndStreamOfAliasTypeChange();
  }
  {
    evo_test::RLink value;
    ReadRlink(value);
    writer.WriteRlink(value);
  }
  {
    evo_test::RLink value;
    ReadRlinkRX(value);
    writer.WriteRlinkRX(value);
  }
  {
    evo_test::RLink value;
    ReadRlinkRY(value);
    writer.WriteRlinkRY(value);
  }
  {
    evo_test::RLink value;
    ReadRlinkRZ(value);
    writer.WriteRlinkRZ(value);
  }
  {
    evo_test::RA value;
    ReadRaRLink(value);
    writer.WriteRaRLink(value);
  }
  {
    evo_test::RA value;
    ReadRaRX(value);
    writer.WriteRaRX(value);
  }
  {
    evo_test::RA value;
    ReadRaRY(value);
    writer.WriteRaRY(value);
  }
  {
    evo_test::RA value;
    ReadRaRZ(value);
    writer.WriteRaRZ(value);
  }
  {
    evo_test::RB value;
    ReadRbRLink(value);
    writer.WriteRbRLink(value);
  }
  {
    evo_test::RB value;
    ReadRbRX(value);
    writer.WriteRbRX(value);
  }
  {
    evo_test::RB value;
    ReadRbRY(value);
    writer.WriteRbRY(value);
  }
  {
    evo_test::RB value;
    ReadRbRZ(value);
    writer.WriteRbRZ(value);
  }
  {
    evo_test::RC value;
    ReadRcRLink(value);
    writer.WriteRcRLink(value);
  }
  {
    evo_test::RC value;
    ReadRcRX(value);
    writer.WriteRcRX(value);
  }
  {
    evo_test::RC value;
    ReadRcRY(value);
    writer.WriteRcRY(value);
  }
  {
    evo_test::RC value;
    ReadRcRZ(value);
    writer.WriteRcRZ(value);
  }
  {
    evo_test::RLink value;
    ReadRlinkRNew(value);
    writer.WriteRlinkRNew(value);
  }
  {
    evo_test::RA value;
    ReadRaRNew(value);
    writer.WriteRaRNew(value);
  }
  {
    evo_test::RB value;
    ReadRbRNew(value);
    writer.WriteRbRNew(value);
  }
  {
    evo_test::RC value;
    ReadRcRNew(value);
    writer.WriteRcRNew(value);
  }
  {
    evo_test::RLink value;
    ReadRlinkRUnion(value);
    writer.WriteRlinkRUnion(value);
  }
  {
    evo_test::RA value;
    ReadRaRUnion(value);
    writer.WriteRaRUnion(value);
  }
  {
    evo_test::RB value;
    ReadRbRUnion(value);
    writer.WriteRbRUnion(value);
  }
  {
    evo_test::RC value;
    ReadRcRUnion(value);
    writer.WriteRcRUnion(value);
  }
  {
    std::optional<evo_test::RecordWithChanges> value;
    ReadOptionalRecordWithChanges(value);
    writer.WriteOptionalRecordWithChanges(value);
  }
  {
    std::optional<evo_test::AliasedRecordWithChanges> value;
    ReadAliasedOptionalRecordWithChanges(value);
    writer.WriteAliasedOptionalRecordWithChanges(value);
  }
  {
    std::variant<evo_test::RecordWithChanges, int32_t> value;
    ReadUnionRecordWithChanges(value);
    writer.WriteUnionRecordWithChanges(value);
  }
  {
    std::variant<evo_test::RecordWithChanges, int32_t, float, std::string> value;
    ReadUnionWithSameTypeset(value);
    writer.WriteUnionWithSameTypeset(value);
  }
  {
    std::variant<evo_test::RecordWithChanges, float> value;
    ReadUnionWithTypesAdded(value);
    writer.WriteUnionWithTypesAdded(value);
  }
  {
    std::variant<evo_test::RecordWithChanges, int32_t, float, std::string> value;
    ReadUnionWithTypesRemoved(value);
    writer.WriteUnionWithTypesRemoved(value);
  }
  {
    evo_test::RecordWithChanges value;
    ReadRecordToOptional(value);
    writer.WriteRecordToOptional(value);
  }
  {
    evo_test::RecordWithChanges value;
    ReadRecordToAliasedOptional(value);
    writer.WriteRecordToAliasedOptional(value);
  }
  {
    evo_test::RecordWithChanges value;
    ReadRecordToUnion(value);
    writer.WriteRecordToUnion(value);
  }
  {
    evo_test::RecordWithChanges value;
    ReadRecordToAliasedUnion(value);
    writer.WriteRecordToAliasedUnion(value);
  }
  {
    std::variant<evo_test::RecordWithChanges, int32_t> value;
    ReadUnionToAliasedUnion(value);
    writer.WriteUnionToAliasedUnion(value);
  }
  {
    std::variant<evo_test::RecordWithChanges, int32_t> value;
    ReadUnionToAliasedUnionWithChanges(value);
    writer.WriteUnionToAliasedUnionWithChanges(value);
  }
  {
    std::optional<evo_test::RecordWithChanges> value;
    ReadOptionalToAliasedOptional(value);
    writer.WriteOptionalToAliasedOptional(value);
  }
  {
    std::optional<int32_t> value;
    ReadOptionalToAliasedOptionalWithChanges(value);
    writer.WriteOptionalToAliasedOptionalWithChanges(value);
  }
  {
    evo_test::GenericRecord<int32_t, std::string> value;
    ReadGenericRecord(value);
    writer.WriteGenericRecord(value);
  }
  {
    evo_test::GenericRecord<int32_t, std::string> value;
    ReadGenericRecordToOpenAlias(value);
    writer.WriteGenericRecordToOpenAlias(value);
  }
  {
    evo_test::GenericRecord<int32_t, std::string> value;
    ReadGenericRecordToClosedAlias(value);
    writer.WriteGenericRecordToClosedAlias(value);
  }
  {
    evo_test::GenericRecord<int32_t, std::string> value;
    ReadGenericRecordToHalfClosedAlias(value);
    writer.WriteGenericRecordToHalfClosedAlias(value);
  }
  {
    evo_test::AliasedHalfClosedGenericRecord<int32_t> value;
    ReadAliasedGenericRecordToAlias(value);
    writer.WriteAliasedGenericRecordToAlias(value);
  }
  {
    evo_test::GenericRecord<int32_t, std::string> value;
    ReadGenericRecordToReversed(value);
    writer.WriteGenericRecordToReversed(value);
  }
  {
    evo_test::AliasedClosedGenericRecord value;
    ReadClosedGenericRecordToUnion(value);
    writer.WriteClosedGenericRecordToUnion(value);
  }
  {
    evo_test::GenericRecord<int32_t, std::string> value;
    ReadGenericRecordToAliasedUnion(value);
    writer.WriteGenericRecordToAliasedUnion(value);
  }
  {
    evo_test::AliasedClosedGenericUnion value;
    ReadGenericUnionToReversed(value);
    writer.WriteGenericUnionToReversed(value);
  }
  {
    evo_test::AliasedClosedGenericUnion value;
    ReadGenericUnionOfChangedRecord(value);
    writer.WriteGenericUnionOfChangedRecord(value);
  }
  {
    evo_test::GenericParentRecord<int32_t> value;
    ReadGenericParentRecord(value);
    writer.WriteGenericParentRecord(value);
  }
  {
    evo_test::GenericRecord<evo_test::UnchangedGeneric<int32_t>, evo_test::ChangedGeneric<std::string, int32_t>> value;
    ReadGenericNestedRecords(value);
    writer.WriteGenericNestedRecords(value);
  }
  if (generic_record_stream_buffer_size > 1) {
    std::vector<evo_test::GenericRecord<int32_t, std::string>> values;
    values.reserve(generic_record_stream_buffer_size);
    while(ReadGenericRecordStream(values)) {
      writer.WriteGenericRecordStream(values);
    }
    writer.EndGenericRecordStream();
  } else {
    evo_test::GenericRecord<int32_t, std::string> value;
    while(ReadGenericRecordStream(value)) {
      writer.WriteGenericRecordStream(value);
    }
    writer.EndGenericRecordStream();
  }
  if (generic_parent_record_stream_buffer_size > 1) {
    std::vector<evo_test::GenericParentRecord<int32_t>> values;
    values.reserve(generic_parent_record_stream_buffer_size);
    while(ReadGenericParentRecordStream(values)) {
      writer.WriteGenericParentRecordStream(values);
    }
    writer.EndGenericParentRecordStream();
  } else {
    evo_test::GenericParentRecord<int32_t> value;
    while(ReadGenericParentRecordStream(value)) {
      writer.WriteGenericParentRecordStream(value);
    }
    writer.EndGenericParentRecordStream();
  }
  {
    std::vector<evo_test::RecordWithChanges> value;
    ReadVectorRecordWithChanges(value);
    writer.WriteVectorRecordWithChanges(value);
  }
  if (streamed_record_with_changes_buffer_size > 1) {
    std::vector<evo_test::RecordWithChanges> values;
    values.reserve(streamed_record_with_changes_buffer_size);
    while(ReadStreamedRecordWithChanges(values)) {
      writer.WriteStreamedRecordWithChanges(values);
    }
    writer.EndStreamedRecordWithChanges();
  } else {
    evo_test::RecordWithChanges value;
    while(ReadStreamedRecordWithChanges(value)) {
      writer.WriteStreamedRecordWithChanges(value);
    }
    writer.EndStreamedRecordWithChanges();
  }
}

void ProtocolWithChangesReaderBase::InvalidState(uint8_t attempted) {
  auto f = [](uint8_t i) -> std::string {
    switch (i/2) {
    case 0: return "ReadInt8ToInt()";
    case 1: return "ReadInt8ToLong()";
    case 2: return "ReadInt8ToUint()";
    case 3: return "ReadInt8ToUlong()";
    case 4: return "ReadInt8ToFloat()";
    case 5: return "ReadInt8ToDouble()";
    case 6: return "ReadIntToUint()";
    case 7: return "ReadIntToLong()";
    case 8: return "ReadIntToFloat()";
    case 9: return "ReadIntToDouble()";
    case 10: return "ReadUintToUlong()";
    case 11: return "ReadUintToFloat()";
    case 12: return "ReadUintToDouble()";
    case 13: return "ReadFloatToDouble()";
    case 14: return "ReadComplexFloatToComplexDouble()";
    case 15: return "ReadIntToString()";
    case 16: return "ReadUintToString()";
    case 17: return "ReadLongToString()";
    case 18: return "ReadUlongToString()";
    case 19: return "ReadFloatToString()";
    case 20: return "ReadDoubleToString()";
    case 21: return "ReadIntToOptional()";
    case 22: return "ReadFloatToOptional()";
    case 23: return "ReadStringToOptional()";
    case 24: return "ReadIntToUnion()";
    case 25: return "ReadFloatToUnion()";
    case 26: return "ReadStringToUnion()";
    case 27: return "ReadOptionalIntToFloat()";
    case 28: return "ReadOptionalFloatToString()";
    case 29: return "ReadAliasedLongToString()";
    case 30: return "ReadStringToAliasedString()";
    case 31: return "ReadStringToAliasedInt()";
    case 32: return "ReadEnumToAliasedEnum()";
    case 33: return "ReadOptionalIntToUnion()";
    case 34: return "ReadOptionalRecordToUnion()";
    case 35: return "ReadRecordWithChanges()";
    case 36: return "ReadAliasedRecordWithChanges()";
    case 37: return "ReadRecordToRenamedRecord()";
    case 38: return "ReadRecordToAliasedRecord()";
    case 39: return "ReadRecordToAliasedAlias()";
    case 40: return "ReadStreamIntToStringToFloat()";
    case 41: return "ReadVectorIntToStringToFloat()";
    case 42: return "ReadIntFloatUnionReordered()";
    case 43: return "ReadVectorUnionReordered()";
    case 44: return "ReadStreamUnionReordered()";
    case 45: return "ReadStreamOfAliasTypeChange()";
    case 46: return "ReadRlink()";
    case 47: return "ReadRlinkRX()";
    case 48: return "ReadRlinkRY()";
    case 49: return "ReadRlinkRZ()";
    case 50: return "ReadRaRLink()";
    case 51: return "ReadRaRX()";
    case 52: return "ReadRaRY()";
    case 53: return "ReadRaRZ()";
    case 54: return "ReadRbRLink()";
    case 55: return "ReadRbRX()";
    case 56: return "ReadRbRY()";
    case 57: return "ReadRbRZ()";
    case 58: return "ReadRcRLink()";
    case 59: return "ReadRcRX()";
    case 60: return "ReadRcRY()";
    case 61: return "ReadRcRZ()";
    case 62: return "ReadRlinkRNew()";
    case 63: return "ReadRaRNew()";
    case 64: return "ReadRbRNew()";
    case 65: return "ReadRcRNew()";
    case 66: return "ReadRlinkRUnion()";
    case 67: return "ReadRaRUnion()";
    case 68: return "ReadRbRUnion()";
    case 69: return "ReadRcRUnion()";
    case 70: return "ReadOptionalRecordWithChanges()";
    case 71: return "ReadAliasedOptionalRecordWithChanges()";
    case 72: return "ReadUnionRecordWithChanges()";
    case 73: return "ReadUnionWithSameTypeset()";
    case 74: return "ReadUnionWithTypesAdded()";
    case 75: return "ReadUnionWithTypesRemoved()";
    case 76: return "ReadRecordToOptional()";
    case 77: return "ReadRecordToAliasedOptional()";
    case 78: return "ReadRecordToUnion()";
    case 79: return "ReadRecordToAliasedUnion()";
    case 80: return "ReadUnionToAliasedUnion()";
    case 81: return "ReadUnionToAliasedUnionWithChanges()";
    case 82: return "ReadOptionalToAliasedOptional()";
    case 83: return "ReadOptionalToAliasedOptionalWithChanges()";
    case 84: return "ReadGenericRecord()";
    case 85: return "ReadGenericRecordToOpenAlias()";
    case 86: return "ReadGenericRecordToClosedAlias()";
    case 87: return "ReadGenericRecordToHalfClosedAlias()";
    case 88: return "ReadAliasedGenericRecordToAlias()";
    case 89: return "ReadGenericRecordToReversed()";
    case 90: return "ReadClosedGenericRecordToUnion()";
    case 91: return "ReadGenericRecordToAliasedUnion()";
    case 92: return "ReadGenericUnionToReversed()";
    case 93: return "ReadGenericUnionOfChangedRecord()";
    case 94: return "ReadGenericParentRecord()";
    case 95: return "ReadGenericNestedRecords()";
    case 96: return "ReadGenericRecordStream()";
    case 97: return "ReadGenericParentRecordStream()";
    case 98: return "ReadVectorRecordWithChanges()";
    case 99: return "ReadStreamedRecordWithChanges()";
    case 100: return "Close()";
    default: return "<unknown>";
    }
  };
  throw std::runtime_error("Expected call to " + f(state_) + " but received call to " + f(attempted) + " instead.");
}

bool ProtocolWithChangesIndexedReaderBase::ReadStreamIntToStringToFloat(int32_t& value, size_t idx) {
  return ReadStreamIntToStringToFloatImpl(value, idx);
}

bool ProtocolWithChangesIndexedReaderBase::ReadStreamIntToStringToFloat(std::vector<int32_t>& values, size_t idx) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (!ReadStreamIntToStringToFloatImpl(values, idx)) {
    return values.size() > 0;
  }
  return true;
}

size_t ProtocolWithChangesIndexedReaderBase::CountStreamIntToStringToFloat() {
  return CountStreamIntToStringToFloatImpl();
}

bool ProtocolWithChangesIndexedReaderBase::ReadStreamUnionReordered(std::variant<int32_t, std::string>& value, size_t idx) {
  return ReadStreamUnionReorderedImpl(value, idx);
}

bool ProtocolWithChangesIndexedReaderBase::ReadStreamUnionReordered(std::vector<std::variant<int32_t, std::string>>& values, size_t idx) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (!ReadStreamUnionReorderedImpl(values, idx)) {
    return values.size() > 0;
  }
  return true;
}

size_t ProtocolWithChangesIndexedReaderBase::CountStreamUnionReordered() {
  return CountStreamUnionReorderedImpl();
}

bool ProtocolWithChangesIndexedReaderBase::ReadStreamOfAliasTypeChange(evo_test::StreamItem& value, size_t idx) {
  return ReadStreamOfAliasTypeChangeImpl(value, idx);
}

bool ProtocolWithChangesIndexedReaderBase::ReadStreamOfAliasTypeChange(std::vector<evo_test::StreamItem>& values, size_t idx) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (!ReadStreamOfAliasTypeChangeImpl(values, idx)) {
    return values.size() > 0;
  }
  return true;
}

size_t ProtocolWithChangesIndexedReaderBase::CountStreamOfAliasTypeChange() {
  return CountStreamOfAliasTypeChangeImpl();
}

bool ProtocolWithChangesIndexedReaderBase::ReadGenericRecordStream(evo_test::GenericRecord<int32_t, std::string>& value, size_t idx) {
  return ReadGenericRecordStreamImpl(value, idx);
}

bool ProtocolWithChangesIndexedReaderBase::ReadGenericRecordStream(std::vector<evo_test::GenericRecord<int32_t, std::string>>& values, size_t idx) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (!ReadGenericRecordStreamImpl(values, idx)) {
    return values.size() > 0;
  }
  return true;
}

size_t ProtocolWithChangesIndexedReaderBase::CountGenericRecordStream() {
  return CountGenericRecordStreamImpl();
}

bool ProtocolWithChangesIndexedReaderBase::ReadGenericParentRecordStream(evo_test::GenericParentRecord<int32_t>& value, size_t idx) {
  return ReadGenericParentRecordStreamImpl(value, idx);
}

bool ProtocolWithChangesIndexedReaderBase::ReadGenericParentRecordStream(std::vector<evo_test::GenericParentRecord<int32_t>>& values, size_t idx) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (!ReadGenericParentRecordStreamImpl(values, idx)) {
    return values.size() > 0;
  }
  return true;
}

size_t ProtocolWithChangesIndexedReaderBase::CountGenericParentRecordStream() {
  return CountGenericParentRecordStreamImpl();
}

bool ProtocolWithChangesIndexedReaderBase::ReadStreamedRecordWithChanges(evo_test::RecordWithChanges& value, size_t idx) {
  return ReadStreamedRecordWithChangesImpl(value, idx);
}

bool ProtocolWithChangesIndexedReaderBase::ReadStreamedRecordWithChanges(std::vector<evo_test::RecordWithChanges>& values, size_t idx) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (!ReadStreamedRecordWithChangesImpl(values, idx)) {
    return values.size() > 0;
  }
  return true;
}

size_t ProtocolWithChangesIndexedReaderBase::CountStreamedRecordWithChanges() {
  return CountStreamedRecordWithChangesImpl();
}

void ProtocolWithChangesIndexedReaderBase::InvalidState(uint8_t attempted) {
  (void)(attempted);
  return;
}


std::string UnusedProtocolWriterBase::schema_ = R"({"protocol":{"name":"UnusedProtocol","sequence":[{"name":"records","type":{"stream":{"items":"EvoTest.UnchangedRecord"}}}]},"types":[{"name":"UnchangedRecord","fields":[{"name":"name","type":"string"},{"name":"age","type":"int32"},{"name":"meta","type":{"map":{"keys":"string","values":"float64"}}}]}]})";

std::vector<std::string> UnusedProtocolWriterBase::previous_schemas_ = {
};

std::string UnusedProtocolWriterBase::SchemaFromVersion(Version version) {
  switch (version) {
  case Version::Current: return UnusedProtocolWriterBase::schema_; break;
  default: throw std::runtime_error("The version does not correspond to any schema supported by protocol UnusedProtocol.");
  }

}

void UnusedProtocolWriterBase::WriteRecords(evo_test::UnchangedRecord const& value) {
  if (unlikely(state_ != 0)) {
    InvalidState(0, false);
  }

  WriteRecordsImpl(value);
}

void UnusedProtocolWriterBase::WriteRecords(std::vector<evo_test::UnchangedRecord> const& values) {
  if (unlikely(state_ != 0)) {
    InvalidState(0, false);
  }

  WriteRecordsImpl(values);
}

void UnusedProtocolWriterBase::EndRecords() {
  if (unlikely(state_ != 0)) {
    InvalidState(0, true);
  }

  EndRecordsImpl();
  state_ = 1;
}

// fallback implementation
void UnusedProtocolWriterBase::WriteRecordsImpl(std::vector<evo_test::UnchangedRecord> const& values) {
  for (auto const& v : values) {
    WriteRecordsImpl(v);
  }
}

void UnusedProtocolWriterBase::Close() {
  if (unlikely(state_ != 1)) {
    InvalidState(1, false);
  }

  CloseImpl();
}

void UnusedProtocolWriterBase::InvalidState(uint8_t attempted, [[maybe_unused]] bool end) {
  std::string expected_method;
  switch (state_) {
  case 0: expected_method = "WriteRecords() or EndRecords()"; break;
  }
  std::string attempted_method;
  switch (attempted) {
  case 0: attempted_method = end ? "EndRecords()" : "WriteRecords()"; break;
  case 1: attempted_method = "Close()"; break;
  }
  throw std::runtime_error("Expected call to " + expected_method + " but received call to " + attempted_method + " instead.");
}

std::string UnusedProtocolReaderBase::schema_ = UnusedProtocolWriterBase::schema_;

std::vector<std::string> UnusedProtocolReaderBase::previous_schemas_ = UnusedProtocolWriterBase::previous_schemas_;

Version UnusedProtocolReaderBase::VersionFromSchema(std::string const& schema) {
  if (schema == UnusedProtocolWriterBase::schema_) {
    return Version::Current;
  }
  throw std::runtime_error("The schema does not match any version supported by protocol UnusedProtocol.");
}

bool UnusedProtocolReaderBase::ReadRecords(evo_test::UnchangedRecord& value) {
  if (unlikely(state_ != 0)) {
    if (state_ == 1) {
      state_ = 2;
      return false;
    }
    InvalidState(0);
  }

  bool result = ReadRecordsImpl(value);
  if (!result) {
    state_ = 2;
  }
  return result;
}

bool UnusedProtocolReaderBase::ReadRecords(std::vector<evo_test::UnchangedRecord>& values) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (unlikely(state_ != 0)) {
    if (state_ == 1) {
      state_ = 2;
      values.clear();
      return false;
    }
    InvalidState(0);
  }

  if (!ReadRecordsImpl(values)) {
    state_ = 1;
    return values.size() > 0;
  }
  return true;
}

// fallback implementation
bool UnusedProtocolReaderBase::ReadRecordsImpl(std::vector<evo_test::UnchangedRecord>& values) {
  size_t i = 0;
  while (true) {
    if (i == values.size()) {
      values.resize(i + 1);
    }
    if (!ReadRecordsImpl(values[i])) {
      values.resize(i);
      return false;
    }
    i++;
    if (i == values.capacity()) {
      return true;
    }
  }
}

void UnusedProtocolReaderBase::Close() {
  if (unlikely(state_ != 2)) {
    if (state_ == 1) {
      state_ = 2;
    } else {
      InvalidState(2);
    }
  }

  CloseImpl();
}

void UnusedProtocolReaderBase::CopyTo(UnusedProtocolWriterBase& writer, size_t records_buffer_size) {
  if (records_buffer_size > 1) {
    std::vector<evo_test::UnchangedRecord> values;
    values.reserve(records_buffer_size);
    while(ReadRecords(values)) {
      writer.WriteRecords(values);
    }
    writer.EndRecords();
  } else {
    evo_test::UnchangedRecord value;
    while(ReadRecords(value)) {
      writer.WriteRecords(value);
    }
    writer.EndRecords();
  }
}

void UnusedProtocolReaderBase::InvalidState(uint8_t attempted) {
  auto f = [](uint8_t i) -> std::string {
    switch (i/2) {
    case 0: return "ReadRecords()";
    case 1: return "Close()";
    default: return "<unknown>";
    }
  };
  throw std::runtime_error("Expected call to " + f(state_) + " but received call to " + f(attempted) + " instead.");
}

bool UnusedProtocolIndexedReaderBase::ReadRecords(evo_test::UnchangedRecord& value, size_t idx) {
  return ReadRecordsImpl(value, idx);
}

bool UnusedProtocolIndexedReaderBase::ReadRecords(std::vector<evo_test::UnchangedRecord>& values, size_t idx) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (!ReadRecordsImpl(values, idx)) {
    return values.size() > 0;
  }
  return true;
}

size_t UnusedProtocolIndexedReaderBase::CountRecords() {
  return CountRecordsImpl();
}

void UnusedProtocolIndexedReaderBase::InvalidState(uint8_t attempted) {
  (void)(attempted);
  return;
}

} // namespace evo_test

# This file was generated by the "yardl" tool. DO NOT EDIT.

# pyright: reportUnusedClass=false

import collections.abc
import datetime
import io
import typing

import numpy as np
import numpy.typing as npt

from .types import *

from .. import _binary
from .. import yardl_types as yardl

class TupleSerializer(typing.Generic[T1, T1_NP, T2, T2_NP], _binary.RecordSerializer[Tuple[T1, T2]]):
    def __init__(self, t1_serializer: _binary.TypeSerializer[T1, T1_NP], t2_serializer: _binary.TypeSerializer[T2, T2_NP]) -> None:
        super().__init__([("v1", t1_serializer), ("v2", t2_serializer)])

    def write(self, stream: _binary.CodedOutputStream, value: Tuple[T1, T2]) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.v1, value.v2)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['v1'], value['v2'])

    def read(self, stream: _binary.CodedInputStream) -> Tuple[T1, T2]:
        field_values = self._read(stream)
        return Tuple[T1, T2](v1=field_values[0], v2=field_values[1])



% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef MockStreamsWriter < matlab.mixin.Copyable & test_model.StreamsWriterBase
  properties
    testCase_
    expected_int_data
    expected_optional_int_data
    expected_record_with_optional_vector_data
    expected_fixed_vector
  end

  methods
    function obj = MockStreamsWriter(testCase)
      obj.testCase_ = testCase;
      obj.expected_int_data = {};
      obj.expected_optional_int_data = {};
      obj.expected_record_with_optional_vector_data = {};
      obj.expected_fixed_vector = {};
    end

    function expect_write_int_data_(obj, value)
      if iscell(value)
        for n = 1:numel(value)
          obj.expected_int_data{end+1} = value{n};
        end
        return;
      end
      shape = size(value);
      lastDim = ndims(value);
      count = shape(lastDim);
      index = repelem({':'}, lastDim-1);
      for n = 1:count
        obj.expected_int_data{end+1} = value(index{:}, n);
      end
    end

    function expect_write_optional_int_data_(obj, value)
      if iscell(value)
        for n = 1:numel(value)
          obj.expected_optional_int_data{end+1} = value{n};
        end
        return;
      end
      shape = size(value);
      lastDim = ndims(value);
      count = shape(lastDim);
      index = repelem({':'}, lastDim-1);
      for n = 1:count
        obj.expected_optional_int_data{end+1} = value(index{:}, n);
      end
    end

    function expect_write_record_with_optional_vector_data_(obj, value)
      if iscell(value)
        for n = 1:numel(value)
          obj.expected_record_with_optional_vector_data{end+1} = value{n};
        end
        return;
      end
      shape = size(value);
      lastDim = ndims(value);
      count = shape(lastDim);
      index = repelem({':'}, lastDim-1);
      for n = 1:count
        obj.expected_record_with_optional_vector_data{end+1} = value(index{:}, n);
      end
    end

    function expect_write_fixed_vector_(obj, value)
      if iscell(value)
        for n = 1:numel(value)
          obj.expected_fixed_vector{end+1} = value{n};
        end
        return;
      end
      shape = size(value);
      lastDim = ndims(value);
      count = shape(lastDim);
      index = repelem({':'}, lastDim-1);
      for n = 1:count
        obj.expected_fixed_vector{end+1} = value(index{:}, n);
      end
    end

    function verify(obj)
      obj.testCase_.verifyTrue(isempty(obj.expected_int_data), "Expected call to write_int_data_ was not received");
      obj.testCase_.verifyTrue(isempty(obj.expected_optional_int_data), "Expected call to write_optional_int_data_ was not received");
      obj.testCase_.verifyTrue(isempty(obj.expected_record_with_optional_vector_data), "Expected call to write_record_with_optional_vector_data_ was not received");
      obj.testCase_.verifyTrue(isempty(obj.expected_fixed_vector), "Expected call to write_fixed_vector_ was not received");
    end
  end

  methods (Access=protected)
    function write_int_data_(obj, value)
      assert(iscell(value));
      assert(isscalar(value));
      obj.testCase_.verifyFalse(isempty(obj.expected_int_data), "Unexpected call to write_int_data_");
      obj.testCase_.verifyEqual(value{1}, obj.expected_int_data{1}, "Unexpected argument value for call to write_int_data_");
      obj.expected_int_data = obj.expected_int_data(2:end);
    end

    function write_optional_int_data_(obj, value)
      assert(iscell(value));
      assert(isscalar(value));
      obj.testCase_.verifyFalse(isempty(obj.expected_optional_int_data), "Unexpected call to write_optional_int_data_");
      obj.testCase_.verifyEqual(value{1}, obj.expected_optional_int_data{1}, "Unexpected argument value for call to write_optional_int_data_");
      obj.expected_optional_int_data = obj.expected_optional_int_data(2:end);
    end

    function write_record_with_optional_vector_data_(obj, value)
      assert(iscell(value));
      assert(isscalar(value));
      obj.testCase_.verifyFalse(isempty(obj.expected_record_with_optional_vector_data), "Unexpected call to write_record_with_optional_vector_data_");
      obj.testCase_.verifyEqual(value{1}, obj.expected_record_with_optional_vector_data{1}, "Unexpected argument value for call to write_record_with_optional_vector_data_");
      obj.expected_record_with_optional_vector_data = obj.expected_record_with_optional_vector_data(2:end);
    end

    function write_fixed_vector_(obj, value)
      assert(iscell(value));
      assert(isscalar(value));
      obj.testCase_.verifyFalse(isempty(obj.expected_fixed_vector), "Unexpected call to write_fixed_vector_");
      obj.testCase_.verifyEqual(value{1}, obj.expected_fixed_vector{1}, "Unexpected argument value for call to write_fixed_vector_");
      obj.expected_fixed_vector = obj.expected_fixed_vector(2:end);
    end

    function close_(obj)
    end
    function end_stream_(obj)
    end
  end
end

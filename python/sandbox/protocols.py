# This file was generated by the "yardl" tool. DO NOT EDIT.


import abc
import collections.abc
import datetime
import numpy as np

class P1WriterBase(abc.ABC):
    """Abstract writer for the P1 protocol."""

    def write_an_int(self, value: int) -> None:
        """Ordinal 0"""
        self._write_an_int(value)

    def write_a_stream(self, value: collections.abc.Iterable[int]) -> None:
        """Ordinal 1"""
        self._write_a_stream(value)

    @abc.abstractmethod
    def _write_an_int(self, value: int) -> None:
        raise NotImplementedError()

    @abc.abstractmethod
    def _write_a_stream(self, value: collections.abc.Iterable[int]) -> None:
        raise NotImplementedError()

class P1ReaderBase(abc.ABC):
    """Abstract reader for the P1 protocol."""

    def read_an_int(self) -> int:
        """Ordinal 0"""
        return self._read_an_int()

    def read_a_stream(self) -> collections.abc.Iterable[int]:
        """Ordinal 1"""
        return self._read_a_stream()

    @abc.abstractmethod
    def _read_an_int(self) -> int:
        raise NotImplementedError()

    @abc.abstractmethod
    def _read_a_stream(self) -> collections.abc.Iterable[int]:
        raise NotImplementedError()


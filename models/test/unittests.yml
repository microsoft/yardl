SimpleRecord: !record
  fields:
    x: int
    y: int
    z: int

RecordWithPrimitives: !record
  fields:
    boolField: bool
    int8Field: int8
    uint8Field: uint8
    int16Field: int16
    uint16Field: uint16
    int32Field: int32
    uint32Field: uint32
    int64Field: int64
    uint64Field: uint64
    sizeField: size
    float32Field: float32
    float64Field: float64
    complexfloat32Field: complexfloat32
    complexfloat64Field: complexfloat64
    dateField: date
    timeField: time
    datetimeField: datetime

RecordWithPrimitiveAliases: !record
  fields:
    byteField: byte
    intField: int
    uintField: uint
    longField: long
    ulongField: ulong
    floatField: float
    doubleField: double
    complexfloatField: complexfloat
    complexdoubleField: complexfloat64

TupleWithRecords: !record
  fields:
    a: SimpleRecord
    b: SimpleRecord

RecordWithVectors: !record
  fields:
    defaultVector: int*
    defaultVectorFixedLength: int*3
    vectorOfVectors: int*2*

RecordWithVectorOfTimes: !record
  fields:
    times: time*

RecordWithArrays: !record
  fields:
    defaultArray: !array
      items: int
    defaultArrayWithEmptyDimension: !array
      items: int
      dimensions:
    rank1Array: !array
      items: int
      dimensions: 1
    rank2Array: !array
      items: int
      dimensions: 2
    rank2ArrayWithNamedDimensions: !array
      items: int
      dimensions:
        a:
        b:
    rank2FixedArray: !array
      items: int
      dimensions: [3, 4]
    rank2FixedArrayWithNamedDimensions: !array
      items: int
      dimensions:
        a: 3
        b: 4
    dynamicArray: !array
      items: int
    arrayOfVectors: !array
      items: !vector
        items: int
        length: 4
      dimensions: [5]

RecordWithArraysSimpleSyntax: !record
  fields:
    defaultArray: int[]
    defaultArrayWithEmptyDimension: int[]
    rank1Array: int[()]
    rank2Array: int[,]
    rank2ArrayWithNamedDimensions: int[a,b]
    rank2FixedArray: int[3,4]
    rank2FixedArrayWithNamedDimensions: int[a:3,b:4]
    dynamicArray: int[]
    arrayOfVectors: int*4[5]

Scalars: !protocol
  sequence:
    int32: int32
    record: RecordWithPrimitives

RecordWithOptionalFields: !record
  fields:
    optionalInt: [null, int]
    optionalIntAlternateSyntax: int?
    optionalTime: time?

ScalarOptionals: !protocol
  sequence:
    optionalInt: int?
    optionalRecord: SimpleRecord?
    recordWithOptionalFields: RecordWithOptionalFields
    optionalRecordWithOptionalFields: RecordWithOptionalFields?

NestedRecords: !protocol
  sequence:
    tupleWithRecords: TupleWithRecords

RecordWithVlens: !record
  fields:
    a: !vector
      items: SimpleRecord
    b: int
    c: int

Vlens: !protocol
  sequence:
    intVector: int*
    complexVector: complexfloat32*
    recordWithVlens: RecordWithVlens
    vlenOfRecordWithVlens: RecordWithVlens*

RecordWithStrings: !record
  fields:
    a: string
    b: string

Strings: !protocol
  sequence:
    singleString: string
    recWithString: RecordWithStrings

RecordWithOptionalVector: !record
  fields:
    optionalVector:
      - null
      - !vector
        items: int

OptionalVectors: !protocol
  sequence:
    recordWithOptionalVector: RecordWithOptionalVector

RecordWithFixedVectors: !record
  fields:
    fixedIntVector: int*5
    fixedSimpleRecordVector: !vector
      length: 3
      items: SimpleRecord
    fixedRecordWithVlensVector: !vector
      length: 2
      items: RecordWithVlens

FixedVectors: !protocol
  sequence:
    fixedIntVector: int*5
    fixedSimpleRecordVector: SimpleRecord*3
    fixedRecordWithVlensVector: RecordWithVlens*2
    recordWithFixedVectors: RecordWithFixedVectors

Streams: !protocol
  sequence:
    intData: !stream
      items: int
    optionalIntData: !stream
      items: int?
    recordWithOptionalVectorData: !stream
      items: RecordWithOptionalVector
    fixedVector: !stream
      items: int*3

RecordWithFixedArrays: !record
  fields:
    ints: int[2, 3]
    fixedSimpleRecordArray: SimpleRecord[3, 2]
    fixedRecordWithVlensArray: RecordWithVlens[2, 2]

IntArray: int[]
IntRank2Array: int[,]
IntFixedArray: int[2, 3]
SimpleRecordFixedArray: SimpleRecord[3, 2]
RecordWithVlensFixedArray: RecordWithVlens[2, 2]

RecordWithNamedFixedArrays: !record
  fields:
    ints: IntFixedArray
    fixedSimpleRecordArray: SimpleRecordFixedArray
    fixedRecordWithVlensArray: RecordWithVlensFixedArray

RecordWithNDArrays: !record
  fields:
    ints: int[,]
    fixedSimpleRecordArray: SimpleRecord[,]
    fixedRecordWithVlensArray: RecordWithVlens[,]

RecordWithNDArraysSingleDimension: !record
  fields:
    ints: int[()]
    fixedSimpleRecordArray: SimpleRecord[()]
    fixedRecordWithVlensArray: RecordWithVlens[()]

RecordWithDynamicNDArrays: !record
  fields:
    ints: IntArray
    simpleRecordArray: SimpleRecord[]
    recordWithVlensArray: RecordWithVlens[]

NamedFixedNDArray: int[dimA:2, dimB:4]

FixedArrays: !protocol
  sequence:
    ints: int[2, 3]
    fixedSimpleRecordArray: SimpleRecord[3, 2]
    fixedRecordWithVlensArray: RecordWithVlens[2, 2]
    recordWithFixedArrays: RecordWithFixedArrays
    namedArray: NamedFixedNDArray

RecordWithFixedCollections: !record
  fields:
    fixedVector: int*3
    fixedArray: int[2,3]

RecordWithVlenCollections: !record
  fields:
    vector: int*
    array: int[,]

RecordWithUnionsOfContainers: !record
  fields:
    mapOrScalar: !union
      map: string->int
      scalar: int
    vectorOrScalar: !union
      vector: int*
      scalar: int
    arrayOrScalar: !union
      array: int[]
      scalar: int

Subarrays: !protocol
  sequence:
    dynamicWithFixedIntSubarray: int[3][]
    dynamicWithFixedFloatSubarray: float[3][]

    knownDimCountWithFixedIntSubarray: int[3][()]
    knownDimCountWithFixedFloatSubarray: float[3][()]

    fixedWithFixedIntSubarray: int[3][2]
    fixedWithFixedFloatSubarray: float[3][2]

    nestedSubarray: int[3][2][]

    dynamicWithFixedVectorSubarray: int*3[]

    genericSubarray: Image<int[3]>


SubarraysInRecords: !protocol
  sequence:
    withFixedSubarrays: RecordWithFixedCollections[]
    withVlenSubarrays: RecordWithVlenCollections[]

NamedNDArray: int[dimA, dimB]

NDArrays: !protocol
  sequence:
    ints: int[,]
    simpleRecordArray: SimpleRecord[,]
    recordWithVlensArray: RecordWithVlens[,]
    recordWithNDArrays: RecordWithNDArrays
    namedArray: NamedNDArray

NDArraysSingleDimension: !protocol
  sequence:
    ints: int[()]
    simpleRecordArray: SimpleRecord[()]
    recordWithVlensArray: RecordWithVlens[()]
    recordWithNDArrays: RecordWithNDArraysSingleDimension

DynamicNDArrays: !protocol
  sequence:
    ints: int[]
    simpleRecordArray: SimpleRecord[]
    recordWithVlensArray: RecordWithVlens[]
    recordWithDynamicNDArrays: RecordWithDynamicNDArrays

MultiDArrays: !protocol
  sequence:
    images: !stream
      items: float[ch, z, y, x]
    frames: !stream
      items: float[ch:1, z:1, y:64, x:32]

Maps: !protocol
  sequence:
    stringToInt: string->int
    intToString: int->string
    stringToUnion: !map
      keys: string
      values: [string, int]
    aliasedGeneric: BasicTypes.AliasedMap<string, int>

Unions: !protocol
  sequence:
    intOrSimpleRecord: [int, SimpleRecord]
    intOrRecordWithVlens: [int, RecordWithVlens]
    monosotateOrIntOrSimpleRecord: [null, int, SimpleRecord]
    recordWithUnions: BasicTypes.RecordWithUnions

StreamsOfUnions: !protocol
  sequence:
    intOrSimpleRecord: !stream
      items: [int, SimpleRecord]
    nullableIntOrSimpleRecord: !stream
      items: [null, int, SimpleRecord]

Fruits: BasicTypes.Fruits

UInt64Enum: !enum
  base: uint64
  values:
    a: 0x8000000000000000

Int64Enum: !enum
  base: int64
  values:
    b: -0x4000000000000000

SizeBasedEnum: !enum
  base: size
  values: [a,b,c]

Enums: !protocol
  sequence:
    single: Fruits
    vec: Fruits*
    size: SizeBasedEnum

DaysOfWeek: BasicTypes.DaysOfWeek

TextFormat: BasicTypes.TextFormat

RecordWithEnums: !record
  fields:
    enum: Fruits
    flags: DaysOfWeek
    flags2: TextFormat

Flags: !protocol
  sequence:
    days: !stream
      items: DaysOfWeek
    formats: !stream
      items: TextFormat

StateTest: !protocol
  sequence:
    anInt: int
    aStream: !stream
      items: int
    anotherInt: int

Image<T>: Image.Image<T>

GenericRecord<T1, T2>: !record
  fields:
    scalar1: T1
    scalar2: T2
    vector1: T1*
    image2: Image<T2>

MyTuple<T1, T2>: BasicTypes.MyTuple<T1, T2>

AliasedTuple<T1, T2>: MyTuple<T1, T2>

RecordWithAliasedGenerics: !record
  fields:
    myStrings: MyTuple<string, string>
    aliasedStrings: AliasedTuple<string, string>

SimpleGenerics: !protocol
  sequence:
    floatImage: Image.FloatImage
    intImage: Image.IntImage
    intImageAlternateSyntax: !generic
      name: Image
      args: int
    stringImage: Image<string>
    intFloatTuple: Tuples.Tuple<int,float>
    floatFloatTuple: Tuples.Tuple<float, float>
    intFloatTupleAlternateSyntax: !generic
      name: Tuples.Tuple
      args: [int, float]
    intStringTuple: Tuples.Tuple<int,string>
    streamOfTypeVariants: !stream
      items: !union
        imageFloat: Image.FloatImage
        imageDouble: Image<double>

AdvancedGenerics: !protocol
  sequence:
    floatImageImage: Image<Image<float>>
    genericRecord1: GenericRecord<int, string>
    tupleOfOptionals: MyTuple<int?, string?>
    tupleOfOptionalsAlternateSyntax: !generic
      name: MyTuple
      args:
        - [null, int]
        - [null, string]
    tupleOfVectors: !generic
      name: MyTuple
      args:
        - int*
        - float*

AliasedString: string
AliasedEnum: Fruits
AliasedOpenGeneric<T1,T2>: AliasedTuple<T1,T2>
AliasedClosedGeneric: AliasedTuple<AliasedString, AliasedEnum>
AliasedOptional: int?
AliasedGenericOptional<T>: T?
AliasedMultiGenericOptional<T, U>: [null, T, U]
AliasedGenericUnion2<T1,T2>: BasicTypes.GenericUnion2<T1, T2>
AliasedGenericVector<T>: BasicTypes.GenericVector<T>
AliasedGenericFixedVector<T>: T*3
AliasedGenericRank2Array<T>: T[,]
AliasedGenericFixedArray<T>: T[16, 8]
AliasedGenericDynamicArray<T>: T[]
AliasedMap<K, V>: BasicTypes.AliasedMap<K, V>

VectorOfGenericRecords<T1, T2>: GenericRecord<T1, T2>*
AliasedVectorOfGenericRecords<T1, T2>: AliasedGenericVector<GenericRecord<T1, T2>>

RecordWithGenericVectorOfRecords<T, U>: !record
  fields:
    v: VectorOfGenericRecords<T, U>*

# BEGIN nested generic records

RecordWithOptionalGenericField<T>: !record
  fields:
    v: T?

RecordWithAliasedOptionalGenericField<T>: !record
  fields:
    v: AliasedGenericOptional<T>

RecordWithOptionalGenericUnionField<U, V>: !record
  fields:
    v: [null, U, V]

RecordWithAliasedOptionalGenericUnionField<U, V>: !record
  fields:
    v: AliasedMultiGenericOptional<U, V>

RecordWithGenericVectors<T>: !record
  fields:
    v: T*
    av: AliasedGenericVector<T>

RecordWithGenericFixedVectors<T>: !record
  fields:
    fv: T*3
    afv: AliasedGenericFixedVector<T>

RecordWithGenericArrays<T>: !record
  fields:
    nd: T[,]
    fixedNd: T[16, 8]
    dynamicNd: T[]
    aliasedNd: AliasedGenericRank2Array<T>
    aliasedFixedNd: AliasedGenericFixedArray<T>
    aliasedDynamicNd: AliasedGenericDynamicArray<T>

RecordWithGenericMaps<T, U>: !record
  fields:
    m: T->U
    am: BasicTypes.AliasedMap<T, U>

RecordContainingGenericRecords<A, B>: !record
  fields:
    g1: RecordWithOptionalGenericField<A>
    g1a: RecordWithAliasedOptionalGenericField<A>
    g2: RecordWithOptionalGenericUnionField<A, B>
    g2a: RecordWithAliasedOptionalGenericUnionField<A, B>
    g3: MyTuple<A, B>
    g3a: AliasedTuple<A, B>
    g4: RecordWithGenericVectors<B>
    g5: RecordWithGenericFixedVectors<B>
    g6: RecordWithGenericArrays<B>
    g7: RecordWithGenericMaps<A, B>

RecordContainingNestedGenericRecords: !record
  fields:
    f1: RecordWithOptionalGenericField<string>
    f1a: RecordWithAliasedOptionalGenericField<string>
    f2: RecordWithOptionalGenericUnionField<string, int>
    f2a: RecordWithAliasedOptionalGenericUnionField<string, int>
    nested: RecordContainingGenericRecords<string, int>

# END nested generic records

Aliases: !protocol
  sequence:
    aliasedString: AliasedString
    aliasedEnum: AliasedEnum
    aliasedOpenGeneric: AliasedOpenGeneric<AliasedString, AliasedEnum>
    aliasedClosedGeneric: AliasedClosedGeneric
    aliasedOptional: AliasedOptional
    aliasedGenericOptional: AliasedGenericOptional<float>
    aliasedGenericUnion2: AliasedGenericUnion2<AliasedString, AliasedEnum>
    aliasedGenericVector: AliasedGenericVector<float>
    aliasedGenericFixedVector: AliasedGenericFixedVector<float>
    streamOfAliasedGenericUnion2: !stream
      items: AliasedGenericUnion2<AliasedString, AliasedEnum>

AliasedIntOrSimpleRecord: [int, SimpleRecord]
AliasedNullableIntSimpleRecord: [null, int, SimpleRecord]

StreamsOfAliasedUnions: !protocol
  sequence:
    intOrSimpleRecord: !stream
      items: AliasedIntOrSimpleRecord
    nullableIntOrSimpleRecord: !stream
      items: AliasedNullableIntSimpleRecord

RecordWithComputedFields: !record
  fields:
    arrayField: int[x, y]
    arrayFieldMapDimensions: int[x,y]
    dynamicArrayField: int[]
    fixedArrayField: int[x:3, y:4]
    intField: int
    int8Field: int8
    uint8Field: uint8
    int16Field: int16
    uint16Field: uint16
    uint32Field: uint32
    int64Field: int64
    uint64Field: uint64
    sizeField: size
    float32Field: float32
    float64Field: float64
    complexfloat32Field: complexfloat32
    complexfloat64Field: complexfloat64
    stringField: string
    tupleField: MyTuple<int, int>
    vectorField: int*
    vectorOfVectorsField: int**
    fixedVectorField: int*3
    fixedVectorOfVectorsField: int*3*2
    optionalNamedArray: NamedNDArray?
    intFloatUnion: [int, float]
    nullableIntFloatUnion: [null, int, float]
    unionWithNestedGenericUnion: !union
      int: int
      genericRecordWithComputedFields: BasicTypes.GenericRecordWithComputedFields<string, float>
    mapField: string->string
  computedFields:
    intLiteral: 42 # this comment is ignored
    largeNegativeInt64Literal: -0x4000000000000000
    largeUInt64Literal: 0x8000000000000000
    stringLiteral: "'hello'"
    stringLiteral2: '"hello"'
    stringLiteral3: |-
      'hello'
    stringLiteral4: |-
      "hello"
    accessOtherComputedField: intField
    accessIntField: intField
    accessStringField: stringField
    accessTupleField: tupleField
    accessNestedTupleField: tupleField.v2
    accessArrayField: arrayField
    accessArrayFieldElement: arrayField[0, 1]
    accessArrayFieldElementByName: arrayField[x:0, y:1]
    accessVectorField: vectorField
    accessVectorFieldElement: vectorField[1]
    accessVectorOfVectorsField: vectorOfVectorsField[1][2]
    accessFixedVectorOfVectorsField: fixedVectorOfVectorsField[1][2]
    arraySize: size(arrayField)
    arrayXSize: size(arrayField, "x")
    arrayYSize: size(arrayField, "y")
    array0Size: size(arrayField, 0)
    array1Size: size(arrayField, 1)
    arraySizeFromIntField: size(arrayField, intField)
    arraySizeFromStringField: size(arrayField, stringField)
    arraySizeFromNestedIntField: size(arrayField, tupleField.v1)
    arrayFieldMapDimensionsXSize: size(arrayFieldMapDimensions, "x")
    fixedArraySize: size(fixedArrayField)
    fixedArrayXSize: size(fixedArrayField, "x")
    fixedArray0Size: size(fixedArrayField, 0)
    vectorSize: size(vectorField)
    fixedVectorSize: size(fixedVectorField)
    fixedVectorOfVectorsSize: size(fixedVectorOfVectorsField)
    arrayDimensionXIndex: dimensionIndex(arrayField, "x")
    arrayDimensionYIndex: dimensionIndex(arrayField, "y")
    arrayDimensionIndexFromStringField: dimensionIndex(arrayField, stringField)
    arrayDimensionCount: dimensionCount(arrayField)
    dynamicArrayDimensionCount: dimensionCount(dynamicArrayField)
    accessMap: mapField
    mapSize: size(mapField)
    accessMapEntry: mapField["hello"]
    stringComputedField: "'hello'"
    accessMapEntryWithComputedField: mapField[stringComputedField]
    accessMapEntryWithComputedFieldNested: mapField[mapField[stringComputedField]]
    accessMissingMapEntry: mapField["missing"]

    optionalNamedArrayLength:
      !switch optionalNamedArray:
        NamedNDArray arr: size(arr)
        null: 0
    optionalNamedArrayLengthWithDiscard:
      !switch optionalNamedArray:
        NamedNDArray arr: size(arr)
        _: 0
    intFloatUnionAsFloat:
      !switch intFloatUnion:
        int iFoo: iFoo
        float f: f
    nullableIntFloatUnionString:
      !switch nullableIntFloatUnion:
        null: "'null'"
        int: "'int'"
        _: "'float'"
    nestedSwitch:
      !switch unionWithNestedGenericUnion:
        int: -1
        BasicTypes.GenericRecordWithComputedFields<string, float> rec:
          !switch rec.f1:
            float f: 20
            string s: 10
    useNestedComputedField:
      !switch unionWithNestedGenericUnion:
        int: -1
        BasicTypes.GenericRecordWithComputedFields<string, float> rec: rec.typeIndex

    switchOverSingleValue:
      !switch intField:
        int i: i

    arithmetic1: 1 + 2
    arithmetic2: 1 + 2 * 3 + 4
    arithmetic3: (1 + 2) * 3 + 4
    arithmetic4: arraySizeFromIntField + 2
    arithmetic5: size(arrayField, 2 - 1)
    arithmetic6: 7 / 2
    arithmetic7: 7 ** 2
    arithmetic8: complexfloat32Field * 3
    arithmetic9: 1.2 + 1
    arithmetic10: 1e10 + 9e9
    arithmetic11: -(4.3 + 1)

    castIntToFloat: intField as float
    castFloatToInt: float32Field as int
    castPower: (7 ** 2) as int
    castComplex32ToComplex64: complexfloat32Field as complexfloat64
    castComplex64ToComplex32: complexfloat64Field as complexfloat32
    castFloatToComplex: 66.6 as complexfloat32

ProtocolWithComputedFields: !protocol
  sequence:
    recordWithComputedFields: RecordWithComputedFields


GenericUnionWithRepeatedTypeParameters<T>: !union
  t: T
  tv: T*
  ta: T[]

GenericUnion3<T, U, V>: [T, U, V]
GenericUnion3Alternate<U, V, W>: [U, V, W]

RecordNotUsedInProtocol: !record
  fields:
    u1: GenericUnion3<int, float, string>
    u2: GenericUnion3Alternate<int, float, string>

# BEGIN delibrately using C++ keywords and macros as identitiers

RecordWithKeywordFields: !record
  fields:
    int: string
    sizeof: ArrayWithKeywordDimensionNames
    if: EnumWithKeywordSymbols
  computedFields:
    float: int
    double: float
    return: sizeof[while:1, do:2]

EnumWithKeywordSymbols: !enum
  values:
    try: 2
    catch: 1

ArrayWithKeywordDimensionNames: !array
  items: int
  dimensions:
    while:
    do:

ProtocolWithKeywordSteps: !protocol
  sequence:
    int: !stream
      items: RecordWithKeywordFields
    float: EnumWithKeywordSymbols
# END delibrately using C++ keywords and macros as identitiers

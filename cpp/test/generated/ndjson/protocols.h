// This file was generated by the "yardl" tool. DO NOT EDIT.

#pragma once
#include <array>
#include <complex>
#include <memory>
#include <optional>
#include <variant>
#include <vector>

#include "../yardl/detail/ndjson/reader_writer.h"
#include "../protocols.h"
#include "../types.h"

namespace test_model::ndjson {
// NDJSON writer for the BenchmarkFloat256x256 protocol.
class BenchmarkFloat256x256Writer : public test_model::BenchmarkFloat256x256WriterBase, yardl::ndjson::NDJsonWriter {
  public:
  BenchmarkFloat256x256Writer(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  BenchmarkFloat256x256Writer(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteFloat256x256Impl(yardl::FixedNDArray<float, 256, 256> const& value) override;
  void EndFloat256x256Impl() override {}
  void CloseImpl() override;
};

// NDJSON reader for the BenchmarkFloat256x256 protocol.
class BenchmarkFloat256x256Reader : public test_model::BenchmarkFloat256x256ReaderBase, yardl::ndjson::NDJsonReader {
  public:
  BenchmarkFloat256x256Reader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  BenchmarkFloat256x256Reader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  bool ReadFloat256x256Impl(yardl::FixedNDArray<float, 256, 256>& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the BenchmarkFloatVlen protocol.
class BenchmarkFloatVlenWriter : public test_model::BenchmarkFloatVlenWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  BenchmarkFloatVlenWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  BenchmarkFloatVlenWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteFloatArrayImpl(yardl::NDArray<float, 2> const& value) override;
  void EndFloatArrayImpl() override {}
  void CloseImpl() override;
};

// NDJSON reader for the BenchmarkFloatVlen protocol.
class BenchmarkFloatVlenReader : public test_model::BenchmarkFloatVlenReaderBase, yardl::ndjson::NDJsonReader {
  public:
  BenchmarkFloatVlenReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  BenchmarkFloatVlenReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  bool ReadFloatArrayImpl(yardl::NDArray<float, 2>& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the BenchmarkSmallRecord protocol.
class BenchmarkSmallRecordWriter : public test_model::BenchmarkSmallRecordWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  BenchmarkSmallRecordWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  BenchmarkSmallRecordWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteSmallRecordImpl(test_model::SmallBenchmarkRecord const& value) override;
  void EndSmallRecordImpl() override {}
  void CloseImpl() override;
};

// NDJSON reader for the BenchmarkSmallRecord protocol.
class BenchmarkSmallRecordReader : public test_model::BenchmarkSmallRecordReaderBase, yardl::ndjson::NDJsonReader {
  public:
  BenchmarkSmallRecordReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  BenchmarkSmallRecordReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  bool ReadSmallRecordImpl(test_model::SmallBenchmarkRecord& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the BenchmarkSmallRecordWithOptionals protocol.
class BenchmarkSmallRecordWithOptionalsWriter : public test_model::BenchmarkSmallRecordWithOptionalsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  BenchmarkSmallRecordWithOptionalsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  BenchmarkSmallRecordWithOptionalsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteSmallRecordImpl(test_model::SimpleEncodingCounters const& value) override;
  void EndSmallRecordImpl() override {}
  void CloseImpl() override;
};

// NDJSON reader for the BenchmarkSmallRecordWithOptionals protocol.
class BenchmarkSmallRecordWithOptionalsReader : public test_model::BenchmarkSmallRecordWithOptionalsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  BenchmarkSmallRecordWithOptionalsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  BenchmarkSmallRecordWithOptionalsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  bool ReadSmallRecordImpl(test_model::SimpleEncodingCounters& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the BenchmarkSimpleMrd protocol.
class BenchmarkSimpleMrdWriter : public test_model::BenchmarkSimpleMrdWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  BenchmarkSimpleMrdWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  BenchmarkSimpleMrdWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteDataImpl(std::variant<test_model::SimpleAcquisition, test_model::Image<float>> const& value) override;
  void EndDataImpl() override {}
  void CloseImpl() override;
};

// NDJSON reader for the BenchmarkSimpleMrd protocol.
class BenchmarkSimpleMrdReader : public test_model::BenchmarkSimpleMrdReaderBase, yardl::ndjson::NDJsonReader {
  public:
  BenchmarkSimpleMrdReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  BenchmarkSimpleMrdReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  bool ReadDataImpl(std::variant<test_model::SimpleAcquisition, test_model::Image<float>>& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the Scalars protocol.
class ScalarsWriter : public test_model::ScalarsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  ScalarsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  ScalarsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteInt32Impl(int32_t const& value) override;
  void WriteRecordImpl(test_model::RecordWithPrimitives const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the Scalars protocol.
class ScalarsReader : public test_model::ScalarsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  ScalarsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  ScalarsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadInt32Impl(int32_t& value) override;
  void ReadRecordImpl(test_model::RecordWithPrimitives& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the ScalarOptionals protocol.
class ScalarOptionalsWriter : public test_model::ScalarOptionalsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  ScalarOptionalsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  ScalarOptionalsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteOptionalIntImpl(std::optional<int32_t> const& value) override;
  void WriteOptionalRecordImpl(std::optional<test_model::SimpleRecord> const& value) override;
  void WriteRecordWithOptionalFieldsImpl(test_model::RecordWithOptionalFields const& value) override;
  void WriteOptionalRecordWithOptionalFieldsImpl(std::optional<test_model::RecordWithOptionalFields> const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the ScalarOptionals protocol.
class ScalarOptionalsReader : public test_model::ScalarOptionalsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  ScalarOptionalsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  ScalarOptionalsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadOptionalIntImpl(std::optional<int32_t>& value) override;
  void ReadOptionalRecordImpl(std::optional<test_model::SimpleRecord>& value) override;
  void ReadRecordWithOptionalFieldsImpl(test_model::RecordWithOptionalFields& value) override;
  void ReadOptionalRecordWithOptionalFieldsImpl(std::optional<test_model::RecordWithOptionalFields>& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the NestedRecords protocol.
class NestedRecordsWriter : public test_model::NestedRecordsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  NestedRecordsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  NestedRecordsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteTupleWithRecordsImpl(test_model::TupleWithRecords const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the NestedRecords protocol.
class NestedRecordsReader : public test_model::NestedRecordsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  NestedRecordsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  NestedRecordsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadTupleWithRecordsImpl(test_model::TupleWithRecords& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the Vlens protocol.
class VlensWriter : public test_model::VlensWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  VlensWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  VlensWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteIntVectorImpl(std::vector<int32_t> const& value) override;
  void WriteComplexVectorImpl(std::vector<std::complex<float>> const& value) override;
  void WriteRecordWithVlensImpl(test_model::RecordWithVlens const& value) override;
  void WriteVlenOfRecordWithVlensImpl(std::vector<test_model::RecordWithVlens> const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the Vlens protocol.
class VlensReader : public test_model::VlensReaderBase, yardl::ndjson::NDJsonReader {
  public:
  VlensReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  VlensReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadIntVectorImpl(std::vector<int32_t>& value) override;
  void ReadComplexVectorImpl(std::vector<std::complex<float>>& value) override;
  void ReadRecordWithVlensImpl(test_model::RecordWithVlens& value) override;
  void ReadVlenOfRecordWithVlensImpl(std::vector<test_model::RecordWithVlens>& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the Strings protocol.
class StringsWriter : public test_model::StringsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  StringsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  StringsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteSingleStringImpl(std::string const& value) override;
  void WriteRecWithStringImpl(test_model::RecordWithStrings const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the Strings protocol.
class StringsReader : public test_model::StringsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  StringsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  StringsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadSingleStringImpl(std::string& value) override;
  void ReadRecWithStringImpl(test_model::RecordWithStrings& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the OptionalVectors protocol.
class OptionalVectorsWriter : public test_model::OptionalVectorsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  OptionalVectorsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  OptionalVectorsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteRecordWithOptionalVectorImpl(test_model::RecordWithOptionalVector const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the OptionalVectors protocol.
class OptionalVectorsReader : public test_model::OptionalVectorsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  OptionalVectorsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  OptionalVectorsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadRecordWithOptionalVectorImpl(test_model::RecordWithOptionalVector& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the FixedVectors protocol.
class FixedVectorsWriter : public test_model::FixedVectorsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  FixedVectorsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  FixedVectorsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteFixedIntVectorImpl(std::array<int32_t, 5> const& value) override;
  void WriteFixedSimpleRecordVectorImpl(std::array<test_model::SimpleRecord, 3> const& value) override;
  void WriteFixedRecordWithVlensVectorImpl(std::array<test_model::RecordWithVlens, 2> const& value) override;
  void WriteRecordWithFixedVectorsImpl(test_model::RecordWithFixedVectors const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the FixedVectors protocol.
class FixedVectorsReader : public test_model::FixedVectorsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  FixedVectorsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  FixedVectorsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadFixedIntVectorImpl(std::array<int32_t, 5>& value) override;
  void ReadFixedSimpleRecordVectorImpl(std::array<test_model::SimpleRecord, 3>& value) override;
  void ReadFixedRecordWithVlensVectorImpl(std::array<test_model::RecordWithVlens, 2>& value) override;
  void ReadRecordWithFixedVectorsImpl(test_model::RecordWithFixedVectors& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the Streams protocol.
class StreamsWriter : public test_model::StreamsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  StreamsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  StreamsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteIntDataImpl(int32_t const& value) override;
  void EndIntDataImpl() override {}
  void WriteOptionalIntDataImpl(std::optional<int32_t> const& value) override;
  void EndOptionalIntDataImpl() override {}
  void WriteRecordWithOptionalVectorDataImpl(test_model::RecordWithOptionalVector const& value) override;
  void EndRecordWithOptionalVectorDataImpl() override {}
  void WriteFixedVectorImpl(std::array<int32_t, 3> const& value) override;
  void EndFixedVectorImpl() override {}
  void CloseImpl() override;
};

// NDJSON reader for the Streams protocol.
class StreamsReader : public test_model::StreamsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  StreamsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  StreamsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  bool ReadIntDataImpl(int32_t& value) override;
  bool ReadOptionalIntDataImpl(std::optional<int32_t>& value) override;
  bool ReadRecordWithOptionalVectorDataImpl(test_model::RecordWithOptionalVector& value) override;
  bool ReadFixedVectorImpl(std::array<int32_t, 3>& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the FixedArrays protocol.
class FixedArraysWriter : public test_model::FixedArraysWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  FixedArraysWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  FixedArraysWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteIntsImpl(yardl::FixedNDArray<int32_t, 2, 3> const& value) override;
  void WriteFixedSimpleRecordArrayImpl(yardl::FixedNDArray<test_model::SimpleRecord, 3, 2> const& value) override;
  void WriteFixedRecordWithVlensArrayImpl(yardl::FixedNDArray<test_model::RecordWithVlens, 2, 2> const& value) override;
  void WriteRecordWithFixedArraysImpl(test_model::RecordWithFixedArrays const& value) override;
  void WriteNamedArrayImpl(test_model::NamedFixedNDArray const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the FixedArrays protocol.
class FixedArraysReader : public test_model::FixedArraysReaderBase, yardl::ndjson::NDJsonReader {
  public:
  FixedArraysReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  FixedArraysReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadIntsImpl(yardl::FixedNDArray<int32_t, 2, 3>& value) override;
  void ReadFixedSimpleRecordArrayImpl(yardl::FixedNDArray<test_model::SimpleRecord, 3, 2>& value) override;
  void ReadFixedRecordWithVlensArrayImpl(yardl::FixedNDArray<test_model::RecordWithVlens, 2, 2>& value) override;
  void ReadRecordWithFixedArraysImpl(test_model::RecordWithFixedArrays& value) override;
  void ReadNamedArrayImpl(test_model::NamedFixedNDArray& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the NDArrays protocol.
class NDArraysWriter : public test_model::NDArraysWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  NDArraysWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  NDArraysWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteIntsImpl(yardl::NDArray<int32_t, 2> const& value) override;
  void WriteSimpleRecordArrayImpl(yardl::NDArray<test_model::SimpleRecord, 2> const& value) override;
  void WriteRecordWithVlensArrayImpl(yardl::NDArray<test_model::RecordWithVlens, 2> const& value) override;
  void WriteRecordWithNDArraysImpl(test_model::RecordWithNDArrays const& value) override;
  void WriteNamedArrayImpl(test_model::NamedNDArray const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the NDArrays protocol.
class NDArraysReader : public test_model::NDArraysReaderBase, yardl::ndjson::NDJsonReader {
  public:
  NDArraysReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  NDArraysReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadIntsImpl(yardl::NDArray<int32_t, 2>& value) override;
  void ReadSimpleRecordArrayImpl(yardl::NDArray<test_model::SimpleRecord, 2>& value) override;
  void ReadRecordWithVlensArrayImpl(yardl::NDArray<test_model::RecordWithVlens, 2>& value) override;
  void ReadRecordWithNDArraysImpl(test_model::RecordWithNDArrays& value) override;
  void ReadNamedArrayImpl(test_model::NamedNDArray& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the NDArraysSingleDimension protocol.
class NDArraysSingleDimensionWriter : public test_model::NDArraysSingleDimensionWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  NDArraysSingleDimensionWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  NDArraysSingleDimensionWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteIntsImpl(yardl::NDArray<int32_t, 1> const& value) override;
  void WriteSimpleRecordArrayImpl(yardl::NDArray<test_model::SimpleRecord, 1> const& value) override;
  void WriteRecordWithVlensArrayImpl(yardl::NDArray<test_model::RecordWithVlens, 1> const& value) override;
  void WriteRecordWithNDArraysImpl(test_model::RecordWithNDArraysSingleDimension const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the NDArraysSingleDimension protocol.
class NDArraysSingleDimensionReader : public test_model::NDArraysSingleDimensionReaderBase, yardl::ndjson::NDJsonReader {
  public:
  NDArraysSingleDimensionReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  NDArraysSingleDimensionReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadIntsImpl(yardl::NDArray<int32_t, 1>& value) override;
  void ReadSimpleRecordArrayImpl(yardl::NDArray<test_model::SimpleRecord, 1>& value) override;
  void ReadRecordWithVlensArrayImpl(yardl::NDArray<test_model::RecordWithVlens, 1>& value) override;
  void ReadRecordWithNDArraysImpl(test_model::RecordWithNDArraysSingleDimension& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the DynamicNDArrays protocol.
class DynamicNDArraysWriter : public test_model::DynamicNDArraysWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  DynamicNDArraysWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  DynamicNDArraysWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteIntsImpl(yardl::DynamicNDArray<int32_t> const& value) override;
  void WriteSimpleRecordArrayImpl(yardl::DynamicNDArray<test_model::SimpleRecord> const& value) override;
  void WriteRecordWithVlensArrayImpl(yardl::DynamicNDArray<test_model::RecordWithVlens> const& value) override;
  void WriteRecordWithDynamicNDArraysImpl(test_model::RecordWithDynamicNDArrays const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the DynamicNDArrays protocol.
class DynamicNDArraysReader : public test_model::DynamicNDArraysReaderBase, yardl::ndjson::NDJsonReader {
  public:
  DynamicNDArraysReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  DynamicNDArraysReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadIntsImpl(yardl::DynamicNDArray<int32_t>& value) override;
  void ReadSimpleRecordArrayImpl(yardl::DynamicNDArray<test_model::SimpleRecord>& value) override;
  void ReadRecordWithVlensArrayImpl(yardl::DynamicNDArray<test_model::RecordWithVlens>& value) override;
  void ReadRecordWithDynamicNDArraysImpl(test_model::RecordWithDynamicNDArrays& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the Maps protocol.
class MapsWriter : public test_model::MapsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  MapsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  MapsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteStringToIntImpl(std::unordered_map<std::string, int32_t> const& value) override;
  void WriteStringToUnionImpl(std::unordered_map<std::string, std::variant<std::string, int32_t>> const& value) override;
  void WriteAliasedGenericImpl(test_model::AliasedMap<std::string, int32_t> const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the Maps protocol.
class MapsReader : public test_model::MapsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  MapsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  MapsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadStringToIntImpl(std::unordered_map<std::string, int32_t>& value) override;
  void ReadStringToUnionImpl(std::unordered_map<std::string, std::variant<std::string, int32_t>>& value) override;
  void ReadAliasedGenericImpl(test_model::AliasedMap<std::string, int32_t>& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the Unions protocol.
class UnionsWriter : public test_model::UnionsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  UnionsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  UnionsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteIntOrSimpleRecordImpl(std::variant<int32_t, test_model::SimpleRecord> const& value) override;
  void WriteIntOrRecordWithVlensImpl(std::variant<int32_t, test_model::RecordWithVlens> const& value) override;
  void WriteMonosotateOrIntOrSimpleRecordImpl(std::variant<std::monostate, int32_t, test_model::SimpleRecord> const& value) override;
  void WriteRecordWithUnionsImpl(test_model::RecordWithUnions const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the Unions protocol.
class UnionsReader : public test_model::UnionsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  UnionsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  UnionsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadIntOrSimpleRecordImpl(std::variant<int32_t, test_model::SimpleRecord>& value) override;
  void ReadIntOrRecordWithVlensImpl(std::variant<int32_t, test_model::RecordWithVlens>& value) override;
  void ReadMonosotateOrIntOrSimpleRecordImpl(std::variant<std::monostate, int32_t, test_model::SimpleRecord>& value) override;
  void ReadRecordWithUnionsImpl(test_model::RecordWithUnions& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the StreamsOfUnions protocol.
class StreamsOfUnionsWriter : public test_model::StreamsOfUnionsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  StreamsOfUnionsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  StreamsOfUnionsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteIntOrSimpleRecordImpl(std::variant<int32_t, test_model::SimpleRecord> const& value) override;
  void EndIntOrSimpleRecordImpl() override {}
  void WriteNullableIntOrSimpleRecordImpl(std::variant<std::monostate, int32_t, test_model::SimpleRecord> const& value) override;
  void EndNullableIntOrSimpleRecordImpl() override {}
  void CloseImpl() override;
};

// NDJSON reader for the StreamsOfUnions protocol.
class StreamsOfUnionsReader : public test_model::StreamsOfUnionsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  StreamsOfUnionsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  StreamsOfUnionsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  bool ReadIntOrSimpleRecordImpl(std::variant<int32_t, test_model::SimpleRecord>& value) override;
  bool ReadNullableIntOrSimpleRecordImpl(std::variant<std::monostate, int32_t, test_model::SimpleRecord>& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the Enums protocol.
class EnumsWriter : public test_model::EnumsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  EnumsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  EnumsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteSingleImpl(test_model::Fruits const& value) override;
  void WriteVecImpl(std::vector<test_model::Fruits> const& value) override;
  void WriteSizeImpl(test_model::SizeBasedEnum const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the Enums protocol.
class EnumsReader : public test_model::EnumsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  EnumsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  EnumsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadSingleImpl(test_model::Fruits& value) override;
  void ReadVecImpl(std::vector<test_model::Fruits>& value) override;
  void ReadSizeImpl(test_model::SizeBasedEnum& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the StateTest protocol.
class StateTestWriter : public test_model::StateTestWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  StateTestWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  StateTestWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteAnIntImpl(int32_t const& value) override;
  void WriteAStreamImpl(int32_t const& value) override;
  void EndAStreamImpl() override {}
  void WriteAnotherIntImpl(int32_t const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the StateTest protocol.
class StateTestReader : public test_model::StateTestReaderBase, yardl::ndjson::NDJsonReader {
  public:
  StateTestReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  StateTestReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadAnIntImpl(int32_t& value) override;
  bool ReadAStreamImpl(int32_t& value) override;
  void ReadAnotherIntImpl(int32_t& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the SimpleGenerics protocol.
class SimpleGenericsWriter : public test_model::SimpleGenericsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  SimpleGenericsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  SimpleGenericsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteFloatImageImpl(test_model::Image<float> const& value) override;
  void WriteIntImageImpl(test_model::Image<int32_t> const& value) override;
  void WriteIntImageAlternateSyntaxImpl(test_model::Image<int32_t> const& value) override;
  void WriteStringImageImpl(test_model::Image<std::string> const& value) override;
  void WriteIntFloatTupleImpl(test_model::MyTuple<int32_t, float> const& value) override;
  void WriteFloatFloatTupleImpl(test_model::MyTuple<float, float> const& value) override;
  void WriteIntFloatTupleAlternateSyntaxImpl(test_model::MyTuple<int32_t, float> const& value) override;
  void WriteIntStringTupleImpl(test_model::MyTuple<int32_t, std::string> const& value) override;
  void WriteStreamOfTypeVariantsImpl(std::variant<test_model::Image<float>, test_model::Image<double>> const& value) override;
  void EndStreamOfTypeVariantsImpl() override {}
  void CloseImpl() override;
};

// NDJSON reader for the SimpleGenerics protocol.
class SimpleGenericsReader : public test_model::SimpleGenericsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  SimpleGenericsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  SimpleGenericsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadFloatImageImpl(test_model::Image<float>& value) override;
  void ReadIntImageImpl(test_model::Image<int32_t>& value) override;
  void ReadIntImageAlternateSyntaxImpl(test_model::Image<int32_t>& value) override;
  void ReadStringImageImpl(test_model::Image<std::string>& value) override;
  void ReadIntFloatTupleImpl(test_model::MyTuple<int32_t, float>& value) override;
  void ReadFloatFloatTupleImpl(test_model::MyTuple<float, float>& value) override;
  void ReadIntFloatTupleAlternateSyntaxImpl(test_model::MyTuple<int32_t, float>& value) override;
  void ReadIntStringTupleImpl(test_model::MyTuple<int32_t, std::string>& value) override;
  bool ReadStreamOfTypeVariantsImpl(std::variant<test_model::Image<float>, test_model::Image<double>>& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the AdvancedGenerics protocol.
class AdvancedGenericsWriter : public test_model::AdvancedGenericsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  AdvancedGenericsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  AdvancedGenericsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteIntImageImageImpl(test_model::Image<test_model::Image<float>> const& value) override;
  void WriteGenericRecord1Impl(test_model::GenericRecord<int32_t, std::string> const& value) override;
  void WriteTupleOfOptionalsImpl(test_model::MyTuple<std::optional<int32_t>, std::optional<std::string>> const& value) override;
  void WriteTupleOfOptionalsAlternateSyntaxImpl(test_model::MyTuple<std::optional<int32_t>, std::optional<std::string>> const& value) override;
  void WriteTupleOfVectorsImpl(test_model::MyTuple<std::vector<int32_t>, std::vector<float>> const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the AdvancedGenerics protocol.
class AdvancedGenericsReader : public test_model::AdvancedGenericsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  AdvancedGenericsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  AdvancedGenericsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadIntImageImageImpl(test_model::Image<test_model::Image<float>>& value) override;
  void ReadGenericRecord1Impl(test_model::GenericRecord<int32_t, std::string>& value) override;
  void ReadTupleOfOptionalsImpl(test_model::MyTuple<std::optional<int32_t>, std::optional<std::string>>& value) override;
  void ReadTupleOfOptionalsAlternateSyntaxImpl(test_model::MyTuple<std::optional<int32_t>, std::optional<std::string>>& value) override;
  void ReadTupleOfVectorsImpl(test_model::MyTuple<std::vector<int32_t>, std::vector<float>>& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the Aliases protocol.
class AliasesWriter : public test_model::AliasesWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  AliasesWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  AliasesWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteAliasedStringImpl(test_model::AliasedString const& value) override;
  void WriteAliasedEnumImpl(test_model::AliasedEnum const& value) override;
  void WriteAliasedOpenGenericImpl(test_model::AliasedOpenGeneric<test_model::AliasedString, test_model::AliasedEnum> const& value) override;
  void WriteAliasedClosedGenericImpl(test_model::AliasedClosedGeneric const& value) override;
  void WriteAliasedOptionalImpl(test_model::AliasedOptional const& value) override;
  void WriteAliasedGenericOptionalImpl(test_model::AliasedGenericOptional<float> const& value) override;
  void WriteAliasedGenericUnion2Impl(test_model::AliasedGenericUnion2<test_model::AliasedString, test_model::AliasedEnum> const& value) override;
  void WriteAliasedGenericVectorImpl(test_model::AliasedGenericVector<float> const& value) override;
  void WriteAliasedGenericFixedVectorImpl(test_model::AliasedGenericFixedVector<float> const& value) override;
  void WriteStreamOfAliasedGenericUnion2Impl(test_model::AliasedGenericUnion2<test_model::AliasedString, test_model::AliasedEnum> const& value) override;
  void EndStreamOfAliasedGenericUnion2Impl() override {}
  void CloseImpl() override;
};

// NDJSON reader for the Aliases protocol.
class AliasesReader : public test_model::AliasesReaderBase, yardl::ndjson::NDJsonReader {
  public:
  AliasesReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  AliasesReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadAliasedStringImpl(test_model::AliasedString& value) override;
  void ReadAliasedEnumImpl(test_model::AliasedEnum& value) override;
  void ReadAliasedOpenGenericImpl(test_model::AliasedOpenGeneric<test_model::AliasedString, test_model::AliasedEnum>& value) override;
  void ReadAliasedClosedGenericImpl(test_model::AliasedClosedGeneric& value) override;
  void ReadAliasedOptionalImpl(test_model::AliasedOptional& value) override;
  void ReadAliasedGenericOptionalImpl(test_model::AliasedGenericOptional<float>& value) override;
  void ReadAliasedGenericUnion2Impl(test_model::AliasedGenericUnion2<test_model::AliasedString, test_model::AliasedEnum>& value) override;
  void ReadAliasedGenericVectorImpl(test_model::AliasedGenericVector<float>& value) override;
  void ReadAliasedGenericFixedVectorImpl(test_model::AliasedGenericFixedVector<float>& value) override;
  bool ReadStreamOfAliasedGenericUnion2Impl(test_model::AliasedGenericUnion2<test_model::AliasedString, test_model::AliasedEnum>& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the StreamsOfAliasedUnions protocol.
class StreamsOfAliasedUnionsWriter : public test_model::StreamsOfAliasedUnionsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  StreamsOfAliasedUnionsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  StreamsOfAliasedUnionsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteIntOrSimpleRecordImpl(test_model::AliasedIntOrSimpleRecord const& value) override;
  void EndIntOrSimpleRecordImpl() override {}
  void WriteNullableIntOrSimpleRecordImpl(test_model::AliasedNullableIntSimpleRecord const& value) override;
  void EndNullableIntOrSimpleRecordImpl() override {}
  void CloseImpl() override;
};

// NDJSON reader for the StreamsOfAliasedUnions protocol.
class StreamsOfAliasedUnionsReader : public test_model::StreamsOfAliasedUnionsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  StreamsOfAliasedUnionsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  StreamsOfAliasedUnionsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  bool ReadIntOrSimpleRecordImpl(test_model::AliasedIntOrSimpleRecord& value) override;
  bool ReadNullableIntOrSimpleRecordImpl(test_model::AliasedNullableIntSimpleRecord& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the ProtocolWithComputedFields protocol.
class ProtocolWithComputedFieldsWriter : public test_model::ProtocolWithComputedFieldsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  ProtocolWithComputedFieldsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  ProtocolWithComputedFieldsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteRecordWithComputedFieldsImpl(test_model::RecordWithComputedFields const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the ProtocolWithComputedFields protocol.
class ProtocolWithComputedFieldsReader : public test_model::ProtocolWithComputedFieldsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  ProtocolWithComputedFieldsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  ProtocolWithComputedFieldsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  void ReadRecordWithComputedFieldsImpl(test_model::RecordWithComputedFields& value) override;
  void CloseImpl() override;
};

// NDJSON writer for the ProtocolWithKeywordSteps protocol.
class ProtocolWithKeywordStepsWriter : public test_model::ProtocolWithKeywordStepsWriterBase, yardl::ndjson::NDJsonWriter {
  public:
  ProtocolWithKeywordStepsWriter(std::ostream& stream)
      : yardl::ndjson::NDJsonWriter(stream, schema_) {
  }

  ProtocolWithKeywordStepsWriter(std::string file_name)
      : yardl::ndjson::NDJsonWriter(file_name, schema_) {
  }

  void Flush() override;

  protected:
  void WriteIntImpl(test_model::RecordWithKeywordFields const& value) override;
  void EndIntImpl() override {}
  void WriteFloatImpl(test_model::EnumWithKeywordSymbols const& value) override;
  void CloseImpl() override;
};

// NDJSON reader for the ProtocolWithKeywordSteps protocol.
class ProtocolWithKeywordStepsReader : public test_model::ProtocolWithKeywordStepsReaderBase, yardl::ndjson::NDJsonReader {
  public:
  ProtocolWithKeywordStepsReader(std::istream& stream)
      : yardl::ndjson::NDJsonReader(stream, schema_) {
  }

  ProtocolWithKeywordStepsReader(std::string file_name)
      : yardl::ndjson::NDJsonReader(file_name, schema_) {
  }

  protected:
  bool ReadIntImpl(test_model::RecordWithKeywordFields& value) override;
  void ReadFloatImpl(test_model::EnumWithKeywordSymbols& value) override;
  void CloseImpl() override;
};

}

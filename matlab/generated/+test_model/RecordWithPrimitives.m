% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef RecordWithPrimitives < handle
  properties
    bool_field
    int8_field
    uint8_field
    int16_field
    uint16_field
    int32_field
    uint32_field
    int64_field
    uint64_field
    size_field
    float32_field
    float64_field
    complexfloat32_field
    complexfloat64_field
    date_field
    time_field
    datetime_field
  end

  methods
    function self = RecordWithPrimitives(kwargs)
      arguments
        kwargs.bool_field = false;
        kwargs.int8_field = int8(0);
        kwargs.uint8_field = uint8(0);
        kwargs.int16_field = int16(0);
        kwargs.uint16_field = uint16(0);
        kwargs.int32_field = int32(0);
        kwargs.uint32_field = uint32(0);
        kwargs.int64_field = int64(0);
        kwargs.uint64_field = uint64(0);
        kwargs.size_field = uint64(0);
        kwargs.float32_field = single(0);
        kwargs.float64_field = double(0);
        kwargs.complexfloat32_field = complex(single(0));
        kwargs.complexfloat64_field = complex(0);
        kwargs.date_field = yardl.Date();
        kwargs.time_field = yardl.Time();
        kwargs.datetime_field = yardl.DateTime();
      end
      self.bool_field = kwargs.bool_field;
      self.int8_field = kwargs.int8_field;
      self.uint8_field = kwargs.uint8_field;
      self.int16_field = kwargs.int16_field;
      self.uint16_field = kwargs.uint16_field;
      self.int32_field = kwargs.int32_field;
      self.uint32_field = kwargs.uint32_field;
      self.int64_field = kwargs.int64_field;
      self.uint64_field = kwargs.uint64_field;
      self.size_field = kwargs.size_field;
      self.float32_field = kwargs.float32_field;
      self.float64_field = kwargs.float64_field;
      self.complexfloat32_field = kwargs.complexfloat32_field;
      self.complexfloat64_field = kwargs.complexfloat64_field;
      self.date_field = kwargs.date_field;
      self.time_field = kwargs.time_field;
      self.datetime_field = kwargs.datetime_field;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "test_model.RecordWithPrimitives") && ...
        all([self.bool_field] == [other.bool_field]) && ...
        all([self.int8_field] == [other.int8_field]) && ...
        all([self.uint8_field] == [other.uint8_field]) && ...
        all([self.int16_field] == [other.int16_field]) && ...
        all([self.uint16_field] == [other.uint16_field]) && ...
        all([self.int32_field] == [other.int32_field]) && ...
        all([self.uint32_field] == [other.uint32_field]) && ...
        all([self.int64_field] == [other.int64_field]) && ...
        all([self.uint64_field] == [other.uint64_field]) && ...
        all([self.size_field] == [other.size_field]) && ...
        all([self.float32_field] == [other.float32_field]) && ...
        all([self.float64_field] == [other.float64_field]) && ...
        all([self.complexfloat32_field] == [other.complexfloat32_field]) && ...
        all([self.complexfloat64_field] == [other.complexfloat64_field]) && ...
        all([self.date_field] == [other.date_field]) && ...
        all([self.time_field] == [other.time_field]) && ...
        all([self.datetime_field] == [other.datetime_field]);
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = test_model.RecordWithPrimitives();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end

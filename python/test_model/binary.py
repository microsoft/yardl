# This file was generated by the "yardl" tool. DO NOT EDIT.

# pyright: reportUnusedClass=false

import collections.abc
import datetime
import io
import typing
import numpy as np
import numpy.typing as npt

from . import *
from . import _binary
from . import yardl_types as yardl

K = typing.TypeVar('K')
K_NP = typing.TypeVar('K_NP', bound=np.generic)
V = typing.TypeVar('V')
V_NP = typing.TypeVar('V_NP', bound=np.generic)
T = typing.TypeVar('T')
T_NP = typing.TypeVar('T_NP', bound=np.generic)
T1 = typing.TypeVar('T1')
T1_NP = typing.TypeVar('T1_NP', bound=np.generic)
T2 = typing.TypeVar('T2')
T2_NP = typing.TypeVar('T2_NP', bound=np.generic)
T0 = typing.TypeVar('T0')
T0_NP = typing.TypeVar('T0_NP', bound=np.generic)

class BinaryBenchmarkFloat256x256Writer(_binary.BinaryProtocolWriter, BenchmarkFloat256x256WriterBase):
    """Binary writer for the BenchmarkFloat256x256 protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        BenchmarkFloat256x256WriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, BenchmarkFloat256x256WriterBase.schema)

    def _write_float_256x_256(self, value: collections.abc.Iterable[npt.NDArray[np.float32]]) -> None:
        _binary.StreamSerializer(_binary.FixedNDArraySerializer(_binary.float32_serializer, (256, 256,))).write(self._stream, value)


class BinaryBenchmarkFloat256x256Reader(_binary.BinaryProtocolReader, BenchmarkFloat256x256ReaderBase):
    """Binary writer for the BenchmarkFloat256x256 protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        BenchmarkFloat256x256ReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, BenchmarkFloat256x256ReaderBase.schema)

    def _read_float_256x_256(self) -> collections.abc.Iterable[npt.NDArray[np.float32]]:
        return _binary.StreamSerializer(_binary.FixedNDArraySerializer(_binary.float32_serializer, (256, 256,))).read(self._stream, self._read_as_numpy)

class BinaryBenchmarkFloatVlenWriter(_binary.BinaryProtocolWriter, BenchmarkFloatVlenWriterBase):
    """Binary writer for the BenchmarkFloatVlen protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        BenchmarkFloatVlenWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, BenchmarkFloatVlenWriterBase.schema)

    def _write_float_array(self, value: collections.abc.Iterable[npt.NDArray[np.float32]]) -> None:
        _binary.StreamSerializer(_binary.NDArraySerializer(_binary.float32_serializer, 2)).write(self._stream, value)


class BinaryBenchmarkFloatVlenReader(_binary.BinaryProtocolReader, BenchmarkFloatVlenReaderBase):
    """Binary writer for the BenchmarkFloatVlen protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        BenchmarkFloatVlenReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, BenchmarkFloatVlenReaderBase.schema)

    def _read_float_array(self) -> collections.abc.Iterable[npt.NDArray[np.float32]]:
        return _binary.StreamSerializer(_binary.NDArraySerializer(_binary.float32_serializer, 2)).read(self._stream, self._read_as_numpy)

class BinaryBenchmarkSmallRecordWriter(_binary.BinaryProtocolWriter, BenchmarkSmallRecordWriterBase):
    """Binary writer for the BenchmarkSmallRecord protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        BenchmarkSmallRecordWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, BenchmarkSmallRecordWriterBase.schema)

    def _write_small_record(self, value: collections.abc.Iterable[SmallBenchmarkRecord]) -> None:
        _binary.StreamSerializer(_SmallBenchmarkRecordSerializer()).write(self._stream, value)


class BinaryBenchmarkSmallRecordReader(_binary.BinaryProtocolReader, BenchmarkSmallRecordReaderBase):
    """Binary writer for the BenchmarkSmallRecord protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        BenchmarkSmallRecordReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, BenchmarkSmallRecordReaderBase.schema)

    def _read_small_record(self) -> collections.abc.Iterable[SmallBenchmarkRecord]:
        return _binary.StreamSerializer(_SmallBenchmarkRecordSerializer()).read(self._stream, self._read_as_numpy)

class BinaryBenchmarkSmallRecordWithOptionalsWriter(_binary.BinaryProtocolWriter, BenchmarkSmallRecordWithOptionalsWriterBase):
    """Binary writer for the BenchmarkSmallRecordWithOptionals protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        BenchmarkSmallRecordWithOptionalsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, BenchmarkSmallRecordWithOptionalsWriterBase.schema)

    def _write_small_record(self, value: collections.abc.Iterable[SimpleEncodingCounters]) -> None:
        _binary.StreamSerializer(_SimpleEncodingCountersSerializer()).write(self._stream, value)


class BinaryBenchmarkSmallRecordWithOptionalsReader(_binary.BinaryProtocolReader, BenchmarkSmallRecordWithOptionalsReaderBase):
    """Binary writer for the BenchmarkSmallRecordWithOptionals protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        BenchmarkSmallRecordWithOptionalsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, BenchmarkSmallRecordWithOptionalsReaderBase.schema)

    def _read_small_record(self) -> collections.abc.Iterable[SimpleEncodingCounters]:
        return _binary.StreamSerializer(_SimpleEncodingCountersSerializer()).read(self._stream, self._read_as_numpy)

class BinaryBenchmarkSimpleMrdWriter(_binary.BinaryProtocolWriter, BenchmarkSimpleMrdWriterBase):
    """Binary writer for the BenchmarkSimpleMrd protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        BenchmarkSimpleMrdWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, BenchmarkSimpleMrdWriterBase.schema)

    def _write_data(self, value: collections.abc.Iterable[(
        tuple[typing.Literal["SimpleAcquisition"], SimpleAcquisition]
        | tuple[typing.Literal["Image<float32>"], Image[np.float32]]
    )]) -> None:
        _binary.StreamSerializer(_binary.UnionSerializer([("SimpleAcquisition", _SimpleAcquisitionSerializer()), ("Image<float32>", _binary.NDArraySerializer(_binary.float32_serializer, 2))])).write(self._stream, value)


class BinaryBenchmarkSimpleMrdReader(_binary.BinaryProtocolReader, BenchmarkSimpleMrdReaderBase):
    """Binary writer for the BenchmarkSimpleMrd protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        BenchmarkSimpleMrdReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, BenchmarkSimpleMrdReaderBase.schema)

    def _read_data(self) -> collections.abc.Iterable[(
        tuple[typing.Literal["SimpleAcquisition"], SimpleAcquisition]
        | tuple[typing.Literal["Image<float32>"], Image[np.float32]]
    )]:
        return _binary.StreamSerializer(_binary.UnionSerializer([("SimpleAcquisition", _SimpleAcquisitionSerializer()), ("Image<float32>", _binary.NDArraySerializer(_binary.float32_serializer, 2))])).read(self._stream, self._read_as_numpy)

class BinaryScalarsWriter(_binary.BinaryProtocolWriter, ScalarsWriterBase):
    """Binary writer for the Scalars protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        ScalarsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, ScalarsWriterBase.schema)

    def _write_int_32(self, value: yardl.Int32) -> None:
        _binary.int32_serializer.write(self._stream, value)

    def _write_record(self, value: RecordWithPrimitives) -> None:
        _RecordWithPrimitivesSerializer().write(self._stream, value)


class BinaryScalarsReader(_binary.BinaryProtocolReader, ScalarsReaderBase):
    """Binary writer for the Scalars protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        ScalarsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, ScalarsReaderBase.schema)

    def _read_int_32(self) -> yardl.Int32:
        return _binary.int32_serializer.read(self._stream, self._read_as_numpy)

    def _read_record(self) -> RecordWithPrimitives:
        return _RecordWithPrimitivesSerializer().read(self._stream, self._read_as_numpy)

class BinaryScalarOptionalsWriter(_binary.BinaryProtocolWriter, ScalarOptionalsWriterBase):
    """Binary writer for the ScalarOptionals protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        ScalarOptionalsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, ScalarOptionalsWriterBase.schema)

    def _write_optional_int(self, value: yardl.Int32 | None) -> None:
        _binary.OptionalSerializer(_binary.int32_serializer).write(self._stream, value)

    def _write_optional_record(self, value: SimpleRecord | None) -> None:
        _binary.OptionalSerializer(_SimpleRecordSerializer()).write(self._stream, value)

    def _write_record_with_optional_fields(self, value: RecordWithOptionalFields) -> None:
        _RecordWithOptionalFieldsSerializer().write(self._stream, value)

    def _write_optional_record_with_optional_fields(self, value: RecordWithOptionalFields | None) -> None:
        _binary.OptionalSerializer(_RecordWithOptionalFieldsSerializer()).write(self._stream, value)


class BinaryScalarOptionalsReader(_binary.BinaryProtocolReader, ScalarOptionalsReaderBase):
    """Binary writer for the ScalarOptionals protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        ScalarOptionalsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, ScalarOptionalsReaderBase.schema)

    def _read_optional_int(self) -> yardl.Int32 | None:
        return _binary.OptionalSerializer(_binary.int32_serializer).read(self._stream, self._read_as_numpy)

    def _read_optional_record(self) -> SimpleRecord | None:
        return _binary.OptionalSerializer(_SimpleRecordSerializer()).read(self._stream, self._read_as_numpy)

    def _read_record_with_optional_fields(self) -> RecordWithOptionalFields:
        return _RecordWithOptionalFieldsSerializer().read(self._stream, self._read_as_numpy)

    def _read_optional_record_with_optional_fields(self) -> RecordWithOptionalFields | None:
        return _binary.OptionalSerializer(_RecordWithOptionalFieldsSerializer()).read(self._stream, self._read_as_numpy)

class BinaryNestedRecordsWriter(_binary.BinaryProtocolWriter, NestedRecordsWriterBase):
    """Binary writer for the NestedRecords protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        NestedRecordsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, NestedRecordsWriterBase.schema)

    def _write_tuple_with_records(self, value: TupleWithRecords) -> None:
        _TupleWithRecordsSerializer().write(self._stream, value)


class BinaryNestedRecordsReader(_binary.BinaryProtocolReader, NestedRecordsReaderBase):
    """Binary writer for the NestedRecords protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        NestedRecordsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, NestedRecordsReaderBase.schema)

    def _read_tuple_with_records(self) -> TupleWithRecords:
        return _TupleWithRecordsSerializer().read(self._stream, self._read_as_numpy)

class BinaryVlensWriter(_binary.BinaryProtocolWriter, VlensWriterBase):
    """Binary writer for the Vlens protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        VlensWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, VlensWriterBase.schema)

    def _write_int_vector(self, value: list[yardl.Int32]) -> None:
        _binary.VectorSerializer(_binary.int32_serializer).write(self._stream, value)

    def _write_complex_vector(self, value: list[yardl.ComplexFloat]) -> None:
        _binary.VectorSerializer(_binary.complexfloat32_serializer).write(self._stream, value)

    def _write_record_with_vlens(self, value: RecordWithVlens) -> None:
        _RecordWithVlensSerializer().write(self._stream, value)

    def _write_vlen_of_record_with_vlens(self, value: list[RecordWithVlens]) -> None:
        _binary.VectorSerializer(_RecordWithVlensSerializer()).write(self._stream, value)


class BinaryVlensReader(_binary.BinaryProtocolReader, VlensReaderBase):
    """Binary writer for the Vlens protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        VlensReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, VlensReaderBase.schema)

    def _read_int_vector(self) -> list[yardl.Int32]:
        return _binary.VectorSerializer(_binary.int32_serializer).read(self._stream, self._read_as_numpy)

    def _read_complex_vector(self) -> list[yardl.ComplexFloat]:
        return _binary.VectorSerializer(_binary.complexfloat32_serializer).read(self._stream, self._read_as_numpy)

    def _read_record_with_vlens(self) -> RecordWithVlens:
        return _RecordWithVlensSerializer().read(self._stream, self._read_as_numpy)

    def _read_vlen_of_record_with_vlens(self) -> list[RecordWithVlens]:
        return _binary.VectorSerializer(_RecordWithVlensSerializer()).read(self._stream, self._read_as_numpy)

class BinaryStringsWriter(_binary.BinaryProtocolWriter, StringsWriterBase):
    """Binary writer for the Strings protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        StringsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, StringsWriterBase.schema)

    def _write_single_string(self, value: str) -> None:
        _binary.string_serializer.write(self._stream, value)

    def _write_rec_with_string(self, value: RecordWithStrings) -> None:
        _RecordWithStringsSerializer().write(self._stream, value)


class BinaryStringsReader(_binary.BinaryProtocolReader, StringsReaderBase):
    """Binary writer for the Strings protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        StringsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, StringsReaderBase.schema)

    def _read_single_string(self) -> str:
        return _binary.string_serializer.read(self._stream, self._read_as_numpy)

    def _read_rec_with_string(self) -> RecordWithStrings:
        return _RecordWithStringsSerializer().read(self._stream, self._read_as_numpy)

class BinaryOptionalVectorsWriter(_binary.BinaryProtocolWriter, OptionalVectorsWriterBase):
    """Binary writer for the OptionalVectors protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        OptionalVectorsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, OptionalVectorsWriterBase.schema)

    def _write_record_with_optional_vector(self, value: RecordWithOptionalVector) -> None:
        _RecordWithOptionalVectorSerializer().write(self._stream, value)


class BinaryOptionalVectorsReader(_binary.BinaryProtocolReader, OptionalVectorsReaderBase):
    """Binary writer for the OptionalVectors protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        OptionalVectorsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, OptionalVectorsReaderBase.schema)

    def _read_record_with_optional_vector(self) -> RecordWithOptionalVector:
        return _RecordWithOptionalVectorSerializer().read(self._stream, self._read_as_numpy)

class BinaryFixedVectorsWriter(_binary.BinaryProtocolWriter, FixedVectorsWriterBase):
    """Binary writer for the FixedVectors protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        FixedVectorsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, FixedVectorsWriterBase.schema)

    def _write_fixed_int_vector(self, value: list[yardl.Int32]) -> None:
        _binary.FixedVectorSerializer(_binary.int32_serializer, 5).write(self._stream, value)

    def _write_fixed_simple_record_vector(self, value: list[SimpleRecord]) -> None:
        _binary.FixedVectorSerializer(_SimpleRecordSerializer(), 3).write(self._stream, value)

    def _write_fixed_record_with_vlens_vector(self, value: list[RecordWithVlens]) -> None:
        _binary.FixedVectorSerializer(_RecordWithVlensSerializer(), 2).write(self._stream, value)

    def _write_record_with_fixed_vectors(self, value: RecordWithFixedVectors) -> None:
        _RecordWithFixedVectorsSerializer().write(self._stream, value)


class BinaryFixedVectorsReader(_binary.BinaryProtocolReader, FixedVectorsReaderBase):
    """Binary writer for the FixedVectors protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        FixedVectorsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, FixedVectorsReaderBase.schema)

    def _read_fixed_int_vector(self) -> list[yardl.Int32]:
        return _binary.FixedVectorSerializer(_binary.int32_serializer, 5).read(self._stream, self._read_as_numpy)

    def _read_fixed_simple_record_vector(self) -> list[SimpleRecord]:
        return _binary.FixedVectorSerializer(_SimpleRecordSerializer(), 3).read(self._stream, self._read_as_numpy)

    def _read_fixed_record_with_vlens_vector(self) -> list[RecordWithVlens]:
        return _binary.FixedVectorSerializer(_RecordWithVlensSerializer(), 2).read(self._stream, self._read_as_numpy)

    def _read_record_with_fixed_vectors(self) -> RecordWithFixedVectors:
        return _RecordWithFixedVectorsSerializer().read(self._stream, self._read_as_numpy)

class BinaryStreamsWriter(_binary.BinaryProtocolWriter, StreamsWriterBase):
    """Binary writer for the Streams protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        StreamsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, StreamsWriterBase.schema)

    def _write_int_data(self, value: collections.abc.Iterable[yardl.Int32]) -> None:
        _binary.StreamSerializer(_binary.int32_serializer).write(self._stream, value)

    def _write_optional_int_data(self, value: collections.abc.Iterable[yardl.Int32 | None]) -> None:
        _binary.StreamSerializer(_binary.OptionalSerializer(_binary.int32_serializer)).write(self._stream, value)

    def _write_record_with_optional_vector_data(self, value: collections.abc.Iterable[RecordWithOptionalVector]) -> None:
        _binary.StreamSerializer(_RecordWithOptionalVectorSerializer()).write(self._stream, value)

    def _write_fixed_vector(self, value: collections.abc.Iterable[list[yardl.Int32]]) -> None:
        _binary.StreamSerializer(_binary.FixedVectorSerializer(_binary.int32_serializer, 3)).write(self._stream, value)


class BinaryStreamsReader(_binary.BinaryProtocolReader, StreamsReaderBase):
    """Binary writer for the Streams protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        StreamsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, StreamsReaderBase.schema)

    def _read_int_data(self) -> collections.abc.Iterable[yardl.Int32]:
        return _binary.StreamSerializer(_binary.int32_serializer).read(self._stream, self._read_as_numpy)

    def _read_optional_int_data(self) -> collections.abc.Iterable[yardl.Int32 | None]:
        return _binary.StreamSerializer(_binary.OptionalSerializer(_binary.int32_serializer)).read(self._stream, self._read_as_numpy)

    def _read_record_with_optional_vector_data(self) -> collections.abc.Iterable[RecordWithOptionalVector]:
        return _binary.StreamSerializer(_RecordWithOptionalVectorSerializer()).read(self._stream, self._read_as_numpy)

    def _read_fixed_vector(self) -> collections.abc.Iterable[list[yardl.Int32]]:
        return _binary.StreamSerializer(_binary.FixedVectorSerializer(_binary.int32_serializer, 3)).read(self._stream, self._read_as_numpy)

class BinaryFixedArraysWriter(_binary.BinaryProtocolWriter, FixedArraysWriterBase):
    """Binary writer for the FixedArrays protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        FixedArraysWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, FixedArraysWriterBase.schema)

    def _write_ints(self, value: npt.NDArray[np.int32]) -> None:
        _binary.FixedNDArraySerializer(_binary.int32_serializer, (2, 3,)).write(self._stream, value)

    def _write_fixed_simple_record_array(self, value: npt.NDArray[np.void]) -> None:
        _binary.FixedNDArraySerializer(_SimpleRecordSerializer(), (3, 2,)).write(self._stream, value)

    def _write_fixed_record_with_vlens_array(self, value: npt.NDArray[np.void]) -> None:
        _binary.FixedNDArraySerializer(_RecordWithVlensSerializer(), (2, 2,)).write(self._stream, value)

    def _write_record_with_fixed_arrays(self, value: RecordWithFixedArrays) -> None:
        _RecordWithFixedArraysSerializer().write(self._stream, value)

    def _write_named_array(self, value: NamedFixedNDArray) -> None:
        _binary.FixedNDArraySerializer(_binary.int32_serializer, (2, 4,)).write(self._stream, value)


class BinaryFixedArraysReader(_binary.BinaryProtocolReader, FixedArraysReaderBase):
    """Binary writer for the FixedArrays protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        FixedArraysReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, FixedArraysReaderBase.schema)

    def _read_ints(self) -> npt.NDArray[np.int32]:
        return _binary.FixedNDArraySerializer(_binary.int32_serializer, (2, 3,)).read(self._stream, self._read_as_numpy)

    def _read_fixed_simple_record_array(self) -> npt.NDArray[np.void]:
        return _binary.FixedNDArraySerializer(_SimpleRecordSerializer(), (3, 2,)).read(self._stream, self._read_as_numpy)

    def _read_fixed_record_with_vlens_array(self) -> npt.NDArray[np.void]:
        return _binary.FixedNDArraySerializer(_RecordWithVlensSerializer(), (2, 2,)).read(self._stream, self._read_as_numpy)

    def _read_record_with_fixed_arrays(self) -> RecordWithFixedArrays:
        return _RecordWithFixedArraysSerializer().read(self._stream, self._read_as_numpy)

    def _read_named_array(self) -> NamedFixedNDArray:
        return _binary.FixedNDArraySerializer(_binary.int32_serializer, (2, 4,)).read(self._stream, self._read_as_numpy)

class BinaryNDArraysWriter(_binary.BinaryProtocolWriter, NDArraysWriterBase):
    """Binary writer for the NDArrays protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        NDArraysWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, NDArraysWriterBase.schema)

    def _write_ints(self, value: npt.NDArray[np.int32]) -> None:
        _binary.NDArraySerializer(_binary.int32_serializer, 2).write(self._stream, value)

    def _write_simple_record_array(self, value: npt.NDArray[np.void]) -> None:
        _binary.NDArraySerializer(_SimpleRecordSerializer(), 2).write(self._stream, value)

    def _write_record_with_vlens_array(self, value: npt.NDArray[np.void]) -> None:
        _binary.NDArraySerializer(_RecordWithVlensSerializer(), 2).write(self._stream, value)

    def _write_record_with_nd_arrays(self, value: RecordWithNDArrays) -> None:
        _RecordWithNDArraysSerializer().write(self._stream, value)

    def _write_named_array(self, value: NamedNDArray) -> None:
        _binary.NDArraySerializer(_binary.int32_serializer, 2).write(self._stream, value)


class BinaryNDArraysReader(_binary.BinaryProtocolReader, NDArraysReaderBase):
    """Binary writer for the NDArrays protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        NDArraysReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, NDArraysReaderBase.schema)

    def _read_ints(self) -> npt.NDArray[np.int32]:
        return _binary.NDArraySerializer(_binary.int32_serializer, 2).read(self._stream, self._read_as_numpy)

    def _read_simple_record_array(self) -> npt.NDArray[np.void]:
        return _binary.NDArraySerializer(_SimpleRecordSerializer(), 2).read(self._stream, self._read_as_numpy)

    def _read_record_with_vlens_array(self) -> npt.NDArray[np.void]:
        return _binary.NDArraySerializer(_RecordWithVlensSerializer(), 2).read(self._stream, self._read_as_numpy)

    def _read_record_with_nd_arrays(self) -> RecordWithNDArrays:
        return _RecordWithNDArraysSerializer().read(self._stream, self._read_as_numpy)

    def _read_named_array(self) -> NamedNDArray:
        return _binary.NDArraySerializer(_binary.int32_serializer, 2).read(self._stream, self._read_as_numpy)

class BinaryNDArraysSingleDimensionWriter(_binary.BinaryProtocolWriter, NDArraysSingleDimensionWriterBase):
    """Binary writer for the NDArraysSingleDimension protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        NDArraysSingleDimensionWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, NDArraysSingleDimensionWriterBase.schema)

    def _write_ints(self, value: npt.NDArray[np.int32]) -> None:
        _binary.NDArraySerializer(_binary.int32_serializer, 1).write(self._stream, value)

    def _write_simple_record_array(self, value: npt.NDArray[np.void]) -> None:
        _binary.NDArraySerializer(_SimpleRecordSerializer(), 1).write(self._stream, value)

    def _write_record_with_vlens_array(self, value: npt.NDArray[np.void]) -> None:
        _binary.NDArraySerializer(_RecordWithVlensSerializer(), 1).write(self._stream, value)

    def _write_record_with_nd_arrays(self, value: RecordWithNDArraysSingleDimension) -> None:
        _RecordWithNDArraysSingleDimensionSerializer().write(self._stream, value)


class BinaryNDArraysSingleDimensionReader(_binary.BinaryProtocolReader, NDArraysSingleDimensionReaderBase):
    """Binary writer for the NDArraysSingleDimension protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        NDArraysSingleDimensionReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, NDArraysSingleDimensionReaderBase.schema)

    def _read_ints(self) -> npt.NDArray[np.int32]:
        return _binary.NDArraySerializer(_binary.int32_serializer, 1).read(self._stream, self._read_as_numpy)

    def _read_simple_record_array(self) -> npt.NDArray[np.void]:
        return _binary.NDArraySerializer(_SimpleRecordSerializer(), 1).read(self._stream, self._read_as_numpy)

    def _read_record_with_vlens_array(self) -> npt.NDArray[np.void]:
        return _binary.NDArraySerializer(_RecordWithVlensSerializer(), 1).read(self._stream, self._read_as_numpy)

    def _read_record_with_nd_arrays(self) -> RecordWithNDArraysSingleDimension:
        return _RecordWithNDArraysSingleDimensionSerializer().read(self._stream, self._read_as_numpy)

class BinaryDynamicNDArraysWriter(_binary.BinaryProtocolWriter, DynamicNDArraysWriterBase):
    """Binary writer for the DynamicNDArrays protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        DynamicNDArraysWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, DynamicNDArraysWriterBase.schema)

    def _write_ints(self, value: npt.NDArray[np.int32]) -> None:
        _binary.DynamicNDArraySerializer(_binary.int32_serializer).write(self._stream, value)

    def _write_simple_record_array(self, value: npt.NDArray[np.void]) -> None:
        _binary.DynamicNDArraySerializer(_SimpleRecordSerializer()).write(self._stream, value)

    def _write_record_with_vlens_array(self, value: npt.NDArray[np.void]) -> None:
        _binary.DynamicNDArraySerializer(_RecordWithVlensSerializer()).write(self._stream, value)

    def _write_record_with_dynamic_nd_arrays(self, value: RecordWithDynamicNDArrays) -> None:
        _RecordWithDynamicNDArraysSerializer().write(self._stream, value)


class BinaryDynamicNDArraysReader(_binary.BinaryProtocolReader, DynamicNDArraysReaderBase):
    """Binary writer for the DynamicNDArrays protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        DynamicNDArraysReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, DynamicNDArraysReaderBase.schema)

    def _read_ints(self) -> npt.NDArray[np.int32]:
        return _binary.DynamicNDArraySerializer(_binary.int32_serializer).read(self._stream, self._read_as_numpy)

    def _read_simple_record_array(self) -> npt.NDArray[np.void]:
        return _binary.DynamicNDArraySerializer(_SimpleRecordSerializer()).read(self._stream, self._read_as_numpy)

    def _read_record_with_vlens_array(self) -> npt.NDArray[np.void]:
        return _binary.DynamicNDArraySerializer(_RecordWithVlensSerializer()).read(self._stream, self._read_as_numpy)

    def _read_record_with_dynamic_nd_arrays(self) -> RecordWithDynamicNDArrays:
        return _RecordWithDynamicNDArraysSerializer().read(self._stream, self._read_as_numpy)

class BinaryMapsWriter(_binary.BinaryProtocolWriter, MapsWriterBase):
    """Binary writer for the Maps protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        MapsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, MapsWriterBase.schema)

    def _write_string_to_int(self, value: dict[str, yardl.Int32]) -> None:
        _binary.MapSerializer(_binary.string_serializer, _binary.int32_serializer).write(self._stream, value)

    def _write_string_to_union(self, value: dict[str, (
        tuple[typing.Literal["string"], str]
        | tuple[typing.Literal["int32"], yardl.Int32]
    )]) -> None:
        _binary.MapSerializer(_binary.string_serializer, _binary.UnionSerializer([("string", _binary.string_serializer), ("int32", _binary.int32_serializer)])).write(self._stream, value)

    def _write_aliased_generic(self, value: AliasedMap[str, yardl.Int32]) -> None:
        _binary.MapSerializer(_binary.string_serializer, _binary.int32_serializer).write(self._stream, value)


class BinaryMapsReader(_binary.BinaryProtocolReader, MapsReaderBase):
    """Binary writer for the Maps protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        MapsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, MapsReaderBase.schema)

    def _read_string_to_int(self) -> dict[str, yardl.Int32]:
        return _binary.MapSerializer(_binary.string_serializer, _binary.int32_serializer).read(self._stream, self._read_as_numpy)

    def _read_string_to_union(self) -> dict[str, (
        tuple[typing.Literal["string"], str]
        | tuple[typing.Literal["int32"], yardl.Int32]
    )]:
        return _binary.MapSerializer(_binary.string_serializer, _binary.UnionSerializer([("string", _binary.string_serializer), ("int32", _binary.int32_serializer)])).read(self._stream, self._read_as_numpy)

    def _read_aliased_generic(self) -> AliasedMap[str, yardl.Int32]:
        return _binary.MapSerializer(_binary.string_serializer, _binary.int32_serializer).read(self._stream, self._read_as_numpy)

class BinaryUnionsWriter(_binary.BinaryProtocolWriter, UnionsWriterBase):
    """Binary writer for the Unions protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        UnionsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, UnionsWriterBase.schema)

    def _write_int_or_simple_record(self, value: (
        tuple[typing.Literal["int32"], yardl.Int32]
        | tuple[typing.Literal["SimpleRecord"], SimpleRecord]
    )) -> None:
        _binary.UnionSerializer([("int32", _binary.int32_serializer), ("SimpleRecord", _SimpleRecordSerializer())]).write(self._stream, value)

    def _write_int_or_record_with_vlens(self, value: (
        tuple[typing.Literal["int32"], yardl.Int32]
        | tuple[typing.Literal["RecordWithVlens"], RecordWithVlens]
    )) -> None:
        _binary.UnionSerializer([("int32", _binary.int32_serializer), ("RecordWithVlens", _RecordWithVlensSerializer())]).write(self._stream, value)

    def _write_monosotate_or_int_or_simple_record(self, value: (
        tuple[typing.Literal["int32"], yardl.Int32]
        | tuple[typing.Literal["SimpleRecord"], SimpleRecord]
        | None
    )) -> None:
        _binary.UnionSerializer([None, ("int32", _binary.int32_serializer), ("SimpleRecord", _SimpleRecordSerializer())]).write(self._stream, value)

    def _write_record_with_unions(self, value: RecordWithUnions) -> None:
        _RecordWithUnionsSerializer().write(self._stream, value)


class BinaryUnionsReader(_binary.BinaryProtocolReader, UnionsReaderBase):
    """Binary writer for the Unions protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        UnionsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, UnionsReaderBase.schema)

    def _read_int_or_simple_record(self) -> (
        tuple[typing.Literal["int32"], yardl.Int32]
        | tuple[typing.Literal["SimpleRecord"], SimpleRecord]
    ):
        return _binary.UnionSerializer([("int32", _binary.int32_serializer), ("SimpleRecord", _SimpleRecordSerializer())]).read(self._stream, self._read_as_numpy)

    def _read_int_or_record_with_vlens(self) -> (
        tuple[typing.Literal["int32"], yardl.Int32]
        | tuple[typing.Literal["RecordWithVlens"], RecordWithVlens]
    ):
        return _binary.UnionSerializer([("int32", _binary.int32_serializer), ("RecordWithVlens", _RecordWithVlensSerializer())]).read(self._stream, self._read_as_numpy)

    def _read_monosotate_or_int_or_simple_record(self) -> (
        tuple[typing.Literal["int32"], yardl.Int32]
        | tuple[typing.Literal["SimpleRecord"], SimpleRecord]
        | None
    ):
        return _binary.UnionSerializer([None, ("int32", _binary.int32_serializer), ("SimpleRecord", _SimpleRecordSerializer())]).read(self._stream, self._read_as_numpy)

    def _read_record_with_unions(self) -> RecordWithUnions:
        return _RecordWithUnionsSerializer().read(self._stream, self._read_as_numpy)

class BinaryStreamsOfUnionsWriter(_binary.BinaryProtocolWriter, StreamsOfUnionsWriterBase):
    """Binary writer for the StreamsOfUnions protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        StreamsOfUnionsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, StreamsOfUnionsWriterBase.schema)

    def _write_int_or_simple_record(self, value: collections.abc.Iterable[(
        tuple[typing.Literal["int32"], yardl.Int32]
        | tuple[typing.Literal["SimpleRecord"], SimpleRecord]
    )]) -> None:
        _binary.StreamSerializer(_binary.UnionSerializer([("int32", _binary.int32_serializer), ("SimpleRecord", _SimpleRecordSerializer())])).write(self._stream, value)

    def _write_nullable_int_or_simple_record(self, value: collections.abc.Iterable[(
        tuple[typing.Literal["int32"], yardl.Int32]
        | tuple[typing.Literal["SimpleRecord"], SimpleRecord]
        | None
    )]) -> None:
        _binary.StreamSerializer(_binary.UnionSerializer([None, ("int32", _binary.int32_serializer), ("SimpleRecord", _SimpleRecordSerializer())])).write(self._stream, value)


class BinaryStreamsOfUnionsReader(_binary.BinaryProtocolReader, StreamsOfUnionsReaderBase):
    """Binary writer for the StreamsOfUnions protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        StreamsOfUnionsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, StreamsOfUnionsReaderBase.schema)

    def _read_int_or_simple_record(self) -> collections.abc.Iterable[(
        tuple[typing.Literal["int32"], yardl.Int32]
        | tuple[typing.Literal["SimpleRecord"], SimpleRecord]
    )]:
        return _binary.StreamSerializer(_binary.UnionSerializer([("int32", _binary.int32_serializer), ("SimpleRecord", _SimpleRecordSerializer())])).read(self._stream, self._read_as_numpy)

    def _read_nullable_int_or_simple_record(self) -> collections.abc.Iterable[(
        tuple[typing.Literal["int32"], yardl.Int32]
        | tuple[typing.Literal["SimpleRecord"], SimpleRecord]
        | None
    )]:
        return _binary.StreamSerializer(_binary.UnionSerializer([None, ("int32", _binary.int32_serializer), ("SimpleRecord", _SimpleRecordSerializer())])).read(self._stream, self._read_as_numpy)

class BinaryEnumsWriter(_binary.BinaryProtocolWriter, EnumsWriterBase):
    """Binary writer for the Enums protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        EnumsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, EnumsWriterBase.schema)

    def _write_single(self, value: Fruits) -> None:
        _binary.EnumSerializer(_binary.int32_serializer, Fruits).write(self._stream, value)

    def _write_vec(self, value: list[Fruits]) -> None:
        _binary.VectorSerializer(_binary.EnumSerializer(_binary.int32_serializer, Fruits)).write(self._stream, value)

    def _write_size(self, value: SizeBasedEnum) -> None:
        _binary.EnumSerializer(_binary.size_serializer, SizeBasedEnum).write(self._stream, value)


class BinaryEnumsReader(_binary.BinaryProtocolReader, EnumsReaderBase):
    """Binary writer for the Enums protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        EnumsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, EnumsReaderBase.schema)

    def _read_single(self) -> Fruits:
        return _binary.EnumSerializer(_binary.int32_serializer, Fruits).read(self._stream, self._read_as_numpy)

    def _read_vec(self) -> list[Fruits]:
        return _binary.VectorSerializer(_binary.EnumSerializer(_binary.int32_serializer, Fruits)).read(self._stream, self._read_as_numpy)

    def _read_size(self) -> SizeBasedEnum:
        return _binary.EnumSerializer(_binary.size_serializer, SizeBasedEnum).read(self._stream, self._read_as_numpy)

class BinaryFlagsWriter(_binary.BinaryProtocolWriter, FlagsWriterBase):
    """Binary writer for the Flags protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        FlagsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, FlagsWriterBase.schema)

    def _write_days(self, value: collections.abc.Iterable[DaysOfWeek]) -> None:
        _binary.StreamSerializer(_binary.EnumSerializer(_binary.int32_serializer, DaysOfWeek)).write(self._stream, value)

    def _write_formats(self, value: collections.abc.Iterable[TextFormat]) -> None:
        _binary.StreamSerializer(_binary.EnumSerializer(_binary.uint64_serializer, TextFormat)).write(self._stream, value)


class BinaryFlagsReader(_binary.BinaryProtocolReader, FlagsReaderBase):
    """Binary writer for the Flags protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        FlagsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, FlagsReaderBase.schema)

    def _read_days(self) -> collections.abc.Iterable[DaysOfWeek]:
        return _binary.StreamSerializer(_binary.EnumSerializer(_binary.int32_serializer, DaysOfWeek)).read(self._stream, self._read_as_numpy)

    def _read_formats(self) -> collections.abc.Iterable[TextFormat]:
        return _binary.StreamSerializer(_binary.EnumSerializer(_binary.uint64_serializer, TextFormat)).read(self._stream, self._read_as_numpy)

class BinaryStateTestWriter(_binary.BinaryProtocolWriter, StateTestWriterBase):
    """Binary writer for the StateTest protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        StateTestWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, StateTestWriterBase.schema)

    def _write_an_int(self, value: yardl.Int32) -> None:
        _binary.int32_serializer.write(self._stream, value)

    def _write_a_stream(self, value: collections.abc.Iterable[yardl.Int32]) -> None:
        _binary.StreamSerializer(_binary.int32_serializer).write(self._stream, value)

    def _write_another_int(self, value: yardl.Int32) -> None:
        _binary.int32_serializer.write(self._stream, value)


class BinaryStateTestReader(_binary.BinaryProtocolReader, StateTestReaderBase):
    """Binary writer for the StateTest protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        StateTestReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, StateTestReaderBase.schema)

    def _read_an_int(self) -> yardl.Int32:
        return _binary.int32_serializer.read(self._stream, self._read_as_numpy)

    def _read_a_stream(self) -> collections.abc.Iterable[yardl.Int32]:
        return _binary.StreamSerializer(_binary.int32_serializer).read(self._stream, self._read_as_numpy)

    def _read_another_int(self) -> yardl.Int32:
        return _binary.int32_serializer.read(self._stream, self._read_as_numpy)

class BinarySimpleGenericsWriter(_binary.BinaryProtocolWriter, SimpleGenericsWriterBase):
    """Binary writer for the SimpleGenerics protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        SimpleGenericsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, SimpleGenericsWriterBase.schema)

    def _write_float_image(self, value: Image[np.float32]) -> None:
        _binary.NDArraySerializer(_binary.float32_serializer, 2).write(self._stream, value)

    def _write_int_image(self, value: Image[np.int32]) -> None:
        _binary.NDArraySerializer(_binary.int32_serializer, 2).write(self._stream, value)

    def _write_int_image_alternate_syntax(self, value: Image[np.int32]) -> None:
        _binary.NDArraySerializer(_binary.int32_serializer, 2).write(self._stream, value)

    def _write_string_image(self, value: Image[np.object_]) -> None:
        _binary.NDArraySerializer(_binary.string_serializer, 2).write(self._stream, value)

    def _write_int_float_tuple(self, value: MyTuple[yardl.Int32, yardl.Float32]) -> None:
        _MyTupleSerializer(_binary.int32_serializer, _binary.float32_serializer).write(self._stream, value)

    def _write_float_float_tuple(self, value: MyTuple[yardl.Float32, yardl.Float32]) -> None:
        _MyTupleSerializer(_binary.float32_serializer, _binary.float32_serializer).write(self._stream, value)

    def _write_int_float_tuple_alternate_syntax(self, value: MyTuple[yardl.Int32, yardl.Float32]) -> None:
        _MyTupleSerializer(_binary.int32_serializer, _binary.float32_serializer).write(self._stream, value)

    def _write_int_string_tuple(self, value: MyTuple[yardl.Int32, str]) -> None:
        _MyTupleSerializer(_binary.int32_serializer, _binary.string_serializer).write(self._stream, value)

    def _write_stream_of_type_variants(self, value: collections.abc.Iterable[(
        tuple[typing.Literal["Image<float32>"], Image[np.float32]]
        | tuple[typing.Literal["Image<float64>"], Image[np.float64]]
    )]) -> None:
        _binary.StreamSerializer(_binary.UnionSerializer([("Image<float32>", _binary.NDArraySerializer(_binary.float32_serializer, 2)), ("Image<float64>", _binary.NDArraySerializer(_binary.float64_serializer, 2))])).write(self._stream, value)


class BinarySimpleGenericsReader(_binary.BinaryProtocolReader, SimpleGenericsReaderBase):
    """Binary writer for the SimpleGenerics protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        SimpleGenericsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, SimpleGenericsReaderBase.schema)

    def _read_float_image(self) -> Image[np.float32]:
        return _binary.NDArraySerializer(_binary.float32_serializer, 2).read(self._stream, self._read_as_numpy)

    def _read_int_image(self) -> Image[np.int32]:
        return _binary.NDArraySerializer(_binary.int32_serializer, 2).read(self._stream, self._read_as_numpy)

    def _read_int_image_alternate_syntax(self) -> Image[np.int32]:
        return _binary.NDArraySerializer(_binary.int32_serializer, 2).read(self._stream, self._read_as_numpy)

    def _read_string_image(self) -> Image[np.object_]:
        return _binary.NDArraySerializer(_binary.string_serializer, 2).read(self._stream, self._read_as_numpy)

    def _read_int_float_tuple(self) -> MyTuple[yardl.Int32, yardl.Float32]:
        return _MyTupleSerializer(_binary.int32_serializer, _binary.float32_serializer).read(self._stream, self._read_as_numpy)

    def _read_float_float_tuple(self) -> MyTuple[yardl.Float32, yardl.Float32]:
        return _MyTupleSerializer(_binary.float32_serializer, _binary.float32_serializer).read(self._stream, self._read_as_numpy)

    def _read_int_float_tuple_alternate_syntax(self) -> MyTuple[yardl.Int32, yardl.Float32]:
        return _MyTupleSerializer(_binary.int32_serializer, _binary.float32_serializer).read(self._stream, self._read_as_numpy)

    def _read_int_string_tuple(self) -> MyTuple[yardl.Int32, str]:
        return _MyTupleSerializer(_binary.int32_serializer, _binary.string_serializer).read(self._stream, self._read_as_numpy)

    def _read_stream_of_type_variants(self) -> collections.abc.Iterable[(
        tuple[typing.Literal["Image<float32>"], Image[np.float32]]
        | tuple[typing.Literal["Image<float64>"], Image[np.float64]]
    )]:
        return _binary.StreamSerializer(_binary.UnionSerializer([("Image<float32>", _binary.NDArraySerializer(_binary.float32_serializer, 2)), ("Image<float64>", _binary.NDArraySerializer(_binary.float64_serializer, 2))])).read(self._stream, self._read_as_numpy)

class BinaryAdvancedGenericsWriter(_binary.BinaryProtocolWriter, AdvancedGenericsWriterBase):
    """Binary writer for the AdvancedGenerics protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        AdvancedGenericsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, AdvancedGenericsWriterBase.schema)

    def _write_int_image_image(self, value: Image[np.object_]) -> None:
        _binary.NDArraySerializer(_binary.NDArraySerializer(_binary.float32_serializer, 2), 2).write(self._stream, value)

    def _write_generic_record_1(self, value: GenericRecord[yardl.Int32, str, np.object_]) -> None:
        _GenericRecordSerializer(_binary.int32_serializer, _binary.string_serializer).write(self._stream, value)

    def _write_tuple_of_optionals(self, value: MyTuple[yardl.Int32 | None, str | None]) -> None:
        _MyTupleSerializer(_binary.OptionalSerializer(_binary.int32_serializer), _binary.OptionalSerializer(_binary.string_serializer)).write(self._stream, value)

    def _write_tuple_of_optionals_alternate_syntax(self, value: MyTuple[yardl.Int32 | None, str | None]) -> None:
        _MyTupleSerializer(_binary.OptionalSerializer(_binary.int32_serializer), _binary.OptionalSerializer(_binary.string_serializer)).write(self._stream, value)

    def _write_tuple_of_vectors(self, value: MyTuple[list[yardl.Int32], list[yardl.Float32]]) -> None:
        _MyTupleSerializer(_binary.VectorSerializer(_binary.int32_serializer), _binary.VectorSerializer(_binary.float32_serializer)).write(self._stream, value)


class BinaryAdvancedGenericsReader(_binary.BinaryProtocolReader, AdvancedGenericsReaderBase):
    """Binary writer for the AdvancedGenerics protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        AdvancedGenericsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, AdvancedGenericsReaderBase.schema)

    def _read_int_image_image(self) -> Image[np.object_]:
        return _binary.NDArraySerializer(_binary.NDArraySerializer(_binary.float32_serializer, 2), 2).read(self._stream, self._read_as_numpy)

    def _read_generic_record_1(self) -> GenericRecord[yardl.Int32, str, np.object_]:
        return _GenericRecordSerializer(_binary.int32_serializer, _binary.string_serializer).read(self._stream, self._read_as_numpy)

    def _read_tuple_of_optionals(self) -> MyTuple[yardl.Int32 | None, str | None]:
        return _MyTupleSerializer(_binary.OptionalSerializer(_binary.int32_serializer), _binary.OptionalSerializer(_binary.string_serializer)).read(self._stream, self._read_as_numpy)

    def _read_tuple_of_optionals_alternate_syntax(self) -> MyTuple[yardl.Int32 | None, str | None]:
        return _MyTupleSerializer(_binary.OptionalSerializer(_binary.int32_serializer), _binary.OptionalSerializer(_binary.string_serializer)).read(self._stream, self._read_as_numpy)

    def _read_tuple_of_vectors(self) -> MyTuple[list[yardl.Int32], list[yardl.Float32]]:
        return _MyTupleSerializer(_binary.VectorSerializer(_binary.int32_serializer), _binary.VectorSerializer(_binary.float32_serializer)).read(self._stream, self._read_as_numpy)

class BinaryAliasesWriter(_binary.BinaryProtocolWriter, AliasesWriterBase):
    """Binary writer for the Aliases protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        AliasesWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, AliasesWriterBase.schema)

    def _write_aliased_string(self, value: AliasedString) -> None:
        _binary.string_serializer.write(self._stream, value)

    def _write_aliased_enum(self, value: AliasedEnum) -> None:
        _binary.EnumSerializer(_binary.int32_serializer, Fruits).write(self._stream, value)

    def _write_aliased_open_generic(self, value: AliasedOpenGeneric[AliasedString, AliasedEnum]) -> None:
        _MyTupleSerializer(_binary.string_serializer, _binary.EnumSerializer(_binary.int32_serializer, Fruits)).write(self._stream, value)

    def _write_aliased_closed_generic(self, value: AliasedClosedGeneric) -> None:
        _MyTupleSerializer(_binary.string_serializer, _binary.EnumSerializer(_binary.int32_serializer, Fruits)).write(self._stream, value)

    def _write_aliased_optional(self, value: AliasedOptional) -> None:
        _binary.OptionalSerializer(_binary.int32_serializer).write(self._stream, value)

    def _write_aliased_generic_optional(self, value: AliasedGenericOptional[yardl.Float32]) -> None:
        _binary.OptionalSerializer(_binary.float32_serializer).write(self._stream, value)

    def _write_aliased_generic_union_2(self, value: AliasedGenericUnion2[AliasedString, AliasedEnum]) -> None:
        _binary.UnionSerializer([("T1", _binary.string_serializer), ("T2", _binary.EnumSerializer(_binary.int32_serializer, Fruits))]).write(self._stream, value)

    def _write_aliased_generic_vector(self, value: AliasedGenericVector[yardl.Float32]) -> None:
        _binary.VectorSerializer(_binary.float32_serializer).write(self._stream, value)

    def _write_aliased_generic_fixed_vector(self, value: AliasedGenericFixedVector[yardl.Float32]) -> None:
        _binary.FixedVectorSerializer(_binary.float32_serializer, 3).write(self._stream, value)

    def _write_stream_of_aliased_generic_union_2(self, value: collections.abc.Iterable[AliasedGenericUnion2[AliasedString, AliasedEnum]]) -> None:
        _binary.StreamSerializer(_binary.UnionSerializer([("T1", _binary.string_serializer), ("T2", _binary.EnumSerializer(_binary.int32_serializer, Fruits))])).write(self._stream, value)


class BinaryAliasesReader(_binary.BinaryProtocolReader, AliasesReaderBase):
    """Binary writer for the Aliases protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        AliasesReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, AliasesReaderBase.schema)

    def _read_aliased_string(self) -> AliasedString:
        return _binary.string_serializer.read(self._stream, self._read_as_numpy)

    def _read_aliased_enum(self) -> AliasedEnum:
        return _binary.EnumSerializer(_binary.int32_serializer, Fruits).read(self._stream, self._read_as_numpy)

    def _read_aliased_open_generic(self) -> AliasedOpenGeneric[AliasedString, AliasedEnum]:
        return _MyTupleSerializer(_binary.string_serializer, _binary.EnumSerializer(_binary.int32_serializer, Fruits)).read(self._stream, self._read_as_numpy)

    def _read_aliased_closed_generic(self) -> AliasedClosedGeneric:
        return _MyTupleSerializer(_binary.string_serializer, _binary.EnumSerializer(_binary.int32_serializer, Fruits)).read(self._stream, self._read_as_numpy)

    def _read_aliased_optional(self) -> AliasedOptional:
        return _binary.OptionalSerializer(_binary.int32_serializer).read(self._stream, self._read_as_numpy)

    def _read_aliased_generic_optional(self) -> AliasedGenericOptional[yardl.Float32]:
        return _binary.OptionalSerializer(_binary.float32_serializer).read(self._stream, self._read_as_numpy)

    def _read_aliased_generic_union_2(self) -> AliasedGenericUnion2[AliasedString, AliasedEnum]:
        return _binary.UnionSerializer([("T1", _binary.string_serializer), ("T2", _binary.EnumSerializer(_binary.int32_serializer, Fruits))]).read(self._stream, self._read_as_numpy)

    def _read_aliased_generic_vector(self) -> AliasedGenericVector[yardl.Float32]:
        return _binary.VectorSerializer(_binary.float32_serializer).read(self._stream, self._read_as_numpy)

    def _read_aliased_generic_fixed_vector(self) -> AliasedGenericFixedVector[yardl.Float32]:
        return _binary.FixedVectorSerializer(_binary.float32_serializer, 3).read(self._stream, self._read_as_numpy)

    def _read_stream_of_aliased_generic_union_2(self) -> collections.abc.Iterable[AliasedGenericUnion2[AliasedString, AliasedEnum]]:
        return _binary.StreamSerializer(_binary.UnionSerializer([("T1", _binary.string_serializer), ("T2", _binary.EnumSerializer(_binary.int32_serializer, Fruits))])).read(self._stream, self._read_as_numpy)

class BinaryStreamsOfAliasedUnionsWriter(_binary.BinaryProtocolWriter, StreamsOfAliasedUnionsWriterBase):
    """Binary writer for the StreamsOfAliasedUnions protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        StreamsOfAliasedUnionsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, StreamsOfAliasedUnionsWriterBase.schema)

    def _write_int_or_simple_record(self, value: collections.abc.Iterable[AliasedIntOrSimpleRecord]) -> None:
        _binary.StreamSerializer(_binary.UnionSerializer([("int32", _binary.int32_serializer), ("SimpleRecord", _SimpleRecordSerializer())])).write(self._stream, value)

    def _write_nullable_int_or_simple_record(self, value: collections.abc.Iterable[AliasedNullableIntSimpleRecord]) -> None:
        _binary.StreamSerializer(_binary.UnionSerializer([None, ("int32", _binary.int32_serializer), ("SimpleRecord", _SimpleRecordSerializer())])).write(self._stream, value)


class BinaryStreamsOfAliasedUnionsReader(_binary.BinaryProtocolReader, StreamsOfAliasedUnionsReaderBase):
    """Binary writer for the StreamsOfAliasedUnions protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        StreamsOfAliasedUnionsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, StreamsOfAliasedUnionsReaderBase.schema)

    def _read_int_or_simple_record(self) -> collections.abc.Iterable[AliasedIntOrSimpleRecord]:
        return _binary.StreamSerializer(_binary.UnionSerializer([("int32", _binary.int32_serializer), ("SimpleRecord", _SimpleRecordSerializer())])).read(self._stream, self._read_as_numpy)

    def _read_nullable_int_or_simple_record(self) -> collections.abc.Iterable[AliasedNullableIntSimpleRecord]:
        return _binary.StreamSerializer(_binary.UnionSerializer([None, ("int32", _binary.int32_serializer), ("SimpleRecord", _SimpleRecordSerializer())])).read(self._stream, self._read_as_numpy)

class BinaryProtocolWithComputedFieldsWriter(_binary.BinaryProtocolWriter, ProtocolWithComputedFieldsWriterBase):
    """Binary writer for the ProtocolWithComputedFields protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        ProtocolWithComputedFieldsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, ProtocolWithComputedFieldsWriterBase.schema)

    def _write_record_with_computed_fields(self, value: RecordWithComputedFields) -> None:
        _RecordWithComputedFieldsSerializer().write(self._stream, value)


class BinaryProtocolWithComputedFieldsReader(_binary.BinaryProtocolReader, ProtocolWithComputedFieldsReaderBase):
    """Binary writer for the ProtocolWithComputedFields protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        ProtocolWithComputedFieldsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, ProtocolWithComputedFieldsReaderBase.schema)

    def _read_record_with_computed_fields(self) -> RecordWithComputedFields:
        return _RecordWithComputedFieldsSerializer().read(self._stream, self._read_as_numpy)

class BinaryProtocolWithKeywordStepsWriter(_binary.BinaryProtocolWriter, ProtocolWithKeywordStepsWriterBase):
    """Binary writer for the ProtocolWithKeywordSteps protocol."""


    def __init__(self, stream: typing.BinaryIO | str) -> None:
        ProtocolWithKeywordStepsWriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, ProtocolWithKeywordStepsWriterBase.schema)

    def _write_int(self, value: collections.abc.Iterable[RecordWithKeywordFields]) -> None:
        _binary.StreamSerializer(_RecordWithKeywordFieldsSerializer()).write(self._stream, value)

    def _write_float(self, value: EnumWithKeywordSymbols) -> None:
        _binary.EnumSerializer(_binary.int32_serializer, EnumWithKeywordSymbols).write(self._stream, value)


class BinaryProtocolWithKeywordStepsReader(_binary.BinaryProtocolReader, ProtocolWithKeywordStepsReaderBase):
    """Binary writer for the ProtocolWithKeywordSteps protocol."""


    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types = Types.NONE) -> None:
        ProtocolWithKeywordStepsReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, ProtocolWithKeywordStepsReaderBase.schema)

    def _read_int(self) -> collections.abc.Iterable[RecordWithKeywordFields]:
        return _binary.StreamSerializer(_RecordWithKeywordFieldsSerializer()).read(self._stream, self._read_as_numpy)

    def _read_float(self) -> EnumWithKeywordSymbols:
        return _binary.EnumSerializer(_binary.int32_serializer, EnumWithKeywordSymbols).read(self._stream, self._read_as_numpy)

class _SmallBenchmarkRecordSerializer(_binary.RecordSerializer[SmallBenchmarkRecord]):
    def __init__(self) -> None:
        super().__init__([("a", _binary.float64_serializer), ("b", _binary.float32_serializer), ("c", _binary.float32_serializer)])

    def write(self, stream: _binary.CodedOutputStream, value: SmallBenchmarkRecord) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.a, value.b, value.c)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['a'], value['b'], value['c'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> SmallBenchmarkRecord:
        field_values = self._read(stream, read_as_numpy)
        return SmallBenchmarkRecord(a=field_values[0], b=field_values[1], c=field_values[2])


class _SimpleEncodingCountersSerializer(_binary.RecordSerializer[SimpleEncodingCounters]):
    def __init__(self) -> None:
        super().__init__([("e1", _binary.OptionalSerializer(_binary.uint32_serializer)), ("e2", _binary.OptionalSerializer(_binary.uint32_serializer)), ("slice", _binary.OptionalSerializer(_binary.uint32_serializer)), ("repetition", _binary.OptionalSerializer(_binary.uint32_serializer))])

    def write(self, stream: _binary.CodedOutputStream, value: SimpleEncodingCounters) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.e1, value.e2, value.slice, value.repetition)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['e1'], value['e2'], value['slice'], value['repetition'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> SimpleEncodingCounters:
        field_values = self._read(stream, read_as_numpy)
        return SimpleEncodingCounters(e1=field_values[0], e2=field_values[1], slice=field_values[2], repetition=field_values[3])


class _SimpleAcquisitionSerializer(_binary.RecordSerializer[SimpleAcquisition]):
    def __init__(self) -> None:
        super().__init__([("flags", _binary.uint64_serializer), ("idx", _SimpleEncodingCountersSerializer()), ("data", _binary.NDArraySerializer(_binary.complexfloat32_serializer, 2)), ("trajectory", _binary.NDArraySerializer(_binary.float32_serializer, 2))])

    def write(self, stream: _binary.CodedOutputStream, value: SimpleAcquisition) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.flags, value.idx, value.data, value.trajectory)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['flags'], value['idx'], value['data'], value['trajectory'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> SimpleAcquisition:
        field_values = self._read(stream, read_as_numpy)
        return SimpleAcquisition(flags=field_values[0], idx=field_values[1], data=field_values[2], trajectory=field_values[3])


class _SimpleRecordSerializer(_binary.RecordSerializer[SimpleRecord]):
    def __init__(self) -> None:
        super().__init__([("x", _binary.int32_serializer), ("y", _binary.int32_serializer), ("z", _binary.int32_serializer)])

    def write(self, stream: _binary.CodedOutputStream, value: SimpleRecord) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.x, value.y, value.z)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['x'], value['y'], value['z'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> SimpleRecord:
        field_values = self._read(stream, read_as_numpy)
        return SimpleRecord(x=field_values[0], y=field_values[1], z=field_values[2])


class _RecordWithPrimitivesSerializer(_binary.RecordSerializer[RecordWithPrimitives]):
    def __init__(self) -> None:
        super().__init__([("bool_field", _binary.bool_serializer), ("int_8_field", _binary.int8_serializer), ("uint_8_field", _binary.uint8_serializer), ("int_16_field", _binary.int16_serializer), ("uint_16_field", _binary.uint16_serializer), ("int_32_field", _binary.int32_serializer), ("uint_32_field", _binary.uint32_serializer), ("int_64_field", _binary.int64_serializer), ("uint_64_field", _binary.uint64_serializer), ("size_field", _binary.size_serializer), ("float_32_field", _binary.float32_serializer), ("float_64_field", _binary.float64_serializer), ("complexfloat_32_field", _binary.complexfloat32_serializer), ("complexfloat_64_field", _binary.complexfloat64_serializer), ("date_field", _binary.date_serializer), ("time_field", _binary.time_serializer), ("datetime_field", _binary.datetime_serializer)])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithPrimitives) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.bool_field, value.int_8_field, value.uint_8_field, value.int_16_field, value.uint_16_field, value.int_32_field, value.uint_32_field, value.int_64_field, value.uint_64_field, value.size_field, value.float_32_field, value.float_64_field, value.complexfloat_32_field, value.complexfloat_64_field, value.date_field, value.time_field, value.datetime_field)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['bool_field'], value['int_8_field'], value['uint_8_field'], value['int_16_field'], value['uint_16_field'], value['int_32_field'], value['uint_32_field'], value['int_64_field'], value['uint_64_field'], value['size_field'], value['float_32_field'], value['float_64_field'], value['complexfloat_32_field'], value['complexfloat_64_field'], value['date_field'], value['time_field'], value['datetime_field'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithPrimitives:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithPrimitives(bool_field=field_values[0], int_8_field=field_values[1], uint_8_field=field_values[2], int_16_field=field_values[3], uint_16_field=field_values[4], int_32_field=field_values[5], uint_32_field=field_values[6], int_64_field=field_values[7], uint_64_field=field_values[8], size_field=field_values[9], float_32_field=field_values[10], float_64_field=field_values[11], complexfloat_32_field=field_values[12], complexfloat_64_field=field_values[13], date_field=field_values[14], time_field=field_values[15], datetime_field=field_values[16])


class _RecordWithPrimitiveAliasesSerializer(_binary.RecordSerializer[RecordWithPrimitiveAliases]):
    def __init__(self) -> None:
        super().__init__([("byte_field", _binary.uint8_serializer), ("int_field", _binary.int32_serializer), ("uint_field", _binary.uint32_serializer), ("long_field", _binary.int64_serializer), ("ulong_field", _binary.uint64_serializer), ("float_field", _binary.float32_serializer), ("double_field", _binary.float64_serializer), ("complexfloat_field", _binary.complexfloat32_serializer), ("complexdouble_field", _binary.complexfloat64_serializer)])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithPrimitiveAliases) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.byte_field, value.int_field, value.uint_field, value.long_field, value.ulong_field, value.float_field, value.double_field, value.complexfloat_field, value.complexdouble_field)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['byte_field'], value['int_field'], value['uint_field'], value['long_field'], value['ulong_field'], value['float_field'], value['double_field'], value['complexfloat_field'], value['complexdouble_field'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithPrimitiveAliases:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithPrimitiveAliases(byte_field=field_values[0], int_field=field_values[1], uint_field=field_values[2], long_field=field_values[3], ulong_field=field_values[4], float_field=field_values[5], double_field=field_values[6], complexfloat_field=field_values[7], complexdouble_field=field_values[8])


class _TupleWithRecordsSerializer(_binary.RecordSerializer[TupleWithRecords]):
    def __init__(self) -> None:
        super().__init__([("a", _SimpleRecordSerializer()), ("b", _SimpleRecordSerializer())])

    def write(self, stream: _binary.CodedOutputStream, value: TupleWithRecords) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.a, value.b)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['a'], value['b'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> TupleWithRecords:
        field_values = self._read(stream, read_as_numpy)
        return TupleWithRecords(a=field_values[0], b=field_values[1])


class _RecordWithVectorsSerializer(_binary.RecordSerializer[RecordWithVectors]):
    def __init__(self) -> None:
        super().__init__([("default_vector", _binary.VectorSerializer(_binary.int32_serializer)), ("default_vector_fixed_length", _binary.FixedVectorSerializer(_binary.int32_serializer, 3)), ("vector_of_vectors", _binary.VectorSerializer(_binary.FixedVectorSerializer(_binary.int32_serializer, 2)))])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithVectors) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.default_vector, value.default_vector_fixed_length, value.vector_of_vectors)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['default_vector'], value['default_vector_fixed_length'], value['vector_of_vectors'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithVectors:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithVectors(default_vector=field_values[0], default_vector_fixed_length=field_values[1], vector_of_vectors=field_values[2])


class _RecordWithArraysSerializer(_binary.RecordSerializer[RecordWithArrays]):
    def __init__(self) -> None:
        super().__init__([("default_array", _binary.DynamicNDArraySerializer(_binary.int32_serializer)), ("default_array_with_empty_dimension", _binary.DynamicNDArraySerializer(_binary.int32_serializer)), ("rank_1_array", _binary.NDArraySerializer(_binary.int32_serializer, 1)), ("rank_2_array", _binary.NDArraySerializer(_binary.int32_serializer, 2)), ("rank_2_array_with_named_dimensions", _binary.NDArraySerializer(_binary.int32_serializer, 2)), ("rank_2_fixed_array", _binary.FixedNDArraySerializer(_binary.int32_serializer, (3, 4,))), ("rank_2_fixed_array_with_named_dimensions", _binary.FixedNDArraySerializer(_binary.int32_serializer, (3, 4,))), ("dynamic_array", _binary.DynamicNDArraySerializer(_binary.int32_serializer)), ("array_of_vectors", _binary.FixedNDArraySerializer(_binary.FixedVectorSerializer(_binary.int32_serializer, 4), (5,)))])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithArrays) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.default_array, value.default_array_with_empty_dimension, value.rank_1_array, value.rank_2_array, value.rank_2_array_with_named_dimensions, value.rank_2_fixed_array, value.rank_2_fixed_array_with_named_dimensions, value.dynamic_array, value.array_of_vectors)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['default_array'], value['default_array_with_empty_dimension'], value['rank_1_array'], value['rank_2_array'], value['rank_2_array_with_named_dimensions'], value['rank_2_fixed_array'], value['rank_2_fixed_array_with_named_dimensions'], value['dynamic_array'], value['array_of_vectors'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithArrays:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithArrays(default_array=field_values[0], default_array_with_empty_dimension=field_values[1], rank_1_array=field_values[2], rank_2_array=field_values[3], rank_2_array_with_named_dimensions=field_values[4], rank_2_fixed_array=field_values[5], rank_2_fixed_array_with_named_dimensions=field_values[6], dynamic_array=field_values[7], array_of_vectors=field_values[8])


class _RecordWithArraysSimpleSyntaxSerializer(_binary.RecordSerializer[RecordWithArraysSimpleSyntax]):
    def __init__(self) -> None:
        super().__init__([("default_array", _binary.DynamicNDArraySerializer(_binary.int32_serializer)), ("default_array_with_empty_dimension", _binary.DynamicNDArraySerializer(_binary.int32_serializer)), ("rank_1_array", _binary.NDArraySerializer(_binary.int32_serializer, 1)), ("rank_2_array", _binary.NDArraySerializer(_binary.int32_serializer, 2)), ("rank_2_array_with_named_dimensions", _binary.NDArraySerializer(_binary.int32_serializer, 2)), ("rank_2_fixed_array", _binary.FixedNDArraySerializer(_binary.int32_serializer, (3, 4,))), ("rank_2_fixed_array_with_named_dimensions", _binary.FixedNDArraySerializer(_binary.int32_serializer, (3, 4,))), ("dynamic_array", _binary.DynamicNDArraySerializer(_binary.int32_serializer)), ("array_of_vectors", _binary.FixedNDArraySerializer(_binary.FixedVectorSerializer(_binary.int32_serializer, 4), (5,)))])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithArraysSimpleSyntax) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.default_array, value.default_array_with_empty_dimension, value.rank_1_array, value.rank_2_array, value.rank_2_array_with_named_dimensions, value.rank_2_fixed_array, value.rank_2_fixed_array_with_named_dimensions, value.dynamic_array, value.array_of_vectors)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['default_array'], value['default_array_with_empty_dimension'], value['rank_1_array'], value['rank_2_array'], value['rank_2_array_with_named_dimensions'], value['rank_2_fixed_array'], value['rank_2_fixed_array_with_named_dimensions'], value['dynamic_array'], value['array_of_vectors'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithArraysSimpleSyntax:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithArraysSimpleSyntax(default_array=field_values[0], default_array_with_empty_dimension=field_values[1], rank_1_array=field_values[2], rank_2_array=field_values[3], rank_2_array_with_named_dimensions=field_values[4], rank_2_fixed_array=field_values[5], rank_2_fixed_array_with_named_dimensions=field_values[6], dynamic_array=field_values[7], array_of_vectors=field_values[8])


class _RecordWithOptionalFieldsSerializer(_binary.RecordSerializer[RecordWithOptionalFields]):
    def __init__(self) -> None:
        super().__init__([("optional_int", _binary.OptionalSerializer(_binary.int32_serializer)), ("optional_int_alternate_syntax", _binary.OptionalSerializer(_binary.int32_serializer))])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithOptionalFields) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.optional_int, value.optional_int_alternate_syntax)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['optional_int'], value['optional_int_alternate_syntax'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithOptionalFields:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithOptionalFields(optional_int=field_values[0], optional_int_alternate_syntax=field_values[1])


class _RecordWithVlensSerializer(_binary.RecordSerializer[RecordWithVlens]):
    def __init__(self) -> None:
        super().__init__([("a", _binary.VectorSerializer(_SimpleRecordSerializer())), ("b", _binary.int32_serializer), ("c", _binary.int32_serializer)])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithVlens) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.a, value.b, value.c)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['a'], value['b'], value['c'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithVlens:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithVlens(a=field_values[0], b=field_values[1], c=field_values[2])


class _RecordWithStringsSerializer(_binary.RecordSerializer[RecordWithStrings]):
    def __init__(self) -> None:
        super().__init__([("a", _binary.string_serializer), ("b", _binary.string_serializer)])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithStrings) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.a, value.b)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['a'], value['b'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithStrings:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithStrings(a=field_values[0], b=field_values[1])


class _RecordWithOptionalVectorSerializer(_binary.RecordSerializer[RecordWithOptionalVector]):
    def __init__(self) -> None:
        super().__init__([("optional_vector", _binary.OptionalSerializer(_binary.VectorSerializer(_binary.int32_serializer)))])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithOptionalVector) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.optional_vector)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['optional_vector'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithOptionalVector:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithOptionalVector(optional_vector=field_values[0])


class _RecordWithFixedVectorsSerializer(_binary.RecordSerializer[RecordWithFixedVectors]):
    def __init__(self) -> None:
        super().__init__([("fixed_int_vector", _binary.FixedVectorSerializer(_binary.int32_serializer, 5)), ("fixed_simple_record_vector", _binary.FixedVectorSerializer(_SimpleRecordSerializer(), 3)), ("fixed_record_with_vlens_vector", _binary.FixedVectorSerializer(_RecordWithVlensSerializer(), 2))])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithFixedVectors) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.fixed_int_vector, value.fixed_simple_record_vector, value.fixed_record_with_vlens_vector)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['fixed_int_vector'], value['fixed_simple_record_vector'], value['fixed_record_with_vlens_vector'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithFixedVectors:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithFixedVectors(fixed_int_vector=field_values[0], fixed_simple_record_vector=field_values[1], fixed_record_with_vlens_vector=field_values[2])


class _RecordWithFixedArraysSerializer(_binary.RecordSerializer[RecordWithFixedArrays]):
    def __init__(self) -> None:
        super().__init__([("ints", _binary.FixedNDArraySerializer(_binary.int32_serializer, (2, 3,))), ("fixed_simple_record_array", _binary.FixedNDArraySerializer(_SimpleRecordSerializer(), (3, 2,))), ("fixed_record_with_vlens_array", _binary.FixedNDArraySerializer(_RecordWithVlensSerializer(), (2, 2,)))])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithFixedArrays) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.ints, value.fixed_simple_record_array, value.fixed_record_with_vlens_array)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['ints'], value['fixed_simple_record_array'], value['fixed_record_with_vlens_array'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithFixedArrays:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithFixedArrays(ints=field_values[0], fixed_simple_record_array=field_values[1], fixed_record_with_vlens_array=field_values[2])


class _RecordWithNDArraysSerializer(_binary.RecordSerializer[RecordWithNDArrays]):
    def __init__(self) -> None:
        super().__init__([("ints", _binary.NDArraySerializer(_binary.int32_serializer, 2)), ("fixed_simple_record_array", _binary.NDArraySerializer(_SimpleRecordSerializer(), 2)), ("fixed_record_with_vlens_array", _binary.NDArraySerializer(_RecordWithVlensSerializer(), 2))])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithNDArrays) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.ints, value.fixed_simple_record_array, value.fixed_record_with_vlens_array)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['ints'], value['fixed_simple_record_array'], value['fixed_record_with_vlens_array'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithNDArrays:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithNDArrays(ints=field_values[0], fixed_simple_record_array=field_values[1], fixed_record_with_vlens_array=field_values[2])


class _RecordWithNDArraysSingleDimensionSerializer(_binary.RecordSerializer[RecordWithNDArraysSingleDimension]):
    def __init__(self) -> None:
        super().__init__([("ints", _binary.NDArraySerializer(_binary.int32_serializer, 1)), ("fixed_simple_record_array", _binary.NDArraySerializer(_SimpleRecordSerializer(), 1)), ("fixed_record_with_vlens_array", _binary.NDArraySerializer(_RecordWithVlensSerializer(), 1))])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithNDArraysSingleDimension) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.ints, value.fixed_simple_record_array, value.fixed_record_with_vlens_array)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['ints'], value['fixed_simple_record_array'], value['fixed_record_with_vlens_array'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithNDArraysSingleDimension:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithNDArraysSingleDimension(ints=field_values[0], fixed_simple_record_array=field_values[1], fixed_record_with_vlens_array=field_values[2])


class _RecordWithDynamicNDArraysSerializer(_binary.RecordSerializer[RecordWithDynamicNDArrays]):
    def __init__(self) -> None:
        super().__init__([("ints", _binary.DynamicNDArraySerializer(_binary.int32_serializer)), ("fixed_simple_record_array", _binary.DynamicNDArraySerializer(_SimpleRecordSerializer())), ("fixed_record_with_vlens_array", _binary.DynamicNDArraySerializer(_RecordWithVlensSerializer()))])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithDynamicNDArrays) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.ints, value.fixed_simple_record_array, value.fixed_record_with_vlens_array)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['ints'], value['fixed_simple_record_array'], value['fixed_record_with_vlens_array'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithDynamicNDArrays:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithDynamicNDArrays(ints=field_values[0], fixed_simple_record_array=field_values[1], fixed_record_with_vlens_array=field_values[2])


class _RecordWithUnionsSerializer(_binary.RecordSerializer[RecordWithUnions]):
    def __init__(self) -> None:
        super().__init__([("null_or_int_or_string", _binary.UnionSerializer([None, ("int32", _binary.int32_serializer), ("string", _binary.string_serializer)]))])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithUnions) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.null_or_int_or_string)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['null_or_int_or_string'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithUnions:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithUnions(null_or_int_or_string=field_values[0])


class _GenericRecordSerializer(typing.Generic[T1, T1_NP, T2, T2_NP], _binary.RecordSerializer[GenericRecord[T1, T2, T2_NP]]):
    def __init__(self, t1_serializer: _binary.TypeSerializer[T1, T1_NP], t2_serializer: _binary.TypeSerializer[T2, T2_NP]) -> None:
        super().__init__([("scalar_1", t1_serializer), ("scalar_2", t2_serializer), ("vector_1", _binary.VectorSerializer(t1_serializer)), ("image_2", _binary.NDArraySerializer(t2_serializer, 2))])

    def write(self, stream: _binary.CodedOutputStream, value: GenericRecord[T1, T2, T2_NP]) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.scalar_1, value.scalar_2, value.vector_1, value.image_2)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['scalar_1'], value['scalar_2'], value['vector_1'], value['image_2'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> GenericRecord[T1, T2, T2_NP]:
        field_values = self._read(stream, read_as_numpy)
        return GenericRecord[T1, T2, T2_NP](scalar_1=field_values[0], scalar_2=field_values[1], vector_1=field_values[2], image_2=field_values[3])


class _MyTupleSerializer(typing.Generic[T1, T1_NP, T2, T2_NP], _binary.RecordSerializer[MyTuple[T1, T2]]):
    def __init__(self, t1_serializer: _binary.TypeSerializer[T1, T1_NP], t2_serializer: _binary.TypeSerializer[T2, T2_NP]) -> None:
        super().__init__([("v1", t1_serializer), ("v2", t2_serializer)])

    def write(self, stream: _binary.CodedOutputStream, value: MyTuple[T1, T2]) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.v1, value.v2)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['v1'], value['v2'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> MyTuple[T1, T2]:
        field_values = self._read(stream, read_as_numpy)
        return MyTuple[T1, T2](v1=field_values[0], v2=field_values[1])


class _GenericRecordWithComputedFieldsSerializer(typing.Generic[T0, T0_NP, T1, T1_NP], _binary.RecordSerializer[GenericRecordWithComputedFields[T0, T1]]):
    def __init__(self, t0_serializer: _binary.TypeSerializer[T0, T0_NP], t1_serializer: _binary.TypeSerializer[T1, T1_NP]) -> None:
        super().__init__([("f1", _binary.UnionSerializer([("T0", t0_serializer), ("T1", t1_serializer)]))])

    def write(self, stream: _binary.CodedOutputStream, value: GenericRecordWithComputedFields[T0, T1]) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.f1)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['f1'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> GenericRecordWithComputedFields[T0, T1]:
        field_values = self._read(stream, read_as_numpy)
        return GenericRecordWithComputedFields[T0, T1](f1=field_values[0])


class _RecordWithComputedFieldsSerializer(_binary.RecordSerializer[RecordWithComputedFields]):
    def __init__(self) -> None:
        super().__init__([("array_field", _binary.NDArraySerializer(_binary.int32_serializer, 2)), ("array_field_map_dimensions", _binary.NDArraySerializer(_binary.int32_serializer, 2)), ("dynamic_array_field", _binary.DynamicNDArraySerializer(_binary.int32_serializer)), ("fixed_array_field", _binary.FixedNDArraySerializer(_binary.int32_serializer, (3, 4,))), ("int_field", _binary.int32_serializer), ("string_field", _binary.string_serializer), ("tuple_field", _MyTupleSerializer(_binary.int32_serializer, _binary.int32_serializer)), ("vector_field", _binary.VectorSerializer(_binary.int32_serializer)), ("vector_of_vectors_field", _binary.VectorSerializer(_binary.VectorSerializer(_binary.int32_serializer))), ("fixed_vector_field", _binary.FixedVectorSerializer(_binary.int32_serializer, 3)), ("optional_named_array", _binary.OptionalSerializer(_binary.NDArraySerializer(_binary.int32_serializer, 2))), ("int_float_union", _binary.UnionSerializer([("int32", _binary.int32_serializer), ("float32", _binary.float32_serializer)])), ("nullable_int_float_union", _binary.UnionSerializer([None, ("int32", _binary.int32_serializer), ("float32", _binary.float32_serializer)])), ("union_with_nested_generic_union", _binary.UnionSerializer([("int32", _binary.int32_serializer), ("GenericRecordWithComputedFields<string, float32>", _GenericRecordWithComputedFieldsSerializer(_binary.string_serializer, _binary.float32_serializer))])), ("map_field", _binary.MapSerializer(_binary.string_serializer, _binary.string_serializer))])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithComputedFields) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.array_field, value.array_field_map_dimensions, value.dynamic_array_field, value.fixed_array_field, value.int_field, value.string_field, value.tuple_field, value.vector_field, value.vector_of_vectors_field, value.fixed_vector_field, value.optional_named_array, value.int_float_union, value.nullable_int_float_union, value.union_with_nested_generic_union, value.map_field)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['array_field'], value['array_field_map_dimensions'], value['dynamic_array_field'], value['fixed_array_field'], value['int_field'], value['string_field'], value['tuple_field'], value['vector_field'], value['vector_of_vectors_field'], value['fixed_vector_field'], value['optional_named_array'], value['int_float_union'], value['nullable_int_float_union'], value['union_with_nested_generic_union'], value['map_field'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithComputedFields:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithComputedFields(array_field=field_values[0], array_field_map_dimensions=field_values[1], dynamic_array_field=field_values[2], fixed_array_field=field_values[3], int_field=field_values[4], string_field=field_values[5], tuple_field=field_values[6], vector_field=field_values[7], vector_of_vectors_field=field_values[8], fixed_vector_field=field_values[9], optional_named_array=field_values[10], int_float_union=field_values[11], nullable_int_float_union=field_values[12], union_with_nested_generic_union=field_values[13], map_field=field_values[14])


class _RecordWithKeywordFieldsSerializer(_binary.RecordSerializer[RecordWithKeywordFields]):
    def __init__(self) -> None:
        super().__init__([("int_", _binary.string_serializer), ("sizeof", _binary.NDArraySerializer(_binary.int32_serializer, 2)), ("if_", _binary.EnumSerializer(_binary.int32_serializer, EnumWithKeywordSymbols))])

    def write(self, stream: _binary.CodedOutputStream, value: RecordWithKeywordFields) -> None:
        if isinstance(value, np.void):
            self.write_numpy(stream, value)
            return
        self._write(stream, value.int_, value.sizeof, value.if_)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['int_'], value['sizeof'], value['if_'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> RecordWithKeywordFields:
        field_values = self._read(stream, read_as_numpy)
        return RecordWithKeywordFields(int_=field_values[0], sizeof=field_values[1], if_=field_values[2])



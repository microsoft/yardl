% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef RecordWithGenericArrays < handle
  properties
    nd
    fixed_nd
    dynamic_nd
    aliased_nd
    aliased_fixed_nd
    aliased_dynamic_nd
  end

  methods
    function self = RecordWithGenericArrays(kwargs)
      arguments
        kwargs.nd;
        kwargs.fixed_nd;
        kwargs.dynamic_nd;
        kwargs.aliased_nd;
        kwargs.aliased_fixed_nd;
        kwargs.aliased_dynamic_nd;
      end
      if ~isfield(kwargs, "nd")
        throw(yardl.TypeError("Missing required keyword argument 'nd'"))
      end
      self.nd = kwargs.nd;
      if ~isfield(kwargs, "fixed_nd")
        throw(yardl.TypeError("Missing required keyword argument 'fixed_nd'"))
      end
      self.fixed_nd = kwargs.fixed_nd;
      if ~isfield(kwargs, "dynamic_nd")
        throw(yardl.TypeError("Missing required keyword argument 'dynamic_nd'"))
      end
      self.dynamic_nd = kwargs.dynamic_nd;
      if ~isfield(kwargs, "aliased_nd")
        throw(yardl.TypeError("Missing required keyword argument 'aliased_nd'"))
      end
      self.aliased_nd = kwargs.aliased_nd;
      if ~isfield(kwargs, "aliased_fixed_nd")
        throw(yardl.TypeError("Missing required keyword argument 'aliased_fixed_nd'"))
      end
      self.aliased_fixed_nd = kwargs.aliased_fixed_nd;
      if ~isfield(kwargs, "aliased_dynamic_nd")
        throw(yardl.TypeError("Missing required keyword argument 'aliased_dynamic_nd'"))
      end
      self.aliased_dynamic_nd = kwargs.aliased_dynamic_nd;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "test_model.RecordWithGenericArrays") && ...
        isequal(self.nd, other.nd) && ...
        isequal(self.fixed_nd, other.fixed_nd) && ...
        isequal(self.dynamic_nd, other.dynamic_nd) && ...
        isequal(self.aliased_nd, other.aliased_nd) && ...
        isequal(self.aliased_fixed_nd, other.aliased_fixed_nd) && ...
        isequal(self.aliased_dynamic_nd, other.aliased_dynamic_nd);
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end
  end

end

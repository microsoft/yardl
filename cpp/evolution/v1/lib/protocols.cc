// This file was generated by the "yardl" tool. DO NOT EDIT.

#include "protocols.h"

#ifdef _MSC_VER
#define unlikely(x) x
#else
#define unlikely(x) __builtin_expect((x), 0)
#endif

namespace evo_test {
namespace {
void ProtocolWithChangesWriterBaseInvalidState(uint8_t attempted, [[maybe_unused]] bool end, uint8_t current) {
  std::string expected_method;
  switch (current) {
  case 0: expected_method = "WriteInt8ToInt()"; break;
  case 1: expected_method = "WriteInt8ToLong()"; break;
  case 2: expected_method = "WriteInt8ToUint()"; break;
  case 3: expected_method = "WriteInt8ToUlong()"; break;
  case 4: expected_method = "WriteInt8ToFloat()"; break;
  case 5: expected_method = "WriteInt8ToDouble()"; break;
  case 6: expected_method = "WriteIntToUint()"; break;
  case 7: expected_method = "WriteIntToLong()"; break;
  case 8: expected_method = "WriteIntToFloat()"; break;
  case 9: expected_method = "WriteIntToDouble()"; break;
  case 10: expected_method = "WriteUintToUlong()"; break;
  case 11: expected_method = "WriteUintToFloat()"; break;
  case 12: expected_method = "WriteUintToDouble()"; break;
  case 13: expected_method = "WriteFloatToDouble()"; break;
  case 14: expected_method = "WriteIntToString()"; break;
  case 15: expected_method = "WriteUintToString()"; break;
  case 16: expected_method = "WriteLongToString()"; break;
  case 17: expected_method = "WriteUlongToString()"; break;
  case 18: expected_method = "WriteFloatToString()"; break;
  case 19: expected_method = "WriteDoubleToString()"; break;
  case 20: expected_method = "WriteIntToOptional()"; break;
  case 21: expected_method = "WriteFloatToOptional()"; break;
  case 22: expected_method = "WriteStringToOptional()"; break;
  case 23: expected_method = "WriteIntToUnion()"; break;
  case 24: expected_method = "WriteFloatToUnion()"; break;
  case 25: expected_method = "WriteStringToUnion()"; break;
  case 26: expected_method = "WriteOptionalIntToFloat()"; break;
  case 27: expected_method = "WriteOptionalFloatToString()"; break;
  case 28: expected_method = "WriteAliasedLongToString()"; break;
  case 29: expected_method = "WriteOptionalIntToUnion()"; break;
  case 30: expected_method = "WriteOptionalRecordToUnion()"; break;
  case 31: expected_method = "WriteRecordWithChanges()"; break;
  case 32: expected_method = "WriteAliasedRecordWithChanges()"; break;
  case 33: expected_method = "WriteOptionalRecordWithChanges()"; break;
  case 34: expected_method = "WriteAliasedOptionalRecordWithChanges()"; break;
  case 35: expected_method = "WriteUnionRecordWithChanges()"; break;
  case 36: expected_method = "WriteUnionWithSameTypeset()"; break;
  case 37: expected_method = "WriteUnionWithTypesAdded()"; break;
  case 38: expected_method = "WriteUnionWithTypesRemoved()"; break;
  case 39: expected_method = "WriteVectorRecordWithChanges()"; break;
  case 40: expected_method = "WriteStreamedRecordWithChanges() or EndStreamedRecordWithChanges()"; break;
  }
  std::string attempted_method;
  switch (attempted) {
  case 0: attempted_method = "WriteInt8ToInt()"; break;
  case 1: attempted_method = "WriteInt8ToLong()"; break;
  case 2: attempted_method = "WriteInt8ToUint()"; break;
  case 3: attempted_method = "WriteInt8ToUlong()"; break;
  case 4: attempted_method = "WriteInt8ToFloat()"; break;
  case 5: attempted_method = "WriteInt8ToDouble()"; break;
  case 6: attempted_method = "WriteIntToUint()"; break;
  case 7: attempted_method = "WriteIntToLong()"; break;
  case 8: attempted_method = "WriteIntToFloat()"; break;
  case 9: attempted_method = "WriteIntToDouble()"; break;
  case 10: attempted_method = "WriteUintToUlong()"; break;
  case 11: attempted_method = "WriteUintToFloat()"; break;
  case 12: attempted_method = "WriteUintToDouble()"; break;
  case 13: attempted_method = "WriteFloatToDouble()"; break;
  case 14: attempted_method = "WriteIntToString()"; break;
  case 15: attempted_method = "WriteUintToString()"; break;
  case 16: attempted_method = "WriteLongToString()"; break;
  case 17: attempted_method = "WriteUlongToString()"; break;
  case 18: attempted_method = "WriteFloatToString()"; break;
  case 19: attempted_method = "WriteDoubleToString()"; break;
  case 20: attempted_method = "WriteIntToOptional()"; break;
  case 21: attempted_method = "WriteFloatToOptional()"; break;
  case 22: attempted_method = "WriteStringToOptional()"; break;
  case 23: attempted_method = "WriteIntToUnion()"; break;
  case 24: attempted_method = "WriteFloatToUnion()"; break;
  case 25: attempted_method = "WriteStringToUnion()"; break;
  case 26: attempted_method = "WriteOptionalIntToFloat()"; break;
  case 27: attempted_method = "WriteOptionalFloatToString()"; break;
  case 28: attempted_method = "WriteAliasedLongToString()"; break;
  case 29: attempted_method = "WriteOptionalIntToUnion()"; break;
  case 30: attempted_method = "WriteOptionalRecordToUnion()"; break;
  case 31: attempted_method = "WriteRecordWithChanges()"; break;
  case 32: attempted_method = "WriteAliasedRecordWithChanges()"; break;
  case 33: attempted_method = "WriteOptionalRecordWithChanges()"; break;
  case 34: attempted_method = "WriteAliasedOptionalRecordWithChanges()"; break;
  case 35: attempted_method = "WriteUnionRecordWithChanges()"; break;
  case 36: attempted_method = "WriteUnionWithSameTypeset()"; break;
  case 37: attempted_method = "WriteUnionWithTypesAdded()"; break;
  case 38: attempted_method = "WriteUnionWithTypesRemoved()"; break;
  case 39: attempted_method = "WriteVectorRecordWithChanges()"; break;
  case 40: attempted_method = end ? "EndStreamedRecordWithChanges()" : "WriteStreamedRecordWithChanges()"; break;
  case 41: attempted_method = "Close()"; break;
  }
  throw std::runtime_error("Expected call to " + expected_method + " but received call to " + attempted_method + " instead.");
}

void ProtocolWithChangesReaderBaseInvalidState(uint8_t attempted, uint8_t current) {
  auto f = [](uint8_t i) -> std::string {
    switch (i/2) {
    case 0: return "ReadInt8ToInt()";
    case 1: return "ReadInt8ToLong()";
    case 2: return "ReadInt8ToUint()";
    case 3: return "ReadInt8ToUlong()";
    case 4: return "ReadInt8ToFloat()";
    case 5: return "ReadInt8ToDouble()";
    case 6: return "ReadIntToUint()";
    case 7: return "ReadIntToLong()";
    case 8: return "ReadIntToFloat()";
    case 9: return "ReadIntToDouble()";
    case 10: return "ReadUintToUlong()";
    case 11: return "ReadUintToFloat()";
    case 12: return "ReadUintToDouble()";
    case 13: return "ReadFloatToDouble()";
    case 14: return "ReadIntToString()";
    case 15: return "ReadUintToString()";
    case 16: return "ReadLongToString()";
    case 17: return "ReadUlongToString()";
    case 18: return "ReadFloatToString()";
    case 19: return "ReadDoubleToString()";
    case 20: return "ReadIntToOptional()";
    case 21: return "ReadFloatToOptional()";
    case 22: return "ReadStringToOptional()";
    case 23: return "ReadIntToUnion()";
    case 24: return "ReadFloatToUnion()";
    case 25: return "ReadStringToUnion()";
    case 26: return "ReadOptionalIntToFloat()";
    case 27: return "ReadOptionalFloatToString()";
    case 28: return "ReadAliasedLongToString()";
    case 29: return "ReadOptionalIntToUnion()";
    case 30: return "ReadOptionalRecordToUnion()";
    case 31: return "ReadRecordWithChanges()";
    case 32: return "ReadAliasedRecordWithChanges()";
    case 33: return "ReadOptionalRecordWithChanges()";
    case 34: return "ReadAliasedOptionalRecordWithChanges()";
    case 35: return "ReadUnionRecordWithChanges()";
    case 36: return "ReadUnionWithSameTypeset()";
    case 37: return "ReadUnionWithTypesAdded()";
    case 38: return "ReadUnionWithTypesRemoved()";
    case 39: return "ReadVectorRecordWithChanges()";
    case 40: return "ReadStreamedRecordWithChanges()";
    case 41: return "Close()";
    default: return "<unknown>";
    }
  };
  throw std::runtime_error("Expected call to " + f(current) + " but received call to " + f(attempted) + " instead.");
}

} // namespace 

std::string ProtocolWithChangesWriterBase::schema_ = R"({"protocol":{"name":"ProtocolWithChanges","sequence":[{"name":"int8ToInt","type":"int32"},{"name":"int8ToLong","type":"int64"},{"name":"int8ToUint","type":"uint32"},{"name":"int8ToUlong","type":"uint64"},{"name":"int8ToFloat","type":"float32"},{"name":"int8ToDouble","type":"float64"},{"name":"intToUint","type":"uint32"},{"name":"intToLong","type":"int64"},{"name":"intToFloat","type":"float32"},{"name":"intToDouble","type":"float64"},{"name":"uintToUlong","type":"uint64"},{"name":"uintToFloat","type":"float32"},{"name":"uintToDouble","type":"float64"},{"name":"floatToDouble","type":"float64"},{"name":"intToString","type":"string"},{"name":"uintToString","type":"string"},{"name":"longToString","type":"string"},{"name":"ulongToString","type":"string"},{"name":"floatToString","type":"string"},{"name":"doubleToString","type":"string"},{"name":"intToOptional","type":[null,"int32"]},{"name":"floatToOptional","type":[null,"float32"]},{"name":"stringToOptional","type":[null,"string"]},{"name":"intToUnion","type":[{"tag":"int32","type":"int32"},{"tag":"bool","type":"bool"}]},{"name":"floatToUnion","type":[{"tag":"float32","type":"float32"},{"tag":"bool","type":"bool"}]},{"name":"stringToUnion","type":[{"tag":"string","type":"string"},{"tag":"bool","type":"bool"}]},{"name":"optionalIntToFloat","type":[null,"float32"]},{"name":"optionalFloatToString","type":[null,"string"]},{"name":"aliasedLongToString","type":"EvoTest.AliasedLongToString"},{"name":"optionalIntToUnion","type":[null,{"tag":"int32","type":"int32"},{"tag":"string","type":"string"}]},{"name":"optionalRecordToUnion","type":[null,{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"string","type":"string"}]},{"name":"recordWithChanges","type":"EvoTest.RecordWithChanges"},{"name":"aliasedRecordWithChanges","type":"EvoTest.AliasedRecordWithChanges"},{"name":"optionalRecordWithChanges","type":[null,"EvoTest.RecordWithChanges"]},{"name":"aliasedOptionalRecordWithChanges","type":[null,"EvoTest.AliasedRecordWithChanges"]},{"name":"unionRecordWithChanges","type":[{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"int32","type":"int32"}]},{"name":"unionWithSameTypeset","type":[{"tag":"float32","type":"float32"},{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"string","type":"string"},{"tag":"int32","type":"int32"}]},{"name":"unionWithTypesAdded","type":[{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"int32","type":"int32"},{"tag":"float32","type":"float32"},{"tag":"string","type":"string"}]},{"name":"unionWithTypesRemoved","type":[{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"string","type":"string"}]},{"name":"vectorRecordWithChanges","type":{"vector":{"items":"EvoTest.RecordWithChanges"}}},{"name":"streamedRecordWithChanges","type":{"stream":{"items":"EvoTest.RecordWithChanges"}}}]},"types":[{"name":"AliasedLongToString","type":"string"},{"name":"AliasedRecordWithChanges","type":"EvoTest.RecordWithChanges"},{"name":"RecordWithChanges","fields":[{"name":"floatToDouble","type":"float64"},{"name":"unchangedRecord","type":"EvoTest.UnchangedRecord"},{"name":"intToLong","type":"int64"},{"name":"optionalLongToString","type":[null,"string"]}]},{"name":"UnchangedRecord","fields":[{"name":"name","type":"string"},{"name":"age","type":"int32"},{"name":"meta","type":{"map":{"keys":"string","values":"float64"}}}]}]})";

std::vector<std::string> ProtocolWithChangesWriterBase::previous_schemas_ = {
  R"({"protocol":{"name":"ProtocolWithChanges","sequence":[{"name":"int8ToInt","type":"int8"},{"name":"int8ToLong","type":"int8"},{"name":"int8ToUint","type":"int8"},{"name":"int8ToUlong","type":"int8"},{"name":"int8ToFloat","type":"int8"},{"name":"int8ToDouble","type":"int8"},{"name":"intToUint","type":"int32"},{"name":"intToLong","type":"int32"},{"name":"intToFloat","type":"int32"},{"name":"intToDouble","type":"int32"},{"name":"uintToUlong","type":"uint32"},{"name":"uintToFloat","type":"uint32"},{"name":"uintToDouble","type":"uint32"},{"name":"floatToDouble","type":"float32"},{"name":"intToString","type":"int32"},{"name":"uintToString","type":"uint32"},{"name":"longToString","type":"int64"},{"name":"ulongToString","type":"uint64"},{"name":"floatToString","type":"float32"},{"name":"doubleToString","type":"float64"},{"name":"intToOptional","type":"int32"},{"name":"floatToOptional","type":"float32"},{"name":"stringToOptional","type":"string"},{"name":"intToUnion","type":"int32"},{"name":"floatToUnion","type":"float32"},{"name":"stringToUnion","type":"string"},{"name":"optionalIntToFloat","type":[null,"int32"]},{"name":"optionalFloatToString","type":[null,"float32"]},{"name":"aliasedLongToString","type":"EvoTest.AliasedLongToString"},{"name":"optionalIntToUnion","type":[null,"int32"]},{"name":"optionalRecordToUnion","type":[null,"EvoTest.RecordWithChanges"]},{"name":"recordWithChanges","type":"EvoTest.RecordWithChanges"},{"name":"aliasedRecordWithChanges","type":"EvoTest.AliasedRecordWithChanges"},{"name":"optionalRecordWithChanges","type":[null,"EvoTest.RecordWithChanges"]},{"name":"aliasedOptionalRecordWithChanges","type":[null,"EvoTest.AliasedRecordWithChanges"]},{"name":"unionRecordWithChanges","type":[{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"int32","type":"int32"}]},{"name":"unionWithSameTypeset","type":[{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"int32","type":"int32"},{"tag":"float32","type":"float32"},{"tag":"string","type":"string"}]},{"name":"unionWithTypesAdded","type":[{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"float32","type":"float32"}]},{"name":"unionWithTypesRemoved","type":[{"tag":"RecordWithChanges","type":"EvoTest.RecordWithChanges"},{"tag":"int32","type":"int32"},{"tag":"float32","type":"float32"},{"tag":"string","type":"string"}]},{"name":"vectorRecordWithChanges","type":{"vector":{"items":"EvoTest.RecordWithChanges"}}},{"name":"streamedRecordWithChanges","type":{"stream":{"items":"EvoTest.RecordWithChanges"}}}]},"types":[{"name":"AliasedLongToString","type":"int64"},{"name":"AliasedRecordWithChanges","type":"EvoTest.RecordWithChanges"},{"name":"RecordWithChanges","fields":[{"name":"intToLong","type":"int32"},{"name":"deprecatedVector","type":{"vector":{"items":"int32"}}},{"name":"floatToDouble","type":"float32"},{"name":"deprecatedArray","type":{"array":{"items":"uint8","dimensions":[{"length":7}]}}},{"name":"optionalLongToString","type":[null,"int64"]},{"name":"deprecatedMap","type":{"map":{"keys":"string","values":{"vector":{"items":"int32"}}}}},{"name":"unchangedRecord","type":"EvoTest.UnchangedRecord"}]},{"name":"UnchangedRecord","fields":[{"name":"name","type":"string"},{"name":"age","type":"int32"},{"name":"meta","type":{"map":{"keys":"string","values":"float64"}}}]}]})",
};

std::string ProtocolWithChangesWriterBase::SchemaFromVersion(Version version) {
  switch (version) {
  case Version::v0: return previous_schemas_[0]; break;
  case Version::Latest: return ProtocolWithChangesWriterBase::schema_; break;
  default: throw std::runtime_error("The version does not correspond to any schema supported by protocol ProtocolWithChanges.");
  }

}
void ProtocolWithChangesWriterBase::WriteInt8ToInt(int32_t const& value) {
  if (unlikely(state_ != 0)) {
    ProtocolWithChangesWriterBaseInvalidState(0, false, state_);
  }

  WriteInt8ToIntImpl(value);
  state_ = 1;
}

void ProtocolWithChangesWriterBase::WriteInt8ToLong(int64_t const& value) {
  if (unlikely(state_ != 1)) {
    ProtocolWithChangesWriterBaseInvalidState(1, false, state_);
  }

  WriteInt8ToLongImpl(value);
  state_ = 2;
}

void ProtocolWithChangesWriterBase::WriteInt8ToUint(uint32_t const& value) {
  if (unlikely(state_ != 2)) {
    ProtocolWithChangesWriterBaseInvalidState(2, false, state_);
  }

  WriteInt8ToUintImpl(value);
  state_ = 3;
}

void ProtocolWithChangesWriterBase::WriteInt8ToUlong(uint64_t const& value) {
  if (unlikely(state_ != 3)) {
    ProtocolWithChangesWriterBaseInvalidState(3, false, state_);
  }

  WriteInt8ToUlongImpl(value);
  state_ = 4;
}

void ProtocolWithChangesWriterBase::WriteInt8ToFloat(float const& value) {
  if (unlikely(state_ != 4)) {
    ProtocolWithChangesWriterBaseInvalidState(4, false, state_);
  }

  WriteInt8ToFloatImpl(value);
  state_ = 5;
}

void ProtocolWithChangesWriterBase::WriteInt8ToDouble(double const& value) {
  if (unlikely(state_ != 5)) {
    ProtocolWithChangesWriterBaseInvalidState(5, false, state_);
  }

  WriteInt8ToDoubleImpl(value);
  state_ = 6;
}

void ProtocolWithChangesWriterBase::WriteIntToUint(uint32_t const& value) {
  if (unlikely(state_ != 6)) {
    ProtocolWithChangesWriterBaseInvalidState(6, false, state_);
  }

  WriteIntToUintImpl(value);
  state_ = 7;
}

void ProtocolWithChangesWriterBase::WriteIntToLong(int64_t const& value) {
  if (unlikely(state_ != 7)) {
    ProtocolWithChangesWriterBaseInvalidState(7, false, state_);
  }

  WriteIntToLongImpl(value);
  state_ = 8;
}

void ProtocolWithChangesWriterBase::WriteIntToFloat(float const& value) {
  if (unlikely(state_ != 8)) {
    ProtocolWithChangesWriterBaseInvalidState(8, false, state_);
  }

  WriteIntToFloatImpl(value);
  state_ = 9;
}

void ProtocolWithChangesWriterBase::WriteIntToDouble(double const& value) {
  if (unlikely(state_ != 9)) {
    ProtocolWithChangesWriterBaseInvalidState(9, false, state_);
  }

  WriteIntToDoubleImpl(value);
  state_ = 10;
}

void ProtocolWithChangesWriterBase::WriteUintToUlong(uint64_t const& value) {
  if (unlikely(state_ != 10)) {
    ProtocolWithChangesWriterBaseInvalidState(10, false, state_);
  }

  WriteUintToUlongImpl(value);
  state_ = 11;
}

void ProtocolWithChangesWriterBase::WriteUintToFloat(float const& value) {
  if (unlikely(state_ != 11)) {
    ProtocolWithChangesWriterBaseInvalidState(11, false, state_);
  }

  WriteUintToFloatImpl(value);
  state_ = 12;
}

void ProtocolWithChangesWriterBase::WriteUintToDouble(double const& value) {
  if (unlikely(state_ != 12)) {
    ProtocolWithChangesWriterBaseInvalidState(12, false, state_);
  }

  WriteUintToDoubleImpl(value);
  state_ = 13;
}

void ProtocolWithChangesWriterBase::WriteFloatToDouble(double const& value) {
  if (unlikely(state_ != 13)) {
    ProtocolWithChangesWriterBaseInvalidState(13, false, state_);
  }

  WriteFloatToDoubleImpl(value);
  state_ = 14;
}

void ProtocolWithChangesWriterBase::WriteIntToString(std::string const& value) {
  if (unlikely(state_ != 14)) {
    ProtocolWithChangesWriterBaseInvalidState(14, false, state_);
  }

  WriteIntToStringImpl(value);
  state_ = 15;
}

void ProtocolWithChangesWriterBase::WriteUintToString(std::string const& value) {
  if (unlikely(state_ != 15)) {
    ProtocolWithChangesWriterBaseInvalidState(15, false, state_);
  }

  WriteUintToStringImpl(value);
  state_ = 16;
}

void ProtocolWithChangesWriterBase::WriteLongToString(std::string const& value) {
  if (unlikely(state_ != 16)) {
    ProtocolWithChangesWriterBaseInvalidState(16, false, state_);
  }

  WriteLongToStringImpl(value);
  state_ = 17;
}

void ProtocolWithChangesWriterBase::WriteUlongToString(std::string const& value) {
  if (unlikely(state_ != 17)) {
    ProtocolWithChangesWriterBaseInvalidState(17, false, state_);
  }

  WriteUlongToStringImpl(value);
  state_ = 18;
}

void ProtocolWithChangesWriterBase::WriteFloatToString(std::string const& value) {
  if (unlikely(state_ != 18)) {
    ProtocolWithChangesWriterBaseInvalidState(18, false, state_);
  }

  WriteFloatToStringImpl(value);
  state_ = 19;
}

void ProtocolWithChangesWriterBase::WriteDoubleToString(std::string const& value) {
  if (unlikely(state_ != 19)) {
    ProtocolWithChangesWriterBaseInvalidState(19, false, state_);
  }

  WriteDoubleToStringImpl(value);
  state_ = 20;
}

void ProtocolWithChangesWriterBase::WriteIntToOptional(std::optional<int32_t> const& value) {
  if (unlikely(state_ != 20)) {
    ProtocolWithChangesWriterBaseInvalidState(20, false, state_);
  }

  WriteIntToOptionalImpl(value);
  state_ = 21;
}

void ProtocolWithChangesWriterBase::WriteFloatToOptional(std::optional<float> const& value) {
  if (unlikely(state_ != 21)) {
    ProtocolWithChangesWriterBaseInvalidState(21, false, state_);
  }

  WriteFloatToOptionalImpl(value);
  state_ = 22;
}

void ProtocolWithChangesWriterBase::WriteStringToOptional(std::optional<std::string> const& value) {
  if (unlikely(state_ != 22)) {
    ProtocolWithChangesWriterBaseInvalidState(22, false, state_);
  }

  WriteStringToOptionalImpl(value);
  state_ = 23;
}

void ProtocolWithChangesWriterBase::WriteIntToUnion(std::variant<int32_t, bool> const& value) {
  if (unlikely(state_ != 23)) {
    ProtocolWithChangesWriterBaseInvalidState(23, false, state_);
  }

  WriteIntToUnionImpl(value);
  state_ = 24;
}

void ProtocolWithChangesWriterBase::WriteFloatToUnion(std::variant<float, bool> const& value) {
  if (unlikely(state_ != 24)) {
    ProtocolWithChangesWriterBaseInvalidState(24, false, state_);
  }

  WriteFloatToUnionImpl(value);
  state_ = 25;
}

void ProtocolWithChangesWriterBase::WriteStringToUnion(std::variant<std::string, bool> const& value) {
  if (unlikely(state_ != 25)) {
    ProtocolWithChangesWriterBaseInvalidState(25, false, state_);
  }

  WriteStringToUnionImpl(value);
  state_ = 26;
}

void ProtocolWithChangesWriterBase::WriteOptionalIntToFloat(std::optional<float> const& value) {
  if (unlikely(state_ != 26)) {
    ProtocolWithChangesWriterBaseInvalidState(26, false, state_);
  }

  WriteOptionalIntToFloatImpl(value);
  state_ = 27;
}

void ProtocolWithChangesWriterBase::WriteOptionalFloatToString(std::optional<std::string> const& value) {
  if (unlikely(state_ != 27)) {
    ProtocolWithChangesWriterBaseInvalidState(27, false, state_);
  }

  WriteOptionalFloatToStringImpl(value);
  state_ = 28;
}

void ProtocolWithChangesWriterBase::WriteAliasedLongToString(evo_test::AliasedLongToString const& value) {
  if (unlikely(state_ != 28)) {
    ProtocolWithChangesWriterBaseInvalidState(28, false, state_);
  }

  WriteAliasedLongToStringImpl(value);
  state_ = 29;
}

void ProtocolWithChangesWriterBase::WriteOptionalIntToUnion(std::variant<std::monostate, int32_t, std::string> const& value) {
  if (unlikely(state_ != 29)) {
    ProtocolWithChangesWriterBaseInvalidState(29, false, state_);
  }

  WriteOptionalIntToUnionImpl(value);
  state_ = 30;
}

void ProtocolWithChangesWriterBase::WriteOptionalRecordToUnion(std::variant<std::monostate, evo_test::RecordWithChanges, std::string> const& value) {
  if (unlikely(state_ != 30)) {
    ProtocolWithChangesWriterBaseInvalidState(30, false, state_);
  }

  WriteOptionalRecordToUnionImpl(value);
  state_ = 31;
}

void ProtocolWithChangesWriterBase::WriteRecordWithChanges(evo_test::RecordWithChanges const& value) {
  if (unlikely(state_ != 31)) {
    ProtocolWithChangesWriterBaseInvalidState(31, false, state_);
  }

  WriteRecordWithChangesImpl(value);
  state_ = 32;
}

void ProtocolWithChangesWriterBase::WriteAliasedRecordWithChanges(evo_test::AliasedRecordWithChanges const& value) {
  if (unlikely(state_ != 32)) {
    ProtocolWithChangesWriterBaseInvalidState(32, false, state_);
  }

  WriteAliasedRecordWithChangesImpl(value);
  state_ = 33;
}

void ProtocolWithChangesWriterBase::WriteOptionalRecordWithChanges(std::optional<evo_test::RecordWithChanges> const& value) {
  if (unlikely(state_ != 33)) {
    ProtocolWithChangesWriterBaseInvalidState(33, false, state_);
  }

  WriteOptionalRecordWithChangesImpl(value);
  state_ = 34;
}

void ProtocolWithChangesWriterBase::WriteAliasedOptionalRecordWithChanges(std::optional<evo_test::AliasedRecordWithChanges> const& value) {
  if (unlikely(state_ != 34)) {
    ProtocolWithChangesWriterBaseInvalidState(34, false, state_);
  }

  WriteAliasedOptionalRecordWithChangesImpl(value);
  state_ = 35;
}

void ProtocolWithChangesWriterBase::WriteUnionRecordWithChanges(std::variant<evo_test::RecordWithChanges, int32_t> const& value) {
  if (unlikely(state_ != 35)) {
    ProtocolWithChangesWriterBaseInvalidState(35, false, state_);
  }

  WriteUnionRecordWithChangesImpl(value);
  state_ = 36;
}

void ProtocolWithChangesWriterBase::WriteUnionWithSameTypeset(std::variant<float, evo_test::RecordWithChanges, std::string, int32_t> const& value) {
  if (unlikely(state_ != 36)) {
    ProtocolWithChangesWriterBaseInvalidState(36, false, state_);
  }

  WriteUnionWithSameTypesetImpl(value);
  state_ = 37;
}

void ProtocolWithChangesWriterBase::WriteUnionWithTypesAdded(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string> const& value) {
  if (unlikely(state_ != 37)) {
    ProtocolWithChangesWriterBaseInvalidState(37, false, state_);
  }

  WriteUnionWithTypesAddedImpl(value);
  state_ = 38;
}

void ProtocolWithChangesWriterBase::WriteUnionWithTypesRemoved(std::variant<evo_test::RecordWithChanges, std::string> const& value) {
  if (unlikely(state_ != 38)) {
    ProtocolWithChangesWriterBaseInvalidState(38, false, state_);
  }

  WriteUnionWithTypesRemovedImpl(value);
  state_ = 39;
}

void ProtocolWithChangesWriterBase::WriteVectorRecordWithChanges(std::vector<evo_test::RecordWithChanges> const& value) {
  if (unlikely(state_ != 39)) {
    ProtocolWithChangesWriterBaseInvalidState(39, false, state_);
  }

  WriteVectorRecordWithChangesImpl(value);
  state_ = 40;
}

void ProtocolWithChangesWriterBase::WriteStreamedRecordWithChanges(evo_test::RecordWithChanges const& value) {
  if (unlikely(state_ != 40)) {
    ProtocolWithChangesWriterBaseInvalidState(40, false, state_);
  }

  WriteStreamedRecordWithChangesImpl(value);
}

void ProtocolWithChangesWriterBase::WriteStreamedRecordWithChanges(std::vector<evo_test::RecordWithChanges> const& values) {
  if (unlikely(state_ != 40)) {
    ProtocolWithChangesWriterBaseInvalidState(40, false, state_);
  }

  WriteStreamedRecordWithChangesImpl(values);
}

void ProtocolWithChangesWriterBase::EndStreamedRecordWithChanges() {
  if (unlikely(state_ != 40)) {
    ProtocolWithChangesWriterBaseInvalidState(40, true, state_);
  }

  EndStreamedRecordWithChangesImpl();
  state_ = 41;
}

// fallback implementation
void ProtocolWithChangesWriterBase::WriteStreamedRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges> const& values) {
  for (auto const& v : values) {
    WriteStreamedRecordWithChangesImpl(v);
  }
}

void ProtocolWithChangesWriterBase::Close() {
  if (unlikely(state_ != 41)) {
    ProtocolWithChangesWriterBaseInvalidState(41, false, state_);
  }

  CloseImpl();
}

std::string ProtocolWithChangesReaderBase::schema_ = ProtocolWithChangesWriterBase::schema_;

std::vector<std::string> ProtocolWithChangesReaderBase::previous_schemas_ = ProtocolWithChangesWriterBase::previous_schemas_;

Version ProtocolWithChangesReaderBase::VersionFromSchema(std::string const& schema) {
  if (schema == ProtocolWithChangesWriterBase::schema_) {
    return Version::Latest;
  }
  else if (schema == previous_schemas_[0]) {
    return Version::v0;
  }
  throw std::runtime_error("The schema does not match any version supported by protocol ProtocolWithChanges.");
}
void ProtocolWithChangesReaderBase::ReadInt8ToInt(int32_t& value) {
  if (unlikely(state_ != 0)) {
    ProtocolWithChangesReaderBaseInvalidState(0, state_);
  }

  ReadInt8ToIntImpl(value);
  state_ = 2;
}

void ProtocolWithChangesReaderBase::ReadInt8ToLong(int64_t& value) {
  if (unlikely(state_ != 2)) {
    ProtocolWithChangesReaderBaseInvalidState(2, state_);
  }

  ReadInt8ToLongImpl(value);
  state_ = 4;
}

void ProtocolWithChangesReaderBase::ReadInt8ToUint(uint32_t& value) {
  if (unlikely(state_ != 4)) {
    ProtocolWithChangesReaderBaseInvalidState(4, state_);
  }

  ReadInt8ToUintImpl(value);
  state_ = 6;
}

void ProtocolWithChangesReaderBase::ReadInt8ToUlong(uint64_t& value) {
  if (unlikely(state_ != 6)) {
    ProtocolWithChangesReaderBaseInvalidState(6, state_);
  }

  ReadInt8ToUlongImpl(value);
  state_ = 8;
}

void ProtocolWithChangesReaderBase::ReadInt8ToFloat(float& value) {
  if (unlikely(state_ != 8)) {
    ProtocolWithChangesReaderBaseInvalidState(8, state_);
  }

  ReadInt8ToFloatImpl(value);
  state_ = 10;
}

void ProtocolWithChangesReaderBase::ReadInt8ToDouble(double& value) {
  if (unlikely(state_ != 10)) {
    ProtocolWithChangesReaderBaseInvalidState(10, state_);
  }

  ReadInt8ToDoubleImpl(value);
  state_ = 12;
}

void ProtocolWithChangesReaderBase::ReadIntToUint(uint32_t& value) {
  if (unlikely(state_ != 12)) {
    ProtocolWithChangesReaderBaseInvalidState(12, state_);
  }

  ReadIntToUintImpl(value);
  state_ = 14;
}

void ProtocolWithChangesReaderBase::ReadIntToLong(int64_t& value) {
  if (unlikely(state_ != 14)) {
    ProtocolWithChangesReaderBaseInvalidState(14, state_);
  }

  ReadIntToLongImpl(value);
  state_ = 16;
}

void ProtocolWithChangesReaderBase::ReadIntToFloat(float& value) {
  if (unlikely(state_ != 16)) {
    ProtocolWithChangesReaderBaseInvalidState(16, state_);
  }

  ReadIntToFloatImpl(value);
  state_ = 18;
}

void ProtocolWithChangesReaderBase::ReadIntToDouble(double& value) {
  if (unlikely(state_ != 18)) {
    ProtocolWithChangesReaderBaseInvalidState(18, state_);
  }

  ReadIntToDoubleImpl(value);
  state_ = 20;
}

void ProtocolWithChangesReaderBase::ReadUintToUlong(uint64_t& value) {
  if (unlikely(state_ != 20)) {
    ProtocolWithChangesReaderBaseInvalidState(20, state_);
  }

  ReadUintToUlongImpl(value);
  state_ = 22;
}

void ProtocolWithChangesReaderBase::ReadUintToFloat(float& value) {
  if (unlikely(state_ != 22)) {
    ProtocolWithChangesReaderBaseInvalidState(22, state_);
  }

  ReadUintToFloatImpl(value);
  state_ = 24;
}

void ProtocolWithChangesReaderBase::ReadUintToDouble(double& value) {
  if (unlikely(state_ != 24)) {
    ProtocolWithChangesReaderBaseInvalidState(24, state_);
  }

  ReadUintToDoubleImpl(value);
  state_ = 26;
}

void ProtocolWithChangesReaderBase::ReadFloatToDouble(double& value) {
  if (unlikely(state_ != 26)) {
    ProtocolWithChangesReaderBaseInvalidState(26, state_);
  }

  ReadFloatToDoubleImpl(value);
  state_ = 28;
}

void ProtocolWithChangesReaderBase::ReadIntToString(std::string& value) {
  if (unlikely(state_ != 28)) {
    ProtocolWithChangesReaderBaseInvalidState(28, state_);
  }

  ReadIntToStringImpl(value);
  state_ = 30;
}

void ProtocolWithChangesReaderBase::ReadUintToString(std::string& value) {
  if (unlikely(state_ != 30)) {
    ProtocolWithChangesReaderBaseInvalidState(30, state_);
  }

  ReadUintToStringImpl(value);
  state_ = 32;
}

void ProtocolWithChangesReaderBase::ReadLongToString(std::string& value) {
  if (unlikely(state_ != 32)) {
    ProtocolWithChangesReaderBaseInvalidState(32, state_);
  }

  ReadLongToStringImpl(value);
  state_ = 34;
}

void ProtocolWithChangesReaderBase::ReadUlongToString(std::string& value) {
  if (unlikely(state_ != 34)) {
    ProtocolWithChangesReaderBaseInvalidState(34, state_);
  }

  ReadUlongToStringImpl(value);
  state_ = 36;
}

void ProtocolWithChangesReaderBase::ReadFloatToString(std::string& value) {
  if (unlikely(state_ != 36)) {
    ProtocolWithChangesReaderBaseInvalidState(36, state_);
  }

  ReadFloatToStringImpl(value);
  state_ = 38;
}

void ProtocolWithChangesReaderBase::ReadDoubleToString(std::string& value) {
  if (unlikely(state_ != 38)) {
    ProtocolWithChangesReaderBaseInvalidState(38, state_);
  }

  ReadDoubleToStringImpl(value);
  state_ = 40;
}

void ProtocolWithChangesReaderBase::ReadIntToOptional(std::optional<int32_t>& value) {
  if (unlikely(state_ != 40)) {
    ProtocolWithChangesReaderBaseInvalidState(40, state_);
  }

  ReadIntToOptionalImpl(value);
  state_ = 42;
}

void ProtocolWithChangesReaderBase::ReadFloatToOptional(std::optional<float>& value) {
  if (unlikely(state_ != 42)) {
    ProtocolWithChangesReaderBaseInvalidState(42, state_);
  }

  ReadFloatToOptionalImpl(value);
  state_ = 44;
}

void ProtocolWithChangesReaderBase::ReadStringToOptional(std::optional<std::string>& value) {
  if (unlikely(state_ != 44)) {
    ProtocolWithChangesReaderBaseInvalidState(44, state_);
  }

  ReadStringToOptionalImpl(value);
  state_ = 46;
}

void ProtocolWithChangesReaderBase::ReadIntToUnion(std::variant<int32_t, bool>& value) {
  if (unlikely(state_ != 46)) {
    ProtocolWithChangesReaderBaseInvalidState(46, state_);
  }

  ReadIntToUnionImpl(value);
  state_ = 48;
}

void ProtocolWithChangesReaderBase::ReadFloatToUnion(std::variant<float, bool>& value) {
  if (unlikely(state_ != 48)) {
    ProtocolWithChangesReaderBaseInvalidState(48, state_);
  }

  ReadFloatToUnionImpl(value);
  state_ = 50;
}

void ProtocolWithChangesReaderBase::ReadStringToUnion(std::variant<std::string, bool>& value) {
  if (unlikely(state_ != 50)) {
    ProtocolWithChangesReaderBaseInvalidState(50, state_);
  }

  ReadStringToUnionImpl(value);
  state_ = 52;
}

void ProtocolWithChangesReaderBase::ReadOptionalIntToFloat(std::optional<float>& value) {
  if (unlikely(state_ != 52)) {
    ProtocolWithChangesReaderBaseInvalidState(52, state_);
  }

  ReadOptionalIntToFloatImpl(value);
  state_ = 54;
}

void ProtocolWithChangesReaderBase::ReadOptionalFloatToString(std::optional<std::string>& value) {
  if (unlikely(state_ != 54)) {
    ProtocolWithChangesReaderBaseInvalidState(54, state_);
  }

  ReadOptionalFloatToStringImpl(value);
  state_ = 56;
}

void ProtocolWithChangesReaderBase::ReadAliasedLongToString(evo_test::AliasedLongToString& value) {
  if (unlikely(state_ != 56)) {
    ProtocolWithChangesReaderBaseInvalidState(56, state_);
  }

  ReadAliasedLongToStringImpl(value);
  state_ = 58;
}

void ProtocolWithChangesReaderBase::ReadOptionalIntToUnion(std::variant<std::monostate, int32_t, std::string>& value) {
  if (unlikely(state_ != 58)) {
    ProtocolWithChangesReaderBaseInvalidState(58, state_);
  }

  ReadOptionalIntToUnionImpl(value);
  state_ = 60;
}

void ProtocolWithChangesReaderBase::ReadOptionalRecordToUnion(std::variant<std::monostate, evo_test::RecordWithChanges, std::string>& value) {
  if (unlikely(state_ != 60)) {
    ProtocolWithChangesReaderBaseInvalidState(60, state_);
  }

  ReadOptionalRecordToUnionImpl(value);
  state_ = 62;
}

void ProtocolWithChangesReaderBase::ReadRecordWithChanges(evo_test::RecordWithChanges& value) {
  if (unlikely(state_ != 62)) {
    ProtocolWithChangesReaderBaseInvalidState(62, state_);
  }

  ReadRecordWithChangesImpl(value);
  state_ = 64;
}

void ProtocolWithChangesReaderBase::ReadAliasedRecordWithChanges(evo_test::AliasedRecordWithChanges& value) {
  if (unlikely(state_ != 64)) {
    ProtocolWithChangesReaderBaseInvalidState(64, state_);
  }

  ReadAliasedRecordWithChangesImpl(value);
  state_ = 66;
}

void ProtocolWithChangesReaderBase::ReadOptionalRecordWithChanges(std::optional<evo_test::RecordWithChanges>& value) {
  if (unlikely(state_ != 66)) {
    ProtocolWithChangesReaderBaseInvalidState(66, state_);
  }

  ReadOptionalRecordWithChangesImpl(value);
  state_ = 68;
}

void ProtocolWithChangesReaderBase::ReadAliasedOptionalRecordWithChanges(std::optional<evo_test::AliasedRecordWithChanges>& value) {
  if (unlikely(state_ != 68)) {
    ProtocolWithChangesReaderBaseInvalidState(68, state_);
  }

  ReadAliasedOptionalRecordWithChangesImpl(value);
  state_ = 70;
}

void ProtocolWithChangesReaderBase::ReadUnionRecordWithChanges(std::variant<evo_test::RecordWithChanges, int32_t>& value) {
  if (unlikely(state_ != 70)) {
    ProtocolWithChangesReaderBaseInvalidState(70, state_);
  }

  ReadUnionRecordWithChangesImpl(value);
  state_ = 72;
}

void ProtocolWithChangesReaderBase::ReadUnionWithSameTypeset(std::variant<float, evo_test::RecordWithChanges, std::string, int32_t>& value) {
  if (unlikely(state_ != 72)) {
    ProtocolWithChangesReaderBaseInvalidState(72, state_);
  }

  ReadUnionWithSameTypesetImpl(value);
  state_ = 74;
}

void ProtocolWithChangesReaderBase::ReadUnionWithTypesAdded(std::variant<evo_test::RecordWithChanges, int32_t, float, std::string>& value) {
  if (unlikely(state_ != 74)) {
    ProtocolWithChangesReaderBaseInvalidState(74, state_);
  }

  ReadUnionWithTypesAddedImpl(value);
  state_ = 76;
}

void ProtocolWithChangesReaderBase::ReadUnionWithTypesRemoved(std::variant<evo_test::RecordWithChanges, std::string>& value) {
  if (unlikely(state_ != 76)) {
    ProtocolWithChangesReaderBaseInvalidState(76, state_);
  }

  ReadUnionWithTypesRemovedImpl(value);
  state_ = 78;
}

void ProtocolWithChangesReaderBase::ReadVectorRecordWithChanges(std::vector<evo_test::RecordWithChanges>& value) {
  if (unlikely(state_ != 78)) {
    ProtocolWithChangesReaderBaseInvalidState(78, state_);
  }

  ReadVectorRecordWithChangesImpl(value);
  state_ = 80;
}

bool ProtocolWithChangesReaderBase::ReadStreamedRecordWithChanges(evo_test::RecordWithChanges& value) {
  if (unlikely(state_ != 80)) {
    if (state_ == 81) {
      state_ = 82;
      return false;
    }
    ProtocolWithChangesReaderBaseInvalidState(80, state_);
  }

  bool result = ReadStreamedRecordWithChangesImpl(value);
  if (!result) {
    state_ = 82;
  }
  return result;
}

bool ProtocolWithChangesReaderBase::ReadStreamedRecordWithChanges(std::vector<evo_test::RecordWithChanges>& values) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (unlikely(state_ != 80)) {
    if (state_ == 81) {
      state_ = 82;
      values.clear();
      return false;
    }
    ProtocolWithChangesReaderBaseInvalidState(80, state_);
  }

  if (!ReadStreamedRecordWithChangesImpl(values)) {
    state_ = 81;
    return values.size() > 0;
  }
  return true;
}

// fallback implementation
bool ProtocolWithChangesReaderBase::ReadStreamedRecordWithChangesImpl(std::vector<evo_test::RecordWithChanges>& values) {
  size_t i = 0;
  while (true) {
    if (i == values.size()) {
      values.resize(i + 1);
    }
    if (!ReadStreamedRecordWithChangesImpl(values[i])) {
      values.resize(i);
      return false;
    }
    i++;
    if (i == values.capacity()) {
      return true;
    }
  }
}

void ProtocolWithChangesReaderBase::Close() {
  if (unlikely(state_ != 82)) {
    ProtocolWithChangesReaderBaseInvalidState(82, state_);
  }

  CloseImpl();
}
void ProtocolWithChangesReaderBase::CopyTo(ProtocolWithChangesWriterBase& writer, size_t streamed_record_with_changes_buffer_size) {
  {
    int32_t value;
    ReadInt8ToInt(value);
    writer.WriteInt8ToInt(value);
  }
  {
    int64_t value;
    ReadInt8ToLong(value);
    writer.WriteInt8ToLong(value);
  }
  {
    uint32_t value;
    ReadInt8ToUint(value);
    writer.WriteInt8ToUint(value);
  }
  {
    uint64_t value;
    ReadInt8ToUlong(value);
    writer.WriteInt8ToUlong(value);
  }
  {
    float value;
    ReadInt8ToFloat(value);
    writer.WriteInt8ToFloat(value);
  }
  {
    double value;
    ReadInt8ToDouble(value);
    writer.WriteInt8ToDouble(value);
  }
  {
    uint32_t value;
    ReadIntToUint(value);
    writer.WriteIntToUint(value);
  }
  {
    int64_t value;
    ReadIntToLong(value);
    writer.WriteIntToLong(value);
  }
  {
    float value;
    ReadIntToFloat(value);
    writer.WriteIntToFloat(value);
  }
  {
    double value;
    ReadIntToDouble(value);
    writer.WriteIntToDouble(value);
  }
  {
    uint64_t value;
    ReadUintToUlong(value);
    writer.WriteUintToUlong(value);
  }
  {
    float value;
    ReadUintToFloat(value);
    writer.WriteUintToFloat(value);
  }
  {
    double value;
    ReadUintToDouble(value);
    writer.WriteUintToDouble(value);
  }
  {
    double value;
    ReadFloatToDouble(value);
    writer.WriteFloatToDouble(value);
  }
  {
    std::string value;
    ReadIntToString(value);
    writer.WriteIntToString(value);
  }
  {
    std::string value;
    ReadUintToString(value);
    writer.WriteUintToString(value);
  }
  {
    std::string value;
    ReadLongToString(value);
    writer.WriteLongToString(value);
  }
  {
    std::string value;
    ReadUlongToString(value);
    writer.WriteUlongToString(value);
  }
  {
    std::string value;
    ReadFloatToString(value);
    writer.WriteFloatToString(value);
  }
  {
    std::string value;
    ReadDoubleToString(value);
    writer.WriteDoubleToString(value);
  }
  {
    std::optional<int32_t> value;
    ReadIntToOptional(value);
    writer.WriteIntToOptional(value);
  }
  {
    std::optional<float> value;
    ReadFloatToOptional(value);
    writer.WriteFloatToOptional(value);
  }
  {
    std::optional<std::string> value;
    ReadStringToOptional(value);
    writer.WriteStringToOptional(value);
  }
  {
    std::variant<int32_t, bool> value;
    ReadIntToUnion(value);
    writer.WriteIntToUnion(value);
  }
  {
    std::variant<float, bool> value;
    ReadFloatToUnion(value);
    writer.WriteFloatToUnion(value);
  }
  {
    std::variant<std::string, bool> value;
    ReadStringToUnion(value);
    writer.WriteStringToUnion(value);
  }
  {
    std::optional<float> value;
    ReadOptionalIntToFloat(value);
    writer.WriteOptionalIntToFloat(value);
  }
  {
    std::optional<std::string> value;
    ReadOptionalFloatToString(value);
    writer.WriteOptionalFloatToString(value);
  }
  {
    evo_test::AliasedLongToString value;
    ReadAliasedLongToString(value);
    writer.WriteAliasedLongToString(value);
  }
  {
    std::variant<std::monostate, int32_t, std::string> value;
    ReadOptionalIntToUnion(value);
    writer.WriteOptionalIntToUnion(value);
  }
  {
    std::variant<std::monostate, evo_test::RecordWithChanges, std::string> value;
    ReadOptionalRecordToUnion(value);
    writer.WriteOptionalRecordToUnion(value);
  }
  {
    evo_test::RecordWithChanges value;
    ReadRecordWithChanges(value);
    writer.WriteRecordWithChanges(value);
  }
  {
    evo_test::AliasedRecordWithChanges value;
    ReadAliasedRecordWithChanges(value);
    writer.WriteAliasedRecordWithChanges(value);
  }
  {
    std::optional<evo_test::RecordWithChanges> value;
    ReadOptionalRecordWithChanges(value);
    writer.WriteOptionalRecordWithChanges(value);
  }
  {
    std::optional<evo_test::AliasedRecordWithChanges> value;
    ReadAliasedOptionalRecordWithChanges(value);
    writer.WriteAliasedOptionalRecordWithChanges(value);
  }
  {
    std::variant<evo_test::RecordWithChanges, int32_t> value;
    ReadUnionRecordWithChanges(value);
    writer.WriteUnionRecordWithChanges(value);
  }
  {
    std::variant<float, evo_test::RecordWithChanges, std::string, int32_t> value;
    ReadUnionWithSameTypeset(value);
    writer.WriteUnionWithSameTypeset(value);
  }
  {
    std::variant<evo_test::RecordWithChanges, int32_t, float, std::string> value;
    ReadUnionWithTypesAdded(value);
    writer.WriteUnionWithTypesAdded(value);
  }
  {
    std::variant<evo_test::RecordWithChanges, std::string> value;
    ReadUnionWithTypesRemoved(value);
    writer.WriteUnionWithTypesRemoved(value);
  }
  {
    std::vector<evo_test::RecordWithChanges> value;
    ReadVectorRecordWithChanges(value);
    writer.WriteVectorRecordWithChanges(value);
  }
  if (streamed_record_with_changes_buffer_size > 1) {
    std::vector<evo_test::RecordWithChanges> values;
    values.reserve(streamed_record_with_changes_buffer_size);
    while(ReadStreamedRecordWithChanges(values)) {
      writer.WriteStreamedRecordWithChanges(values);
    }
    writer.EndStreamedRecordWithChanges();
  } else {
    evo_test::RecordWithChanges value;
    while(ReadStreamedRecordWithChanges(value)) {
      writer.WriteStreamedRecordWithChanges(value);
    }
    writer.EndStreamedRecordWithChanges();
  }
}

namespace {
void UnusedProtocolWriterBaseInvalidState(uint8_t attempted, [[maybe_unused]] bool end, uint8_t current) {
  std::string expected_method;
  switch (current) {
  case 0: expected_method = "WriteSamples() or EndSamples()"; break;
  }
  std::string attempted_method;
  switch (attempted) {
  case 0: attempted_method = end ? "EndSamples()" : "WriteSamples()"; break;
  case 1: attempted_method = "Close()"; break;
  }
  throw std::runtime_error("Expected call to " + expected_method + " but received call to " + attempted_method + " instead.");
}

void UnusedProtocolReaderBaseInvalidState(uint8_t attempted, uint8_t current) {
  auto f = [](uint8_t i) -> std::string {
    switch (i/2) {
    case 0: return "ReadSamples()";
    case 1: return "Close()";
    default: return "<unknown>";
    }
  };
  throw std::runtime_error("Expected call to " + f(current) + " but received call to " + f(attempted) + " instead.");
}

} // namespace 

std::string UnusedProtocolWriterBase::schema_ = R"({"protocol":{"name":"UnusedProtocol","sequence":[{"name":"samples","type":{"stream":{"items":"EvoTest.UnchangedRecord"}}}]},"types":[{"name":"UnchangedRecord","fields":[{"name":"name","type":"string"},{"name":"age","type":"int32"},{"name":"meta","type":{"map":{"keys":"string","values":"float64"}}}]}]})";

std::vector<std::string> UnusedProtocolWriterBase::previous_schemas_ = {
  UnusedProtocolWriterBase::schema_,
};

std::string UnusedProtocolWriterBase::SchemaFromVersion(Version version) {
  switch (version) {
  case Version::v0: return previous_schemas_[0]; break;
  case Version::Latest: return UnusedProtocolWriterBase::schema_; break;
  default: throw std::runtime_error("The version does not correspond to any schema supported by protocol UnusedProtocol.");
  }

}
void UnusedProtocolWriterBase::WriteSamples(evo_test::UnchangedRecord const& value) {
  if (unlikely(state_ != 0)) {
    UnusedProtocolWriterBaseInvalidState(0, false, state_);
  }

  WriteSamplesImpl(value);
}

void UnusedProtocolWriterBase::WriteSamples(std::vector<evo_test::UnchangedRecord> const& values) {
  if (unlikely(state_ != 0)) {
    UnusedProtocolWriterBaseInvalidState(0, false, state_);
  }

  WriteSamplesImpl(values);
}

void UnusedProtocolWriterBase::EndSamples() {
  if (unlikely(state_ != 0)) {
    UnusedProtocolWriterBaseInvalidState(0, true, state_);
  }

  EndSamplesImpl();
  state_ = 1;
}

// fallback implementation
void UnusedProtocolWriterBase::WriteSamplesImpl(std::vector<evo_test::UnchangedRecord> const& values) {
  for (auto const& v : values) {
    WriteSamplesImpl(v);
  }
}

void UnusedProtocolWriterBase::Close() {
  if (unlikely(state_ != 1)) {
    UnusedProtocolWriterBaseInvalidState(1, false, state_);
  }

  CloseImpl();
}

std::string UnusedProtocolReaderBase::schema_ = UnusedProtocolWriterBase::schema_;

std::vector<std::string> UnusedProtocolReaderBase::previous_schemas_ = UnusedProtocolWriterBase::previous_schemas_;

Version UnusedProtocolReaderBase::VersionFromSchema(std::string const& schema) {
  if (schema == UnusedProtocolWriterBase::schema_) {
    return Version::Latest;
  }
  else if (schema == previous_schemas_[0]) {
    return Version::v0;
  }
  throw std::runtime_error("The schema does not match any version supported by protocol UnusedProtocol.");
}
bool UnusedProtocolReaderBase::ReadSamples(evo_test::UnchangedRecord& value) {
  if (unlikely(state_ != 0)) {
    if (state_ == 1) {
      state_ = 2;
      return false;
    }
    UnusedProtocolReaderBaseInvalidState(0, state_);
  }

  bool result = ReadSamplesImpl(value);
  if (!result) {
    state_ = 2;
  }
  return result;
}

bool UnusedProtocolReaderBase::ReadSamples(std::vector<evo_test::UnchangedRecord>& values) {
  if (values.capacity() == 0) {
    throw std::runtime_error("vector must have a nonzero capacity.");
  }
  if (unlikely(state_ != 0)) {
    if (state_ == 1) {
      state_ = 2;
      values.clear();
      return false;
    }
    UnusedProtocolReaderBaseInvalidState(0, state_);
  }

  if (!ReadSamplesImpl(values)) {
    state_ = 1;
    return values.size() > 0;
  }
  return true;
}

// fallback implementation
bool UnusedProtocolReaderBase::ReadSamplesImpl(std::vector<evo_test::UnchangedRecord>& values) {
  size_t i = 0;
  while (true) {
    if (i == values.size()) {
      values.resize(i + 1);
    }
    if (!ReadSamplesImpl(values[i])) {
      values.resize(i);
      return false;
    }
    i++;
    if (i == values.capacity()) {
      return true;
    }
  }
}

void UnusedProtocolReaderBase::Close() {
  if (unlikely(state_ != 2)) {
    UnusedProtocolReaderBaseInvalidState(2, state_);
  }

  CloseImpl();
}
void UnusedProtocolReaderBase::CopyTo(UnusedProtocolWriterBase& writer, size_t samples_buffer_size) {
  if (samples_buffer_size > 1) {
    std::vector<evo_test::UnchangedRecord> values;
    values.reserve(samples_buffer_size);
    while(ReadSamples(values)) {
      writer.WriteSamples(values);
    }
    writer.EndSamples();
  } else {
    evo_test::UnchangedRecord value;
    while(ReadSamples(value)) {
      writer.WriteSamples(value);
    }
    writer.EndSamples();
  }
}
} // namespace evo_test

% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef MyProtocolReaderBase < handle
  properties (Access=protected)
    state_
  end

  methods
    function self = MyProtocolReaderBase()
      self.state_ = 0;
    end

    function close(self)
      self.close_();
      if self.state_ ~= 4
        expected_method = self.state_to_method_name_(self.state_);
        throw(yardl.ProtocolError("Protocol reader closed before all data was consumed. Expected call to '%s'.", expected_method));
      end
    end

    % Ordinal 0
    function value = read_tree(self)
      if self.state_ ~= 0
        self.raise_unexpected_state_(0);
      end

      value = self.read_tree_();
      self.state_ = 1;
    end

    % Ordinal 1
    function value = read_ptree(self)
      if self.state_ ~= 1
        self.raise_unexpected_state_(1);
      end

      value = self.read_ptree_();
      self.state_ = 2;
    end

    % Ordinal 2
    function value = read_list(self)
      if self.state_ ~= 2
        self.raise_unexpected_state_(2);
      end

      value = self.read_list_();
      self.state_ = 3;
    end

    % Ordinal 3
    function more = has_cwd(self)
      if self.state_ ~= 3
        self.raise_unexpected_state_(3);
      end

      more = self.has_cwd_();
      if ~more
        self.state_ = 4;
      end
    end

    % dirs: !stream
    %   items: Directory
    function value = read_cwd(self)
      if self.state_ ~= 3
        self.raise_unexpected_state_(3);
      end

      value = self.read_cwd_();
    end

    function copy_to(self, writer)
      writer.write_tree(self.read_tree());
      writer.write_ptree(self.read_ptree());
      writer.write_list(self.read_list());
      while self.has_cwd()
        item = self.read_cwd();
        writer.write_cwd({item});
      end
      writer.end_cwd();
    end
  end

  methods (Static)
    function res = schema()
      res = sketch.MyProtocolWriterBase.schema;
    end
  end

  methods (Abstract, Access=protected)
    read_tree_(self)
    read_ptree_(self)
    read_list_(self)
    has_cwd_(self)
    read_cwd_(self)

    close_(self)
  end

  methods (Access=private)
    function raise_unexpected_state_(self, actual)
      actual_method = self.state_to_method_name_(actual);
      expected_method = self.state_to_method_name_(self.state_);
      throw(yardl.ProtocolError("Expected call to '%s' but received call to '%s'.", expected_method, actual_method));
    end

    function name = state_to_method_name_(self, state)
      if state == 0
        name = "read_tree";
      elseif state == 1
        name = "read_ptree";
      elseif state == 2
        name = "read_list";
      elseif state == 3
        name = "read_cwd";
      else
        name = "<unknown>";
      end
    end
  end
end

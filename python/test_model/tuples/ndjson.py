# This file was generated by the "yardl" tool. DO NOT EDIT.

# pyright: reportUnusedClass=false
# pyright: reportUnusedImport=false
# pyright: reportUnknownArgumentType=false
# pyright: reportUnknownMemberType=false
# pyright: reportUnknownVariableType=false

import collections.abc
import io
import typing

import numpy as np
import numpy.typing as npt

from .types import *

from .. import _ndjson
from .. import yardl_types as yardl

class TupleConverter(typing.Generic[T1, T1_NP, T2, T2_NP], _ndjson.JsonConverter[Tuple[T1, T2], np.void]):
    def __init__(self, t1_converter: _ndjson.JsonConverter[T1, T1_NP], t2_converter: _ndjson.JsonConverter[T2, T2_NP]) -> None:
        self._v1_converter = t1_converter
        self._v1_supports_none = self._v1_converter.supports_none()
        self._v2_converter = t2_converter
        self._v2_supports_none = self._v2_converter.supports_none()
        super().__init__(np.dtype([
            ("v1", self._v1_converter.overall_dtype()),
            ("v2", self._v2_converter.overall_dtype()),
        ]))

    def to_json(self, value: Tuple[T1, T2]) -> object:
        if not isinstance(value, Tuple): # pyright: ignore [reportUnnecessaryIsInstance]
            raise TypeError("Expected 'Tuple[T1, T2]' instance")
        json_object = {}

        if not self._v1_supports_none or value.v1 is not None:
            json_object["v1"] = self._v1_converter.to_json(value.v1)
        if not self._v2_supports_none or value.v2 is not None:
            json_object["v2"] = self._v2_converter.to_json(value.v2)
        return json_object

    def numpy_to_json(self, value: np.void) -> object:
        if not isinstance(value, np.void): # pyright: ignore [reportUnnecessaryIsInstance]
            raise TypeError("Expected 'np.void' instance")
        json_object = {}

        if not self._v1_supports_none or value["v1"] is not None:
            json_object["v1"] = self._v1_converter.numpy_to_json(value["v1"])
        if not self._v2_supports_none or value["v2"] is not None:
            json_object["v2"] = self._v2_converter.numpy_to_json(value["v2"])
        return json_object

    def from_json(self, json_object: object) -> Tuple[T1, T2]:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return Tuple[T1, T2](
            v1=self._v1_converter.from_json(json_object.get("v1") if self._v1_supports_none else json_object["v1"]),
            v2=self._v2_converter.from_json(json_object.get("v2") if self._v2_supports_none else json_object["v2"]),
        )

    def from_json_to_numpy(self, json_object: object) -> np.void:
        if not isinstance(json_object, dict):
            raise TypeError("Expected 'dict' instance")
        return (
            self._v1_converter.from_json_to_numpy(json_object.get("v1") if self._v1_supports_none else json_object["v1"]),
            self._v2_converter.from_json_to_numpy(json_object.get("v2") if self._v2_supports_none else json_object["v2"]),
        ) # type:ignore 



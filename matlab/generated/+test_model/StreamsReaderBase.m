% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef StreamsReaderBase < handle
  properties (Access=protected)
    state_
  end

  methods
    function self = StreamsReaderBase()
      self.state_ = 0;
    end

    function close(self)
      self.close_();
      if self.state_ ~= 4
        expected_method = self.state_to_method_name_(self.state_);
        throw(yardl.ProtocolError("Protocol reader closed before all data was consumed. Expected call to '%s'.", expected_method));
      end
    end

    % Ordinal 0
    function more = has_int_data(self)
      if self.state_ ~= 0
        self.raise_unexpected_state_(0);
      end

      more = self.has_int_data_();
      if ~more
        self.state_ = 1;
      end
    end

    function value = read_int_data(self)
      if self.state_ ~= 0
        self.raise_unexpected_state_(0);
      end

      value = self.read_int_data_();
    end

    % Ordinal 1
    function more = has_optional_int_data(self)
      if self.state_ ~= 1
        self.raise_unexpected_state_(1);
      end

      more = self.has_optional_int_data_();
      if ~more
        self.state_ = 2;
      end
    end

    function value = read_optional_int_data(self)
      if self.state_ ~= 1
        self.raise_unexpected_state_(1);
      end

      value = self.read_optional_int_data_();
    end

    % Ordinal 2
    function more = has_record_with_optional_vector_data(self)
      if self.state_ ~= 2
        self.raise_unexpected_state_(2);
      end

      more = self.has_record_with_optional_vector_data_();
      if ~more
        self.state_ = 3;
      end
    end

    function value = read_record_with_optional_vector_data(self)
      if self.state_ ~= 2
        self.raise_unexpected_state_(2);
      end

      value = self.read_record_with_optional_vector_data_();
    end

    % Ordinal 3
    function more = has_fixed_vector(self)
      if self.state_ ~= 3
        self.raise_unexpected_state_(3);
      end

      more = self.has_fixed_vector_();
      if ~more
        self.state_ = 4;
      end
    end

    function value = read_fixed_vector(self)
      if self.state_ ~= 3
        self.raise_unexpected_state_(3);
      end

      value = self.read_fixed_vector_();
    end

    function copy_to(self, writer)
      while self.has_int_data()
        item = self.read_int_data();
        writer.write_int_data({item});
      end
      writer.end_int_data();
      while self.has_optional_int_data()
        item = self.read_optional_int_data();
        writer.write_optional_int_data({item});
      end
      writer.end_optional_int_data();
      while self.has_record_with_optional_vector_data()
        item = self.read_record_with_optional_vector_data();
        writer.write_record_with_optional_vector_data({item});
      end
      writer.end_record_with_optional_vector_data();
      while self.has_fixed_vector()
        item = self.read_fixed_vector();
        writer.write_fixed_vector({item});
      end
      writer.end_fixed_vector();
    end
  end

  methods (Static)
    function res = schema()
      res = test_model.StreamsWriterBase.schema;
    end
  end

  methods (Abstract, Access=protected)
    has_int_data_(self)
    read_int_data_(self)
    has_optional_int_data_(self)
    read_optional_int_data_(self)
    has_record_with_optional_vector_data_(self)
    read_record_with_optional_vector_data_(self)
    has_fixed_vector_(self)
    read_fixed_vector_(self)

    close_(self)
  end

  methods (Access=private)
    function raise_unexpected_state_(self, actual)
      actual_method = self.state_to_method_name_(actual);
      expected_method = self.state_to_method_name_(self.state_);
      throw(yardl.ProtocolError("Expected call to '%s' but received call to '%s'.", expected_method, actual_method));
    end

    function name = state_to_method_name_(self, state)
      if state == 0
        name = "read_int_data";
      elseif state == 1
        name = "read_optional_int_data";
      elseif state == 2
        name = "read_record_with_optional_vector_data";
      elseif state == 3
        name = "read_fixed_vector";
      else
        name = "<unknown>";
      end
    end
  end
end

// This file was generated by the "yardl" tool. DO NOT EDIT.

#pragma once
#include "types.h"

namespace sketch {
enum class Version {
  Current
};
// Abstract writer for the MyProtocol protocol.
class MyProtocolWriterBase {
  public:
  // Ordinal 0.
  void WriteHeader(sketch::Header const& value);

  // Ordinal 1.
  // Call this method for each element of the `samples` stream, then call `EndSamples() when done.`
  void WriteSamples(sketch::Sample const& value);

  // Ordinal 1.
  // Call this method to write many values to the `samples` stream, then call `EndSamples()` when done.
  void WriteSamples(std::vector<sketch::Sample> const& values);

  // Marks the end of the `samples` stream.
  void EndSamples();

  // Optionaly close this writer before destructing. Validates that all steps were completed.
  void Close();

  virtual ~MyProtocolWriterBase() = default;

  // Flushes all buffered data.
  virtual void Flush() {}

  protected:
  virtual void WriteHeaderImpl(sketch::Header const& value) = 0;
  virtual void WriteSamplesImpl(sketch::Sample const& value) = 0;
  virtual void WriteSamplesImpl(std::vector<sketch::Sample> const& value);
  virtual void EndSamplesImpl() = 0;
  virtual void CloseImpl() {}

  static std::string schema_;

  static std::vector<std::string> previous_schemas_;

  static std::string SchemaFromVersion(Version version);

  private:
  virtual void InvalidState(uint8_t attempted, [[maybe_unused]] bool end);
  uint8_t state_ = 0;

  friend class MyProtocolReaderBase;
  friend class MyProtocolIndexedReaderBase;
};

// Abstract reader for the MyProtocol protocol.
class MyProtocolReaderBase {
  public:
  // Ordinal 0.
  void ReadHeader(sketch::Header& value);

  // Ordinal 1.
  [[nodiscard]] bool ReadSamples(sketch::Sample& value);

  // Ordinal 1.
  [[nodiscard]] bool ReadSamples(std::vector<sketch::Sample>& values);

  // Optionaly close this writer before destructing. Validates that all steps were completely read.
  void Close();

  void CopyTo(MyProtocolWriterBase& writer, size_t samples_buffer_size = 1);

  virtual ~MyProtocolReaderBase() = default;

  protected:
  virtual void ReadHeaderImpl(sketch::Header& value) = 0;
  virtual bool ReadSamplesImpl(sketch::Sample& value) = 0;
  virtual bool ReadSamplesImpl(std::vector<sketch::Sample>& values);
  virtual void CloseImpl() {}
  static std::string schema_;

  static std::vector<std::string> previous_schemas_;

  static Version VersionFromSchema(const std::string& schema);

  private:
  virtual void InvalidState(uint8_t attempted);
  uint8_t state_ = 0;
};

// Abstract Indexed reader for the MyProtocol protocol.
class MyProtocolIndexedReaderBase : public MyProtocolReaderBase {
  public:
  using MyProtocolReaderBase::ReadSamples;
  [[nodiscard]] bool ReadSamples(sketch::Sample& value, size_t idx);
  [[nodiscard]] bool ReadSamples(std::vector<sketch::Sample>& values, size_t idx);
  [[nodiscard]] size_t CountSamples();

  virtual ~MyProtocolIndexedReaderBase() = default;

  protected:
  virtual bool ReadSamplesImpl(sketch::Sample& value, size_t idx) = 0;
  virtual bool ReadSamplesImpl(std::vector<sketch::Sample>& values, size_t idx) = 0;
  virtual size_t CountSamplesImpl() = 0;
  virtual void CloseImpl() {}
  private:
  virtual void InvalidState(uint8_t attempted) override;
};
} // namespace sketch

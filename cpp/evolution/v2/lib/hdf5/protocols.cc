// This file was generated by the "yardl" tool. DO NOT EDIT.

#include "protocols.h"

#include "../yardl/detail/hdf5/io.h"
#include "../yardl/detail/hdf5/ddl.h"
#include "../yardl/detail/hdf5/inner_types.h"

namespace {
template <typename TInner0, typename TOuter0, typename TInner1, typename TOuter1>
class InnerUnion2 {
  public:
  InnerUnion2() : type_index_(-1) {} 
  InnerUnion2(std::variant<TOuter0, TOuter1> const& v) : type_index_(static_cast<int8_t>(v.index())) {
    Init(v);
  }

  InnerUnion2(std::variant<std::monostate, TOuter0, TOuter1> const& v) : type_index_(static_cast<int8_t>(v.index()) - 1) {
    Init(v);
  }

  InnerUnion2(InnerUnion2 const& v) = delete;

  InnerUnion2 operator=(InnerUnion2 const&) = delete;

  ~InnerUnion2() {
    switch (type_index_) {
    case 0:
      value0_.~TInner0();
      break;
    case 1:
      value1_.~TInner1();
      break;
    }
  }

  void ToOuter(std::variant<TOuter0, TOuter1>& o) const {
    ToOuterImpl(o);
  }

  void ToOuter(std::variant<std::monostate, TOuter0, TOuter1>& o) const {
    ToOuterImpl(o);
  }

  int8_t type_index_;
  union {
    char empty0_[sizeof(TInner0)]{};
    TInner0 value0_;
  };
  union {
    char empty1_[sizeof(TInner1)]{};
    TInner1 value1_;
  };

  private:
  template <typename T>
  void Init(T const& v) {
    constexpr size_t offset = GetOuterVariantOffset<std::remove_const_t<std::remove_reference_t<decltype(v)>>>();
    switch (type_index_) {
    case 0:
      new (&value0_) TInner0(std::get<0 + offset>(v));
      return;
    case 1:
      new (&value1_) TInner1(std::get<1 + offset>(v));
      return;
    }
  }

  template <typename TVariant>
  void ToOuterImpl(TVariant& o) const {
    constexpr size_t offset = GetOuterVariantOffset<TVariant>();
    switch (type_index_) {
    case -1:
      if constexpr (offset == 1) {
        o.template emplace<0>(std::monostate{});
        return;
      }
    case 0:
      o.template emplace<0 + offset>();
      yardl::hdf5::ToOuter(value0_, std::get<0 + offset>(o));
      return;
    case 1:
      o.template emplace<1 + offset>();
      yardl::hdf5::ToOuter(value1_, std::get<1 + offset>(o));
      return;
    }
    throw std::runtime_error("unrecognized type variant type index " + std::to_string(type_index_));
  }

  template <typename TVariant>
  static constexpr size_t GetOuterVariantOffset() {
    constexpr bool has_monostate = std::is_same_v<std::monostate, std::variant_alternative_t<0, TVariant>>;
    if constexpr (has_monostate) {
      return 1;
    }
      return 0;
  }
};

template <typename TInner0, typename TOuter0, typename TInner1, typename TOuter1>
H5::CompType InnerUnion2Ddl(bool nullable, H5::DataType const& t0, std::string const& tag0, H5::DataType const& t1, std::string const& tag1) {
  using UnionType = ::InnerUnion2<TInner0, TOuter0, TInner1, TOuter1>;
  H5::CompType rtn(sizeof(UnionType));
  rtn.insertMember("$type", HOFFSET(UnionType, type_index_), yardl::hdf5::UnionTypeEnumDdl(nullable, tag0, tag1));
  rtn.insertMember(tag0, HOFFSET(UnionType, value0_), t0);
  rtn.insertMember(tag1, HOFFSET(UnionType, value1_), t1);
  return rtn;
}
}

namespace evo_test::hdf5 {
namespace {
struct _Inner_Header {
  _Inner_Header() {} 
  _Inner_Header(evo_test::Header const& o) 
      : subject(o.subject),
      meta(o.meta),
      weight(o.weight) {
  }

  void ToOuter (evo_test::Header& o) const {
    yardl::hdf5::ToOuter(subject, o.subject);
    yardl::hdf5::ToOuter(meta, o.meta);
    yardl::hdf5::ToOuter(weight, o.weight);
  }

  ::InnerUnion2<int64_t, int64_t, yardl::hdf5::InnerVlenString, std::string> subject;
  yardl::hdf5::InnerMap<yardl::hdf5::InnerVlenString, std::string, yardl::hdf5::InnerVlen<yardl::hdf5::InnerVlenString, std::string>, std::vector<std::string>> meta;
  double weight;
};

struct _Inner_Sample {
  _Inner_Sample() {} 
  _Inner_Sample(evo_test::Sample const& o) 
      : timestamp(o.timestamp),
      data(o.data) {
  }

  void ToOuter (evo_test::Sample& o) const {
    yardl::hdf5::ToOuter(timestamp, o.timestamp);
    yardl::hdf5::ToOuter(data, o.data);
  }

  yardl::DateTime timestamp;
  yardl::hdf5::InnerVlen<int32_t, int32_t> data;
};

struct _Inner_Signature {
  _Inner_Signature() {} 
  _Inner_Signature(evo_test::Signature const& o) 
      : name(o.name),
      email(o.email),
      number(o.number) {
  }

  void ToOuter (evo_test::Signature& o) const {
    yardl::hdf5::ToOuter(name, o.name);
    yardl::hdf5::ToOuter(email, o.email);
    yardl::hdf5::ToOuter(number, o.number);
  }

  yardl::hdf5::InnerVlenString name;
  yardl::hdf5::InnerVlenString email;
  yardl::hdf5::InnerVlenString number;
};

struct _Inner_Footer {
  _Inner_Footer() {} 
  _Inner_Footer(evo_test::Footer const& o) 
      : signature(o.signature) {
  }

  void ToOuter (evo_test::Footer& o) const {
    yardl::hdf5::ToOuter(signature, o.signature);
  }

  evo_test::hdf5::_Inner_Signature signature;
};

struct _Inner_NewRecord {
  _Inner_NewRecord() {} 
  _Inner_NewRecord(evo_test::NewRecord const& o) 
      : stuff(o.stuff) {
  }

  void ToOuter (evo_test::NewRecord& o) const {
    yardl::hdf5::ToOuter(stuff, o.stuff);
  }

  yardl::hdf5::InnerDynamicNdArray<double, double> stuff;
};

[[maybe_unused]] H5::CompType GetHeaderHdf5Ddl() {
  using RecordType = evo_test::hdf5::_Inner_Header;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("subject", HOFFSET(RecordType, subject), ::InnerUnion2Ddl<int64_t, int64_t, yardl::hdf5::InnerVlenString, std::string>(false, H5::PredType::NATIVE_INT64, "int64", yardl::hdf5::InnerVlenStringDdl(), "string"));
  t.insertMember("meta", HOFFSET(RecordType, meta), yardl::hdf5::InnerMapDdl<yardl::hdf5::InnerVlenString, yardl::hdf5::InnerVlen<yardl::hdf5::InnerVlenString, std::string>>(yardl::hdf5::InnerVlenStringDdl(), yardl::hdf5::InnerVlenDdl(yardl::hdf5::InnerVlenStringDdl())));
  t.insertMember("weight", HOFFSET(RecordType, weight), H5::PredType::NATIVE_DOUBLE);
  return t;
}

[[maybe_unused]] H5::CompType GetSampleHdf5Ddl() {
  using RecordType = evo_test::hdf5::_Inner_Sample;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("timestamp", HOFFSET(RecordType, timestamp), yardl::hdf5::DateTimeTypeDdl());
  t.insertMember("data", HOFFSET(RecordType, data), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32));
  return t;
}

[[maybe_unused]] H5::CompType GetSignatureHdf5Ddl() {
  using RecordType = evo_test::hdf5::_Inner_Signature;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("name", HOFFSET(RecordType, name), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("email", HOFFSET(RecordType, email), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("number", HOFFSET(RecordType, number), yardl::hdf5::InnerVlenStringDdl());
  return t;
}

[[maybe_unused]] H5::CompType GetFooterHdf5Ddl() {
  using RecordType = evo_test::hdf5::_Inner_Footer;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("signature", HOFFSET(RecordType, signature), evo_test::hdf5::GetSignatureHdf5Ddl());
  return t;
}

[[maybe_unused]] H5::CompType GetNewRecordHdf5Ddl() {
  using RecordType = evo_test::hdf5::_Inner_NewRecord;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("stuff", HOFFSET(RecordType, stuff), yardl::hdf5::DynamicNDArrayDdl<double, double>(H5::PredType::NATIVE_DOUBLE));
  return t;
}

} // namespace 

MyProtocolWriter::MyProtocolWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "MyProtocol", schema_) {
}

void MyProtocolWriter::WriteHeaderImpl(evo_test::Header const& value) {
  yardl::hdf5::WriteScalarDataset<evo_test::hdf5::_Inner_Header, evo_test::Header>(group_, "header", evo_test::hdf5::GetHeaderHdf5Ddl(), value);
}

void MyProtocolWriter::WriteIdImpl(std::string const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerVlenString, std::string>(group_, "id", yardl::hdf5::InnerVlenStringDdl(), value);
}

void MyProtocolWriter::WriteSamplesImpl(evo_test::Sample const& value) {
  if (!samples_dataset_state_) {
    samples_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "samples", evo_test::hdf5::GetSampleHdf5Ddl(), std::max(sizeof(evo_test::hdf5::_Inner_Sample), sizeof(evo_test::Sample)));
  }

  samples_dataset_state_->Append<evo_test::hdf5::_Inner_Sample, evo_test::Sample>(value);
}

void MyProtocolWriter::WriteSamplesImpl(std::vector<evo_test::Sample> const& values) {
  if (!samples_dataset_state_) {
    samples_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "samples", evo_test::hdf5::GetSampleHdf5Ddl(), std::max(sizeof(evo_test::hdf5::_Inner_Sample), sizeof(evo_test::Sample)));
  }

  samples_dataset_state_->AppendBatch<evo_test::hdf5::_Inner_Sample, evo_test::Sample>(values);
}

void MyProtocolWriter::EndSamplesImpl() {
  if (!samples_dataset_state_) {
    samples_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "samples", evo_test::hdf5::GetSampleHdf5Ddl(), std::max(sizeof(evo_test::hdf5::_Inner_Sample), sizeof(evo_test::Sample)));
  }

  samples_dataset_state_.reset();
}

void MyProtocolWriter::WriteFooterImpl(std::optional<evo_test::Footer> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerOptional<evo_test::hdf5::_Inner_Footer, evo_test::Footer>, std::optional<evo_test::Footer>>(group_, "footer", yardl::hdf5::OptionalTypeDdl<evo_test::hdf5::_Inner_Footer, evo_test::Footer>(evo_test::hdf5::GetFooterHdf5Ddl()), value);
}

MyProtocolReader::MyProtocolReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "MyProtocol", schema_) {
}

void MyProtocolReader::ReadHeaderImpl(evo_test::Header& value) {
  yardl::hdf5::ReadScalarDataset<evo_test::hdf5::_Inner_Header, evo_test::Header>(group_, "header", evo_test::hdf5::GetHeaderHdf5Ddl(), value);
}

void MyProtocolReader::ReadIdImpl(std::string& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerVlenString, std::string>(group_, "id", yardl::hdf5::InnerVlenStringDdl(), value);
}

bool MyProtocolReader::ReadSamplesImpl(evo_test::Sample& value) {
  if (!samples_dataset_state_) {
    samples_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "samples", evo_test::hdf5::GetSampleHdf5Ddl(), std::max(sizeof(evo_test::hdf5::_Inner_Sample), sizeof(evo_test::Sample)));
  }

  bool has_value = samples_dataset_state_->Read<evo_test::hdf5::_Inner_Sample, evo_test::Sample>(value);
  if (!has_value) {
    samples_dataset_state_.reset();
  }

  return has_value;
}

bool MyProtocolReader::ReadSamplesImpl(std::vector<evo_test::Sample>& values) {
  if (!samples_dataset_state_) {
    samples_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "samples", evo_test::hdf5::GetSampleHdf5Ddl());
  }

  bool has_more = samples_dataset_state_->ReadBatch<evo_test::hdf5::_Inner_Sample, evo_test::Sample>(values);
  if (!has_more) {
    samples_dataset_state_.reset();
  }

  return has_more;
}

void MyProtocolReader::ReadFooterImpl(std::optional<evo_test::Footer>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerOptional<evo_test::hdf5::_Inner_Footer, evo_test::Footer>, std::optional<evo_test::Footer>>(group_, "footer", yardl::hdf5::OptionalTypeDdl<evo_test::hdf5::_Inner_Footer, evo_test::Footer>(evo_test::hdf5::GetFooterHdf5Ddl()), value);
}

NewProtocolWriter::NewProtocolWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "NewProtocol", schema_) {
}

void NewProtocolWriter::WriteCalibrationImpl(std::vector<double> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerVlen<double, double>, std::vector<double>>(group_, "calibration", yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_DOUBLE), value);
}

void NewProtocolWriter::WriteDataImpl(evo_test::NewRecord const& value) {
  if (!data_dataset_state_) {
    data_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "data", evo_test::hdf5::GetNewRecordHdf5Ddl(), std::max(sizeof(evo_test::hdf5::_Inner_NewRecord), sizeof(evo_test::NewRecord)));
  }

  data_dataset_state_->Append<evo_test::hdf5::_Inner_NewRecord, evo_test::NewRecord>(value);
}

void NewProtocolWriter::WriteDataImpl(std::vector<evo_test::NewRecord> const& values) {
  if (!data_dataset_state_) {
    data_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "data", evo_test::hdf5::GetNewRecordHdf5Ddl(), std::max(sizeof(evo_test::hdf5::_Inner_NewRecord), sizeof(evo_test::NewRecord)));
  }

  data_dataset_state_->AppendBatch<evo_test::hdf5::_Inner_NewRecord, evo_test::NewRecord>(values);
}

void NewProtocolWriter::EndDataImpl() {
  if (!data_dataset_state_) {
    data_dataset_state_ = std::make_unique<yardl::hdf5::DatasetWriter>(group_, "data", evo_test::hdf5::GetNewRecordHdf5Ddl(), std::max(sizeof(evo_test::hdf5::_Inner_NewRecord), sizeof(evo_test::NewRecord)));
  }

  data_dataset_state_.reset();
}

NewProtocolReader::NewProtocolReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "NewProtocol", schema_) {
}

void NewProtocolReader::ReadCalibrationImpl(std::vector<double>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerVlen<double, double>, std::vector<double>>(group_, "calibration", yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_DOUBLE), value);
}

bool NewProtocolReader::ReadDataImpl(evo_test::NewRecord& value) {
  if (!data_dataset_state_) {
    data_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "data", evo_test::hdf5::GetNewRecordHdf5Ddl(), std::max(sizeof(evo_test::hdf5::_Inner_NewRecord), sizeof(evo_test::NewRecord)));
  }

  bool has_value = data_dataset_state_->Read<evo_test::hdf5::_Inner_NewRecord, evo_test::NewRecord>(value);
  if (!has_value) {
    data_dataset_state_.reset();
  }

  return has_value;
}

bool NewProtocolReader::ReadDataImpl(std::vector<evo_test::NewRecord>& values) {
  if (!data_dataset_state_) {
    data_dataset_state_ = std::make_unique<yardl::hdf5::DatasetReader>(group_, "data", evo_test::hdf5::GetNewRecordHdf5Ddl());
  }

  bool has_more = data_dataset_state_->ReadBatch<evo_test::hdf5::_Inner_NewRecord, evo_test::NewRecord>(values);
  if (!has_more) {
    data_dataset_state_.reset();
  }

  return has_more;
}

} // namespace evo_test::hdf5


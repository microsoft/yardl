# This file was generated by the "yardl" tool. DO NOT EDIT.


import abc
import collections.abc
import datetime
import typing
import numpy as np
import numpy.typing as npt

from . import *
from . import _binary
from . import yardl_types as yardl

# pyright: reportUnusedClass=false

T = typing.TypeVar('T')

class _MyRecWriter(_binary.RecordWriter[MyRec[T]]):
    def __init__(self, write_t: _binary.Writer[T]) -> None:
        super().__init__([_binary.write_int8, write_t, _binary.EnumWriter(_binary.write_uint8)])

    def __call__(self, stream: _binary.CodedOutputStream, value: MyRec[T]) -> None:
        self._write(stream, value.f1, value.f2, value.f3)


class _PointWriter(_binary.RecordWriter[Point]):
    def __init__(self) -> None:
        super().__init__([_binary.write_float32, _binary.write_float32])

    def __call__(self, stream: _binary.CodedOutputStream, value: Point) -> None:
        self._write(stream, value.x, value.y)


class _MyStructWriter(_binary.RecordWriter[MyStruct]):
    def __init__(self) -> None:
        super().__init__([_binary.FixedNDArrayWriter(_PointWriter(), np.dtype([('x', np.float32), ('y', np.float32)], align=True), True, (2,))])

    def __call__(self, stream: _binary.CodedOutputStream, value: MyStruct) -> None:
        self._write(stream, value.points)


class BinaryP1Writer(P1WriterBase, _binary.BinaryProtocolWriter):
    """Binary writer for the P1 protocol."""

    def __init__(self, stream: typing.BinaryIO | str) -> None:
        P1WriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, P1WriterBase.schema)

    def _write_complicated_arr(self, value: npt.NDArray[np.void]) -> None:
        _binary.DynamicNDArrayWriter(_MyStructWriter(), np.dtype([('points', np.dtype([('x', np.float32), ('y', np.float32)], align=True), (2))], align=True), False)(self._stream, value)


class BinaryP1Reader(P1ReaderBase):
    """Binary writer for the P1 protocol."""

    def _read_complicated_arr(self) -> npt.NDArray[np.void]:
        raise NotImplementedError()


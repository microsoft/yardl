# This file was generated by the "yardl" tool. DO NOT EDIT.

# pyright: reportUnusedClass=false

import collections.abc
import datetime
import io
import typing
import numpy as np
import numpy.typing as npt

from . import *
from . import _binary
from . import yardl_types as yardl

T = typing.TypeVar('T')
T_NP = typing.TypeVar('T_NP', bound=np.generic)

class BinaryP1Writer(_binary.BinaryProtocolWriter, P1WriterBase):
    """Binary writer for the P1 protocol."""

    def __init__(self, stream: typing.BinaryIO | str) -> None:
        P1WriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, P1WriterBase.schema)

    def _write_my_value(self, value: DualGenRec[yardl.Int32, np.int32]) -> None:
        _DualGenRecSerializer(_binary.int32_serializer).write(self._stream, value)


class BinaryP1Reader(_binary.BinaryProtocolReader, P1ReaderBase):
    """Binary writer for the P1 protocol."""

    def __init__(self, stream: io.BufferedReader | str, read_as_numpy: Types) -> None:
        P1ReaderBase.__init__(self, read_as_numpy)
        _binary.BinaryProtocolReader.__init__(self, stream, P1ReaderBase.schema)

    def _read_my_value(self) -> DualGenRec[yardl.Int32, np.int32]:
        return _DualGenRecSerializer(_binary.int32_serializer).read(self._stream, self._read_as_numpy)

class _PTSerializer(typing.Generic[T, T_NP], _binary.RecordSerializer[PT[T]]):
    def __init__(self, t_serializer: _binary.TypeSerializer[T, T_NP]) -> None:
        super().__init__([("x", t_serializer), ("y", t_serializer)])

    def write(self, stream: _binary.CodedOutputStream, value: PT[T]) -> None:
        self._write(stream, value.x, value.y)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['x'], value['y'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> PT[T]:
        field_values = self._read(stream, read_as_numpy)
        return PT[T](x=field_values[0], y=field_values[1])


class _PFloatSerializer(_binary.RecordSerializer[PFloat]):
    def __init__(self) -> None:
        super().__init__([("x", _binary.float32_serializer), ("y", _binary.float32_serializer)])

    def write(self, stream: _binary.CodedOutputStream, value: PFloat) -> None:
        self._write(stream, value.x, value.y)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['x'], value['y'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> PFloat:
        field_values = self._read(stream, read_as_numpy)
        return PFloat(x=field_values[0], y=field_values[1])


class _PIntSerializer(_binary.RecordSerializer[PInt]):
    def __init__(self) -> None:
        super().__init__([("x", _binary.int32_serializer), ("y", _binary.int32_serializer)])

    def write(self, stream: _binary.CodedOutputStream, value: PInt) -> None:
        self._write(stream, value.x, value.y)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['x'], value['y'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> PInt:
        field_values = self._read(stream, read_as_numpy)
        return PInt(x=field_values[0], y=field_values[1])


class _RecSerializer(_binary.RecordSerializer[Rec]):
    def __init__(self) -> None:
        super().__init__([("i", _binary.NDArraySerializer(_binary.float32_serializer, 2))])

    def write(self, stream: _binary.CodedOutputStream, value: Rec) -> None:
        self._write(stream, value.i)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['i'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> Rec:
        field_values = self._read(stream, read_as_numpy)
        return Rec(i=field_values[0])


class _GenRecSerializer(typing.Generic[T, T_NP], _binary.RecordSerializer[GenRec[T_NP]]):
    def __init__(self, t_serializer: _binary.TypeSerializer[T, T_NP]) -> None:
        super().__init__([("i", _binary.NDArraySerializer(t_serializer, 2))])

    def write(self, stream: _binary.CodedOutputStream, value: GenRec[T_NP]) -> None:
        self._write(stream, value.i)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['i'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> GenRec[T_NP]:
        field_values = self._read(stream, read_as_numpy)
        return GenRec[T_NP](i=field_values[0])


class _DualGenRecSerializer(typing.Generic[T, T_NP], _binary.RecordSerializer[DualGenRec[T, T_NP]]):
    def __init__(self, t_serializer: _binary.TypeSerializer[T, T_NP]) -> None:
        super().__init__([("s", t_serializer), ("arr", _binary.NDArraySerializer(t_serializer, 2))])

    def write(self, stream: _binary.CodedOutputStream, value: DualGenRec[T, T_NP]) -> None:
        self._write(stream, value.s, value.arr)

    def write_numpy(self, stream: _binary.CodedOutputStream, value: np.void) -> None:
        self._write(stream, value['s'], value['arr'])

    def read(self, stream: _binary.CodedInputStream, read_as_numpy: Types) -> DualGenRec[T, T_NP]:
        field_values = self._read(stream, read_as_numpy)
        return DualGenRec[T, T_NP](s=field_values[0], arr=field_values[1])



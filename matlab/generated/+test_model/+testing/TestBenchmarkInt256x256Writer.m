% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef TestBenchmarkInt256x256Writer < test_model.BenchmarkInt256x256WriterBase
  properties (Access = private)
    writer_
    create_reader_
    mock_writer_
    close_called_
    filename_
    format_
  end

  methods
    function self = TestBenchmarkInt256x256Writer(testCase, format, create_writer, create_reader)
      self.filename_ = tempname();
      self.format_ = format;
      self.writer_ = create_writer(self.filename_);
      self.create_reader_ = create_reader;
      self.mock_writer_ = test_model.testing.MockBenchmarkInt256x256Writer(testCase);
      self.close_called_ = false;
    end

    function delete(self)
      delete(self.filename_);
      if ~self.close_called_
        % ADD_FAILURE() << ...;
        throw(yardl.RuntimeError("Close() must be called on 'TestBenchmarkInt256x256Writer' to verify mocks"));
      end
    end
    function end_int256x256(self)
      end_int256x256@test_model.BenchmarkInt256x256WriterBase(self);
      self.writer_.end_int256x256();
    end

  end

  methods (Access=protected)
    function write_int256x256_(self, value)
      self.writer_.write_int256x256(value);
      self.mock_writer_.expect_write_int256x256_(value);
    end

    function close_(self)
      self.close_called_ = true;
      self.writer_.close();
      mock_copy = copy(self.mock_writer_);

      reader = self.create_reader_(self.filename_);
      reader.copy_to(self.mock_writer_);
      reader.close();
      self.mock_writer_.verify();
      self.mock_writer_.close();

      translated = invoke_translator(self.filename_, self.format_, self.format_);
      reader = self.create_reader_(translated);
      reader.copy_to(mock_copy);
      reader.close();
      mock_copy.verify();
      mock_copy.close();
      delete(translated);
    end

    function end_stream_(self)
    end
  end
end

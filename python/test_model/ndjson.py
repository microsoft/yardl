# This file was generated by the "yardl" tool. DO NOT EDIT.

# pyright: reportUnusedClass=false

import collections.abc
import datetime
import io
import typing
import numpy as np
import numpy.typing as npt

from . import *
from . import _ndjson
from . import yardl_types as yardl

K = typing.TypeVar("K")
K_NP = typing.TypeVar("K_NP", bound=np.generic)
V = typing.TypeVar("V")
V_NP = typing.TypeVar("V_NP", bound=np.generic)
T = typing.TypeVar("T")
T_NP = typing.TypeVar("T_NP", bound=np.generic)
T1 = typing.TypeVar("T1")
T1_NP = typing.TypeVar("T1_NP", bound=np.generic)
T2 = typing.TypeVar("T2")
T2_NP = typing.TypeVar("T2_NP", bound=np.generic)
T0 = typing.TypeVar("T0")
T0_NP = typing.TypeVar("T0_NP", bound=np.generic)


_fruits_name_to_value_map = {
    "apple": Fruits.APPLE,
    "banana": Fruits.BANANA,
    "pear": Fruits.PEAR,
}
_fruits_value_to_name_map = {v: n for n, v in _fruits_name_to_value_map.items()}

_u_int64_enum_name_to_value_map = {
    "a": UInt64Enum.A,
}
_u_int64_enum_value_to_name_map = {v: n for n, v in _u_int64_enum_name_to_value_map.items()}

_int64_enum_name_to_value_map = {
    "b": Int64Enum.B,
}
_int64_enum_value_to_name_map = {v: n for n, v in _int64_enum_name_to_value_map.items()}

_size_based_enum_name_to_value_map = {
    "a": SizeBasedEnum.A,
    "b": SizeBasedEnum.B,
    "c": SizeBasedEnum.C,
}
_size_based_enum_value_to_name_map = {v: n for n, v in _size_based_enum_name_to_value_map.items()}

_days_of_week_name_to_value_map = {
    "monday": DaysOfWeek.MONDAY,
    "tuesday": DaysOfWeek.TUESDAY,
    "wednesday": DaysOfWeek.WEDNESDAY,
    "thursday": DaysOfWeek.THURSDAY,
    "friday": DaysOfWeek.FRIDAY,
    "saturday": DaysOfWeek.SATURDAY,
    "sunday": DaysOfWeek.SUNDAY,
}
_days_of_week_value_to_name_map = {v: n for n, v in _days_of_week_name_to_value_map.items()}

_text_format_name_to_value_map = {
    "regular": TextFormat.REGULAR,
    "bold": TextFormat.BOLD,
    "italic": TextFormat.ITALIC,
    "underline": TextFormat.UNDERLINE,
    "strikethrough": TextFormat.STRIKETHROUGH,
}
_text_format_value_to_name_map = {v: n for n, v in _text_format_name_to_value_map.items()}

_enum_with_keyword_symbols_name_to_value_map = {
    "try": EnumWithKeywordSymbols.TRY,
    "catch": EnumWithKeywordSymbols.CATCH,
}
_enum_with_keyword_symbols_value_to_name_map = {v: n for n, v in _enum_with_keyword_symbols_name_to_value_map.items()}

class NDJsonBenchmarkFloat256x256Writer(_ndjson.NDJsonProtocolWriter, BenchmarkFloat256x256WriterBase):
    """NDJson writer for the BenchmarkFloat256x256 protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        BenchmarkFloat256x256WriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, BenchmarkFloat256x256WriterBase.schema)

    def _write_float256x256(self, value: collections.abc.Iterable[npt.NDArray[np.float32]]) -> None:
        converter = _ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (256, 256,))
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"float256x256": json_item})


class NDJsonBenchmarkFloat256x256Reader(_ndjson.NDJsonProtocolReader, BenchmarkFloat256x256ReaderBase):
    """NDJson writer for the BenchmarkFloat256x256 protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        BenchmarkFloat256x256ReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, BenchmarkFloat256x256ReaderBase.schema)

    def _read_float256x256(self) -> collections.abc.Iterable[npt.NDArray[np.float32]]:
        converter = _ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (256, 256,))
        while (json_object := self._read_json_line("float256x256", False)) is not None:
            yield converter.from_json(json_object)

class NDJsonBenchmarkInt256x256Writer(_ndjson.NDJsonProtocolWriter, BenchmarkInt256x256WriterBase):
    """NDJson writer for the BenchmarkInt256x256 protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        BenchmarkInt256x256WriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, BenchmarkInt256x256WriterBase.schema)

    def _write_int256x256(self, value: collections.abc.Iterable[npt.NDArray[np.int32]]) -> None:
        converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (256, 256,))
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"int256x256": json_item})


class NDJsonBenchmarkInt256x256Reader(_ndjson.NDJsonProtocolReader, BenchmarkInt256x256ReaderBase):
    """NDJson writer for the BenchmarkInt256x256 protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        BenchmarkInt256x256ReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, BenchmarkInt256x256ReaderBase.schema)

    def _read_int256x256(self) -> collections.abc.Iterable[npt.NDArray[np.int32]]:
        converter = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (256, 256,))
        while (json_object := self._read_json_line("int256x256", False)) is not None:
            yield converter.from_json(json_object)

class NDJsonBenchmarkFloatVlenWriter(_ndjson.NDJsonProtocolWriter, BenchmarkFloatVlenWriterBase):
    """NDJson writer for the BenchmarkFloatVlen protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        BenchmarkFloatVlenWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, BenchmarkFloatVlenWriterBase.schema)

    def _write_float_array(self, value: collections.abc.Iterable[npt.NDArray[np.float32]]) -> None:
        converter = _ndjson.NDArrayConverter(_ndjson.float32_converter, 2)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"floatArray": json_item})


class NDJsonBenchmarkFloatVlenReader(_ndjson.NDJsonProtocolReader, BenchmarkFloatVlenReaderBase):
    """NDJson writer for the BenchmarkFloatVlen protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        BenchmarkFloatVlenReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, BenchmarkFloatVlenReaderBase.schema)

    def _read_float_array(self) -> collections.abc.Iterable[npt.NDArray[np.float32]]:
        converter = _ndjson.NDArrayConverter(_ndjson.float32_converter, 2)
        while (json_object := self._read_json_line("floatArray", False)) is not None:
            yield converter.from_json(json_object)

class NDJsonBenchmarkSmallRecordWriter(_ndjson.NDJsonProtocolWriter, BenchmarkSmallRecordWriterBase):
    """NDJson writer for the BenchmarkSmallRecord protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        BenchmarkSmallRecordWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, BenchmarkSmallRecordWriterBase.schema)

    def _write_small_record(self, value: collections.abc.Iterable[SmallBenchmarkRecord]) -> None:
        converter = _SmallBenchmarkRecordConverter()
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"smallRecord": json_item})


class NDJsonBenchmarkSmallRecordReader(_ndjson.NDJsonProtocolReader, BenchmarkSmallRecordReaderBase):
    """NDJson writer for the BenchmarkSmallRecord protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        BenchmarkSmallRecordReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, BenchmarkSmallRecordReaderBase.schema)

    def _read_small_record(self) -> collections.abc.Iterable[SmallBenchmarkRecord]:
        converter = _SmallBenchmarkRecordConverter()
        while (json_object := self._read_json_line("smallRecord", False)) is not None:
            yield converter.from_json(json_object)

class NDJsonBenchmarkSmallRecordWithOptionalsWriter(_ndjson.NDJsonProtocolWriter, BenchmarkSmallRecordWithOptionalsWriterBase):
    """NDJson writer for the BenchmarkSmallRecordWithOptionals protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        BenchmarkSmallRecordWithOptionalsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, BenchmarkSmallRecordWithOptionalsWriterBase.schema)

    def _write_small_record(self, value: collections.abc.Iterable[SimpleEncodingCounters]) -> None:
        converter = _SimpleEncodingCountersConverter()
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"smallRecord": json_item})


class NDJsonBenchmarkSmallRecordWithOptionalsReader(_ndjson.NDJsonProtocolReader, BenchmarkSmallRecordWithOptionalsReaderBase):
    """NDJson writer for the BenchmarkSmallRecordWithOptionals protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        BenchmarkSmallRecordWithOptionalsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, BenchmarkSmallRecordWithOptionalsReaderBase.schema)

    def _read_small_record(self) -> collections.abc.Iterable[SimpleEncodingCounters]:
        converter = _SimpleEncodingCountersConverter()
        while (json_object := self._read_json_line("smallRecord", False)) is not None:
            yield converter.from_json(json_object)

class NDJsonBenchmarkSimpleMrdWriter(_ndjson.NDJsonProtocolWriter, BenchmarkSimpleMrdWriterBase):
    """NDJson writer for the BenchmarkSimpleMrd protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        BenchmarkSimpleMrdWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, BenchmarkSimpleMrdWriterBase.schema)

    def _write_data(self, value: collections.abc.Iterable[AcquisitionOrImage]) -> None:
        converter = _ndjson.UnionConverter(AcquisitionOrImage, [(AcquisitionOrImage.Acquisition, _SimpleAcquisitionConverter(), [dict]), (AcquisitionOrImage.Image, _ndjson.NDArrayConverter(_ndjson.float32_converter, 2), [dict])], False)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"data": json_item})


class NDJsonBenchmarkSimpleMrdReader(_ndjson.NDJsonProtocolReader, BenchmarkSimpleMrdReaderBase):
    """NDJson writer for the BenchmarkSimpleMrd protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        BenchmarkSimpleMrdReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, BenchmarkSimpleMrdReaderBase.schema)

    def _read_data(self) -> collections.abc.Iterable[AcquisitionOrImage]:
        converter = _ndjson.UnionConverter(AcquisitionOrImage, [(AcquisitionOrImage.Acquisition, _SimpleAcquisitionConverter(), [dict]), (AcquisitionOrImage.Image, _ndjson.NDArrayConverter(_ndjson.float32_converter, 2), [dict])], False)
        while (json_object := self._read_json_line("data", False)) is not None:
            yield converter.from_json(json_object)

class NDJsonScalarsWriter(_ndjson.NDJsonProtocolWriter, ScalarsWriterBase):
    """NDJson writer for the Scalars protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        ScalarsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, ScalarsWriterBase.schema)

    def _write_int32(self, value: yardl.Int32) -> None:
        json_value = _ndjson.int32_converter.to_json(value)
        self._write_json_line({"int32": json_value})

    def _write_record(self, value: RecordWithPrimitives) -> None:
        json_value = _RecordWithPrimitivesConverter().to_json(value)
        self._write_json_line({"record": json_value})


class NDJsonScalarsReader(_ndjson.NDJsonProtocolReader, ScalarsReaderBase):
    """NDJson writer for the Scalars protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        ScalarsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, ScalarsReaderBase.schema)

    def _read_int32(self) -> yardl.Int32:
        json_object = self._read_json_line("int32", True)
        return _ndjson.int32_converter.from_json(json_object)

    def _read_record(self) -> RecordWithPrimitives:
        json_object = self._read_json_line("record", True)
        return _RecordWithPrimitivesConverter().from_json(json_object)

class NDJsonScalarOptionalsWriter(_ndjson.NDJsonProtocolWriter, ScalarOptionalsWriterBase):
    """NDJson writer for the ScalarOptionals protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        ScalarOptionalsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, ScalarOptionalsWriterBase.schema)

    def _write_optional_int(self, value: typing.Optional[yardl.Int32]) -> None:
        json_value = _ndjson.OptionalConverter(_ndjson.int32_converter).to_json(value)
        self._write_json_line({"optionalInt": json_value})

    def _write_optional_record(self, value: typing.Optional[SimpleRecord]) -> None:
        json_value = _ndjson.OptionalConverter(_SimpleRecordConverter()).to_json(value)
        self._write_json_line({"optionalRecord": json_value})

    def _write_record_with_optional_fields(self, value: RecordWithOptionalFields) -> None:
        json_value = _RecordWithOptionalFieldsConverter().to_json(value)
        self._write_json_line({"recordWithOptionalFields": json_value})

    def _write_optional_record_with_optional_fields(self, value: typing.Optional[RecordWithOptionalFields]) -> None:
        json_value = _ndjson.OptionalConverter(_RecordWithOptionalFieldsConverter()).to_json(value)
        self._write_json_line({"optionalRecordWithOptionalFields": json_value})


class NDJsonScalarOptionalsReader(_ndjson.NDJsonProtocolReader, ScalarOptionalsReaderBase):
    """NDJson writer for the ScalarOptionals protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        ScalarOptionalsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, ScalarOptionalsReaderBase.schema)

    def _read_optional_int(self) -> typing.Optional[yardl.Int32]:
        json_object = self._read_json_line("optionalInt", True)
        return _ndjson.OptionalConverter(_ndjson.int32_converter).from_json(json_object)

    def _read_optional_record(self) -> typing.Optional[SimpleRecord]:
        json_object = self._read_json_line("optionalRecord", True)
        return _ndjson.OptionalConverter(_SimpleRecordConverter()).from_json(json_object)

    def _read_record_with_optional_fields(self) -> RecordWithOptionalFields:
        json_object = self._read_json_line("recordWithOptionalFields", True)
        return _RecordWithOptionalFieldsConverter().from_json(json_object)

    def _read_optional_record_with_optional_fields(self) -> typing.Optional[RecordWithOptionalFields]:
        json_object = self._read_json_line("optionalRecordWithOptionalFields", True)
        return _ndjson.OptionalConverter(_RecordWithOptionalFieldsConverter()).from_json(json_object)

class NDJsonNestedRecordsWriter(_ndjson.NDJsonProtocolWriter, NestedRecordsWriterBase):
    """NDJson writer for the NestedRecords protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        NestedRecordsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, NestedRecordsWriterBase.schema)

    def _write_tuple_with_records(self, value: TupleWithRecords) -> None:
        json_value = _TupleWithRecordsConverter().to_json(value)
        self._write_json_line({"tupleWithRecords": json_value})


class NDJsonNestedRecordsReader(_ndjson.NDJsonProtocolReader, NestedRecordsReaderBase):
    """NDJson writer for the NestedRecords protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        NestedRecordsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, NestedRecordsReaderBase.schema)

    def _read_tuple_with_records(self) -> TupleWithRecords:
        json_object = self._read_json_line("tupleWithRecords", True)
        return _TupleWithRecordsConverter().from_json(json_object)

class NDJsonVlensWriter(_ndjson.NDJsonProtocolWriter, VlensWriterBase):
    """NDJson writer for the Vlens protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        VlensWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, VlensWriterBase.schema)

    def _write_int_vector(self, value: list[yardl.Int32]) -> None:
        json_value = _ndjson.VectorConverter(_ndjson.int32_converter).to_json(value)
        self._write_json_line({"intVector": json_value})

    def _write_complex_vector(self, value: list[yardl.ComplexFloat]) -> None:
        json_value = _ndjson.VectorConverter(_ndjson.complexfloat32_converter).to_json(value)
        self._write_json_line({"complexVector": json_value})

    def _write_record_with_vlens(self, value: RecordWithVlens) -> None:
        json_value = _RecordWithVlensConverter().to_json(value)
        self._write_json_line({"recordWithVlens": json_value})

    def _write_vlen_of_record_with_vlens(self, value: list[RecordWithVlens]) -> None:
        json_value = _ndjson.VectorConverter(_RecordWithVlensConverter()).to_json(value)
        self._write_json_line({"vlenOfRecordWithVlens": json_value})


class NDJsonVlensReader(_ndjson.NDJsonProtocolReader, VlensReaderBase):
    """NDJson writer for the Vlens protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        VlensReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, VlensReaderBase.schema)

    def _read_int_vector(self) -> list[yardl.Int32]:
        json_object = self._read_json_line("intVector", True)
        return _ndjson.VectorConverter(_ndjson.int32_converter).from_json(json_object)

    def _read_complex_vector(self) -> list[yardl.ComplexFloat]:
        json_object = self._read_json_line("complexVector", True)
        return _ndjson.VectorConverter(_ndjson.complexfloat32_converter).from_json(json_object)

    def _read_record_with_vlens(self) -> RecordWithVlens:
        json_object = self._read_json_line("recordWithVlens", True)
        return _RecordWithVlensConverter().from_json(json_object)

    def _read_vlen_of_record_with_vlens(self) -> list[RecordWithVlens]:
        json_object = self._read_json_line("vlenOfRecordWithVlens", True)
        return _ndjson.VectorConverter(_RecordWithVlensConverter()).from_json(json_object)

class NDJsonStringsWriter(_ndjson.NDJsonProtocolWriter, StringsWriterBase):
    """NDJson writer for the Strings protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        StringsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, StringsWriterBase.schema)

    def _write_single_string(self, value: str) -> None:
        json_value = _ndjson.string_converter.to_json(value)
        self._write_json_line({"singleString": json_value})

    def _write_rec_with_string(self, value: RecordWithStrings) -> None:
        json_value = _RecordWithStringsConverter().to_json(value)
        self._write_json_line({"recWithString": json_value})


class NDJsonStringsReader(_ndjson.NDJsonProtocolReader, StringsReaderBase):
    """NDJson writer for the Strings protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        StringsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, StringsReaderBase.schema)

    def _read_single_string(self) -> str:
        json_object = self._read_json_line("singleString", True)
        return _ndjson.string_converter.from_json(json_object)

    def _read_rec_with_string(self) -> RecordWithStrings:
        json_object = self._read_json_line("recWithString", True)
        return _RecordWithStringsConverter().from_json(json_object)

class NDJsonOptionalVectorsWriter(_ndjson.NDJsonProtocolWriter, OptionalVectorsWriterBase):
    """NDJson writer for the OptionalVectors protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        OptionalVectorsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, OptionalVectorsWriterBase.schema)

    def _write_record_with_optional_vector(self, value: RecordWithOptionalVector) -> None:
        json_value = _RecordWithOptionalVectorConverter().to_json(value)
        self._write_json_line({"recordWithOptionalVector": json_value})


class NDJsonOptionalVectorsReader(_ndjson.NDJsonProtocolReader, OptionalVectorsReaderBase):
    """NDJson writer for the OptionalVectors protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        OptionalVectorsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, OptionalVectorsReaderBase.schema)

    def _read_record_with_optional_vector(self) -> RecordWithOptionalVector:
        json_object = self._read_json_line("recordWithOptionalVector", True)
        return _RecordWithOptionalVectorConverter().from_json(json_object)

class NDJsonFixedVectorsWriter(_ndjson.NDJsonProtocolWriter, FixedVectorsWriterBase):
    """NDJson writer for the FixedVectors protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        FixedVectorsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, FixedVectorsWriterBase.schema)

    def _write_fixed_int_vector(self, value: list[yardl.Int32]) -> None:
        json_value = _ndjson.FixedVectorConverter(_ndjson.int32_converter, 5).to_json(value)
        self._write_json_line({"fixedIntVector": json_value})

    def _write_fixed_simple_record_vector(self, value: list[SimpleRecord]) -> None:
        json_value = _ndjson.FixedVectorConverter(_SimpleRecordConverter(), 3).to_json(value)
        self._write_json_line({"fixedSimpleRecordVector": json_value})

    def _write_fixed_record_with_vlens_vector(self, value: list[RecordWithVlens]) -> None:
        json_value = _ndjson.FixedVectorConverter(_RecordWithVlensConverter(), 2).to_json(value)
        self._write_json_line({"fixedRecordWithVlensVector": json_value})

    def _write_record_with_fixed_vectors(self, value: RecordWithFixedVectors) -> None:
        json_value = _RecordWithFixedVectorsConverter().to_json(value)
        self._write_json_line({"recordWithFixedVectors": json_value})


class NDJsonFixedVectorsReader(_ndjson.NDJsonProtocolReader, FixedVectorsReaderBase):
    """NDJson writer for the FixedVectors protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        FixedVectorsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, FixedVectorsReaderBase.schema)

    def _read_fixed_int_vector(self) -> list[yardl.Int32]:
        json_object = self._read_json_line("fixedIntVector", True)
        return _ndjson.FixedVectorConverter(_ndjson.int32_converter, 5).from_json(json_object)

    def _read_fixed_simple_record_vector(self) -> list[SimpleRecord]:
        json_object = self._read_json_line("fixedSimpleRecordVector", True)
        return _ndjson.FixedVectorConverter(_SimpleRecordConverter(), 3).from_json(json_object)

    def _read_fixed_record_with_vlens_vector(self) -> list[RecordWithVlens]:
        json_object = self._read_json_line("fixedRecordWithVlensVector", True)
        return _ndjson.FixedVectorConverter(_RecordWithVlensConverter(), 2).from_json(json_object)

    def _read_record_with_fixed_vectors(self) -> RecordWithFixedVectors:
        json_object = self._read_json_line("recordWithFixedVectors", True)
        return _RecordWithFixedVectorsConverter().from_json(json_object)

class NDJsonStreamsWriter(_ndjson.NDJsonProtocolWriter, StreamsWriterBase):
    """NDJson writer for the Streams protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        StreamsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, StreamsWriterBase.schema)

    def _write_int_data(self, value: collections.abc.Iterable[yardl.Int32]) -> None:
        converter = _ndjson.int32_converter
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"intData": json_item})

    def _write_optional_int_data(self, value: collections.abc.Iterable[typing.Optional[yardl.Int32]]) -> None:
        converter = _ndjson.OptionalConverter(_ndjson.int32_converter)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"optionalIntData": json_item})

    def _write_record_with_optional_vector_data(self, value: collections.abc.Iterable[RecordWithOptionalVector]) -> None:
        converter = _RecordWithOptionalVectorConverter()
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"recordWithOptionalVectorData": json_item})

    def _write_fixed_vector(self, value: collections.abc.Iterable[list[yardl.Int32]]) -> None:
        converter = _ndjson.FixedVectorConverter(_ndjson.int32_converter, 3)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"fixedVector": json_item})


class NDJsonStreamsReader(_ndjson.NDJsonProtocolReader, StreamsReaderBase):
    """NDJson writer for the Streams protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        StreamsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, StreamsReaderBase.schema)

    def _read_int_data(self) -> collections.abc.Iterable[yardl.Int32]:
        converter = _ndjson.int32_converter
        while (json_object := self._read_json_line("intData", False)) is not None:
            yield converter.from_json(json_object)

    def _read_optional_int_data(self) -> collections.abc.Iterable[typing.Optional[yardl.Int32]]:
        converter = _ndjson.OptionalConverter(_ndjson.int32_converter)
        while (json_object := self._read_json_line("optionalIntData", False)) is not None:
            yield converter.from_json(json_object)

    def _read_record_with_optional_vector_data(self) -> collections.abc.Iterable[RecordWithOptionalVector]:
        converter = _RecordWithOptionalVectorConverter()
        while (json_object := self._read_json_line("recordWithOptionalVectorData", False)) is not None:
            yield converter.from_json(json_object)

    def _read_fixed_vector(self) -> collections.abc.Iterable[list[yardl.Int32]]:
        converter = _ndjson.FixedVectorConverter(_ndjson.int32_converter, 3)
        while (json_object := self._read_json_line("fixedVector", False)) is not None:
            yield converter.from_json(json_object)

class NDJsonFixedArraysWriter(_ndjson.NDJsonProtocolWriter, FixedArraysWriterBase):
    """NDJson writer for the FixedArrays protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        FixedArraysWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, FixedArraysWriterBase.schema)

    def _write_ints(self, value: npt.NDArray[np.int32]) -> None:
        json_value = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (2, 3,)).to_json(value)
        self._write_json_line({"ints": json_value})

    def _write_fixed_simple_record_array(self, value: npt.NDArray[np.void]) -> None:
        json_value = _ndjson.FixedNDArrayConverter(_SimpleRecordConverter(), (3, 2,)).to_json(value)
        self._write_json_line({"fixedSimpleRecordArray": json_value})

    def _write_fixed_record_with_vlens_array(self, value: npt.NDArray[np.void]) -> None:
        json_value = _ndjson.FixedNDArrayConverter(_RecordWithVlensConverter(), (2, 2,)).to_json(value)
        self._write_json_line({"fixedRecordWithVlensArray": json_value})

    def _write_record_with_fixed_arrays(self, value: RecordWithFixedArrays) -> None:
        json_value = _RecordWithFixedArraysConverter().to_json(value)
        self._write_json_line({"recordWithFixedArrays": json_value})

    def _write_named_array(self, value: NamedFixedNDArray) -> None:
        json_value = _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (2, 4,)).to_json(value)
        self._write_json_line({"namedArray": json_value})


class NDJsonFixedArraysReader(_ndjson.NDJsonProtocolReader, FixedArraysReaderBase):
    """NDJson writer for the FixedArrays protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        FixedArraysReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, FixedArraysReaderBase.schema)

    def _read_ints(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("ints", True)
        return _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (2, 3,)).from_json(json_object)

    def _read_fixed_simple_record_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("fixedSimpleRecordArray", True)
        return _ndjson.FixedNDArrayConverter(_SimpleRecordConverter(), (3, 2,)).from_json(json_object)

    def _read_fixed_record_with_vlens_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("fixedRecordWithVlensArray", True)
        return _ndjson.FixedNDArrayConverter(_RecordWithVlensConverter(), (2, 2,)).from_json(json_object)

    def _read_record_with_fixed_arrays(self) -> RecordWithFixedArrays:
        json_object = self._read_json_line("recordWithFixedArrays", True)
        return _RecordWithFixedArraysConverter().from_json(json_object)

    def _read_named_array(self) -> NamedFixedNDArray:
        json_object = self._read_json_line("namedArray", True)
        return _ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (2, 4,)).from_json(json_object)

class NDJsonSubarraysWriter(_ndjson.NDJsonProtocolWriter, SubarraysWriterBase):
    """NDJson writer for the Subarrays protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        SubarraysWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, SubarraysWriterBase.schema)

    def _write_dynamic_with_fixed_int_subarray(self, value: npt.NDArray[np.int32]) -> None:
        json_value = _ndjson.DynamicNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,))).to_json(value)
        self._write_json_line({"dynamicWithFixedIntSubarray": json_value})

    def _write_dynamic_with_fixed_float_subarray(self, value: npt.NDArray[np.float32]) -> None:
        json_value = _ndjson.DynamicNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (3,))).to_json(value)
        self._write_json_line({"dynamicWithFixedFloatSubarray": json_value})

    def _write_known_dim_count_with_fixed_int_subarray(self, value: npt.NDArray[np.int32]) -> None:
        json_value = _ndjson.NDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), 1).to_json(value)
        self._write_json_line({"knownDimCountWithFixedIntSubarray": json_value})

    def _write_known_dim_count_with_fixed_float_subarray(self, value: npt.NDArray[np.float32]) -> None:
        json_value = _ndjson.NDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (3,)), 1).to_json(value)
        self._write_json_line({"knownDimCountWithFixedFloatSubarray": json_value})

    def _write_fixed_with_fixed_int_subarray(self, value: npt.NDArray[np.int32]) -> None:
        json_value = _ndjson.FixedNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), (2,)).to_json(value)
        self._write_json_line({"fixedWithFixedIntSubarray": json_value})

    def _write_fixed_with_fixed_float_subarray(self, value: npt.NDArray[np.float32]) -> None:
        json_value = _ndjson.FixedNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (3,)), (2,)).to_json(value)
        self._write_json_line({"fixedWithFixedFloatSubarray": json_value})

    def _write_nested_subarray(self, value: npt.NDArray[np.int32]) -> None:
        json_value = _ndjson.DynamicNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), (2,))).to_json(value)
        self._write_json_line({"nestedSubarray": json_value})

    def _write_dynamic_with_fixed_vector_subarray(self, value: npt.NDArray[np.int32]) -> None:
        json_value = _ndjson.DynamicNDArrayConverter(_ndjson.FixedVectorConverter(_ndjson.int32_converter, 3)).to_json(value)
        self._write_json_line({"dynamicWithFixedVectorSubarray": json_value})

    def _write_generic_subarray(self, value: Image[np.int32]) -> None:
        json_value = _ndjson.NDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), 2).to_json(value)
        self._write_json_line({"genericSubarray": json_value})


class NDJsonSubarraysReader(_ndjson.NDJsonProtocolReader, SubarraysReaderBase):
    """NDJson writer for the Subarrays protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        SubarraysReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, SubarraysReaderBase.schema)

    def _read_dynamic_with_fixed_int_subarray(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("dynamicWithFixedIntSubarray", True)
        return _ndjson.DynamicNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,))).from_json(json_object)

    def _read_dynamic_with_fixed_float_subarray(self) -> npt.NDArray[np.float32]:
        json_object = self._read_json_line("dynamicWithFixedFloatSubarray", True)
        return _ndjson.DynamicNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (3,))).from_json(json_object)

    def _read_known_dim_count_with_fixed_int_subarray(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("knownDimCountWithFixedIntSubarray", True)
        return _ndjson.NDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), 1).from_json(json_object)

    def _read_known_dim_count_with_fixed_float_subarray(self) -> npt.NDArray[np.float32]:
        json_object = self._read_json_line("knownDimCountWithFixedFloatSubarray", True)
        return _ndjson.NDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (3,)), 1).from_json(json_object)

    def _read_fixed_with_fixed_int_subarray(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("fixedWithFixedIntSubarray", True)
        return _ndjson.FixedNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), (2,)).from_json(json_object)

    def _read_fixed_with_fixed_float_subarray(self) -> npt.NDArray[np.float32]:
        json_object = self._read_json_line("fixedWithFixedFloatSubarray", True)
        return _ndjson.FixedNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.float32_converter, (3,)), (2,)).from_json(json_object)

    def _read_nested_subarray(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("nestedSubarray", True)
        return _ndjson.DynamicNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), (2,))).from_json(json_object)

    def _read_dynamic_with_fixed_vector_subarray(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("dynamicWithFixedVectorSubarray", True)
        return _ndjson.DynamicNDArrayConverter(_ndjson.FixedVectorConverter(_ndjson.int32_converter, 3)).from_json(json_object)

    def _read_generic_subarray(self) -> Image[np.int32]:
        json_object = self._read_json_line("genericSubarray", True)
        return _ndjson.NDArrayConverter(_ndjson.FixedNDArrayConverter(_ndjson.int32_converter, (3,)), 2).from_json(json_object)

class NDJsonSubarraysInRecordsWriter(_ndjson.NDJsonProtocolWriter, SubarraysInRecordsWriterBase):
    """NDJson writer for the SubarraysInRecords protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        SubarraysInRecordsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, SubarraysInRecordsWriterBase.schema)

    def _write_with_fixed_subarrays(self, value: npt.NDArray[np.void]) -> None:
        json_value = _ndjson.DynamicNDArrayConverter(_RecordWithFixedCollectionsConverter()).to_json(value)
        self._write_json_line({"withFixedSubarrays": json_value})

    def _write_with_vlen_subarrays(self, value: npt.NDArray[np.void]) -> None:
        json_value = _ndjson.DynamicNDArrayConverter(_RecordWithVlenCollectionsConverter()).to_json(value)
        self._write_json_line({"withVlenSubarrays": json_value})


class NDJsonSubarraysInRecordsReader(_ndjson.NDJsonProtocolReader, SubarraysInRecordsReaderBase):
    """NDJson writer for the SubarraysInRecords protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        SubarraysInRecordsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, SubarraysInRecordsReaderBase.schema)

    def _read_with_fixed_subarrays(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("withFixedSubarrays", True)
        return _ndjson.DynamicNDArrayConverter(_RecordWithFixedCollectionsConverter()).from_json(json_object)

    def _read_with_vlen_subarrays(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("withVlenSubarrays", True)
        return _ndjson.DynamicNDArrayConverter(_RecordWithVlenCollectionsConverter()).from_json(json_object)

class NDJsonNDArraysWriter(_ndjson.NDJsonProtocolWriter, NDArraysWriterBase):
    """NDJson writer for the NDArrays protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        NDArraysWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, NDArraysWriterBase.schema)

    def _write_ints(self, value: npt.NDArray[np.int32]) -> None:
        json_value = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2).to_json(value)
        self._write_json_line({"ints": json_value})

    def _write_simple_record_array(self, value: npt.NDArray[np.void]) -> None:
        json_value = _ndjson.NDArrayConverter(_SimpleRecordConverter(), 2).to_json(value)
        self._write_json_line({"simpleRecordArray": json_value})

    def _write_record_with_vlens_array(self, value: npt.NDArray[np.void]) -> None:
        json_value = _ndjson.NDArrayConverter(_RecordWithVlensConverter(), 2).to_json(value)
        self._write_json_line({"recordWithVlensArray": json_value})

    def _write_record_with_nd_arrays(self, value: RecordWithNDArrays) -> None:
        json_value = _RecordWithNDArraysConverter().to_json(value)
        self._write_json_line({"recordWithNDArrays": json_value})

    def _write_named_array(self, value: NamedNDArray) -> None:
        json_value = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2).to_json(value)
        self._write_json_line({"namedArray": json_value})


class NDJsonNDArraysReader(_ndjson.NDJsonProtocolReader, NDArraysReaderBase):
    """NDJson writer for the NDArrays protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        NDArraysReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, NDArraysReaderBase.schema)

    def _read_ints(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("ints", True)
        return _ndjson.NDArrayConverter(_ndjson.int32_converter, 2).from_json(json_object)

    def _read_simple_record_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("simpleRecordArray", True)
        return _ndjson.NDArrayConverter(_SimpleRecordConverter(), 2).from_json(json_object)

    def _read_record_with_vlens_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("recordWithVlensArray", True)
        return _ndjson.NDArrayConverter(_RecordWithVlensConverter(), 2).from_json(json_object)

    def _read_record_with_nd_arrays(self) -> RecordWithNDArrays:
        json_object = self._read_json_line("recordWithNDArrays", True)
        return _RecordWithNDArraysConverter().from_json(json_object)

    def _read_named_array(self) -> NamedNDArray:
        json_object = self._read_json_line("namedArray", True)
        return _ndjson.NDArrayConverter(_ndjson.int32_converter, 2).from_json(json_object)

class NDJsonNDArraysSingleDimensionWriter(_ndjson.NDJsonProtocolWriter, NDArraysSingleDimensionWriterBase):
    """NDJson writer for the NDArraysSingleDimension protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        NDArraysSingleDimensionWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, NDArraysSingleDimensionWriterBase.schema)

    def _write_ints(self, value: npt.NDArray[np.int32]) -> None:
        json_value = _ndjson.NDArrayConverter(_ndjson.int32_converter, 1).to_json(value)
        self._write_json_line({"ints": json_value})

    def _write_simple_record_array(self, value: npt.NDArray[np.void]) -> None:
        json_value = _ndjson.NDArrayConverter(_SimpleRecordConverter(), 1).to_json(value)
        self._write_json_line({"simpleRecordArray": json_value})

    def _write_record_with_vlens_array(self, value: npt.NDArray[np.void]) -> None:
        json_value = _ndjson.NDArrayConverter(_RecordWithVlensConverter(), 1).to_json(value)
        self._write_json_line({"recordWithVlensArray": json_value})

    def _write_record_with_nd_arrays(self, value: RecordWithNDArraysSingleDimension) -> None:
        json_value = _RecordWithNDArraysSingleDimensionConverter().to_json(value)
        self._write_json_line({"recordWithNDArrays": json_value})


class NDJsonNDArraysSingleDimensionReader(_ndjson.NDJsonProtocolReader, NDArraysSingleDimensionReaderBase):
    """NDJson writer for the NDArraysSingleDimension protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        NDArraysSingleDimensionReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, NDArraysSingleDimensionReaderBase.schema)

    def _read_ints(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("ints", True)
        return _ndjson.NDArrayConverter(_ndjson.int32_converter, 1).from_json(json_object)

    def _read_simple_record_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("simpleRecordArray", True)
        return _ndjson.NDArrayConverter(_SimpleRecordConverter(), 1).from_json(json_object)

    def _read_record_with_vlens_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("recordWithVlensArray", True)
        return _ndjson.NDArrayConverter(_RecordWithVlensConverter(), 1).from_json(json_object)

    def _read_record_with_nd_arrays(self) -> RecordWithNDArraysSingleDimension:
        json_object = self._read_json_line("recordWithNDArrays", True)
        return _RecordWithNDArraysSingleDimensionConverter().from_json(json_object)

class NDJsonDynamicNDArraysWriter(_ndjson.NDJsonProtocolWriter, DynamicNDArraysWriterBase):
    """NDJson writer for the DynamicNDArrays protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        DynamicNDArraysWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, DynamicNDArraysWriterBase.schema)

    def _write_ints(self, value: npt.NDArray[np.int32]) -> None:
        json_value = _ndjson.DynamicNDArrayConverter(_ndjson.int32_converter).to_json(value)
        self._write_json_line({"ints": json_value})

    def _write_simple_record_array(self, value: npt.NDArray[np.void]) -> None:
        json_value = _ndjson.DynamicNDArrayConverter(_SimpleRecordConverter()).to_json(value)
        self._write_json_line({"simpleRecordArray": json_value})

    def _write_record_with_vlens_array(self, value: npt.NDArray[np.void]) -> None:
        json_value = _ndjson.DynamicNDArrayConverter(_RecordWithVlensConverter()).to_json(value)
        self._write_json_line({"recordWithVlensArray": json_value})

    def _write_record_with_dynamic_nd_arrays(self, value: RecordWithDynamicNDArrays) -> None:
        json_value = _RecordWithDynamicNDArraysConverter().to_json(value)
        self._write_json_line({"recordWithDynamicNDArrays": json_value})


class NDJsonDynamicNDArraysReader(_ndjson.NDJsonProtocolReader, DynamicNDArraysReaderBase):
    """NDJson writer for the DynamicNDArrays protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        DynamicNDArraysReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, DynamicNDArraysReaderBase.schema)

    def _read_ints(self) -> npt.NDArray[np.int32]:
        json_object = self._read_json_line("ints", True)
        return _ndjson.DynamicNDArrayConverter(_ndjson.int32_converter).from_json(json_object)

    def _read_simple_record_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("simpleRecordArray", True)
        return _ndjson.DynamicNDArrayConverter(_SimpleRecordConverter()).from_json(json_object)

    def _read_record_with_vlens_array(self) -> npt.NDArray[np.void]:
        json_object = self._read_json_line("recordWithVlensArray", True)
        return _ndjson.DynamicNDArrayConverter(_RecordWithVlensConverter()).from_json(json_object)

    def _read_record_with_dynamic_nd_arrays(self) -> RecordWithDynamicNDArrays:
        json_object = self._read_json_line("recordWithDynamicNDArrays", True)
        return _RecordWithDynamicNDArraysConverter().from_json(json_object)

class NDJsonMapsWriter(_ndjson.NDJsonProtocolWriter, MapsWriterBase):
    """NDJson writer for the Maps protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        MapsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, MapsWriterBase.schema)

    def _write_string_to_int(self, value: dict[str, yardl.Int32]) -> None:
        json_value = _ndjson.MapConverter(_ndjson.string_converter, _ndjson.int32_converter).to_json(value)
        self._write_json_line({"stringToInt": json_value})

    def _write_int_to_string(self, value: dict[yardl.Int32, str]) -> None:
        json_value = _ndjson.MapConverter(_ndjson.int32_converter, _ndjson.string_converter).to_json(value)
        self._write_json_line({"intToString": json_value})

    def _write_string_to_union(self, value: dict[str, StringOrInt32]) -> None:
        json_value = _ndjson.MapConverter(_ndjson.string_converter, _ndjson.UnionConverter(StringOrInt32, [(StringOrInt32.String, _ndjson.string_converter, [str]), (StringOrInt32.Int32, _ndjson.int32_converter, [int, float])], True)).to_json(value)
        self._write_json_line({"stringToUnion": json_value})

    def _write_aliased_generic(self, value: AliasedMap[str, yardl.Int32]) -> None:
        json_value = _ndjson.MapConverter(_ndjson.string_converter, _ndjson.int32_converter).to_json(value)
        self._write_json_line({"aliasedGeneric": json_value})


class NDJsonMapsReader(_ndjson.NDJsonProtocolReader, MapsReaderBase):
    """NDJson writer for the Maps protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        MapsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, MapsReaderBase.schema)

    def _read_string_to_int(self) -> dict[str, yardl.Int32]:
        json_object = self._read_json_line("stringToInt", True)
        return _ndjson.MapConverter(_ndjson.string_converter, _ndjson.int32_converter).from_json(json_object)

    def _read_int_to_string(self) -> dict[yardl.Int32, str]:
        json_object = self._read_json_line("intToString", True)
        return _ndjson.MapConverter(_ndjson.int32_converter, _ndjson.string_converter).from_json(json_object)

    def _read_string_to_union(self) -> dict[str, StringOrInt32]:
        json_object = self._read_json_line("stringToUnion", True)
        return _ndjson.MapConverter(_ndjson.string_converter, _ndjson.UnionConverter(StringOrInt32, [(StringOrInt32.String, _ndjson.string_converter, [str]), (StringOrInt32.Int32, _ndjson.int32_converter, [int, float])], True)).from_json(json_object)

    def _read_aliased_generic(self) -> AliasedMap[str, yardl.Int32]:
        json_object = self._read_json_line("aliasedGeneric", True)
        return _ndjson.MapConverter(_ndjson.string_converter, _ndjson.int32_converter).from_json(json_object)

class NDJsonUnionsWriter(_ndjson.NDJsonProtocolWriter, UnionsWriterBase):
    """NDJson writer for the Unions protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        UnionsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, UnionsWriterBase.schema)

    def _write_int_or_simple_record(self, value: Int32OrSimpleRecord) -> None:
        json_value = _ndjson.UnionConverter(Int32OrSimpleRecord, [(Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True).to_json(value)
        self._write_json_line({"intOrSimpleRecord": json_value})

    def _write_int_or_record_with_vlens(self, value: Int32OrRecordWithVlens) -> None:
        json_value = _ndjson.UnionConverter(Int32OrRecordWithVlens, [(Int32OrRecordWithVlens.Int32, _ndjson.int32_converter, [int, float]), (Int32OrRecordWithVlens.RecordWithVlens, _RecordWithVlensConverter(), [dict])], True).to_json(value)
        self._write_json_line({"intOrRecordWithVlens": json_value})

    def _write_monosotate_or_int_or_simple_record(self, value: typing.Optional[Int32OrSimpleRecord]) -> None:
        json_value = _ndjson.UnionConverter(Int32OrSimpleRecord, [None, (Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True).to_json(value)
        self._write_json_line({"monosotateOrIntOrSimpleRecord": json_value})

    def _write_record_with_unions(self, value: RecordWithUnions) -> None:
        json_value = _RecordWithUnionsConverter().to_json(value)
        self._write_json_line({"recordWithUnions": json_value})


class NDJsonUnionsReader(_ndjson.NDJsonProtocolReader, UnionsReaderBase):
    """NDJson writer for the Unions protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        UnionsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, UnionsReaderBase.schema)

    def _read_int_or_simple_record(self) -> Int32OrSimpleRecord:
        json_object = self._read_json_line("intOrSimpleRecord", True)
        return _ndjson.UnionConverter(Int32OrSimpleRecord, [(Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True).from_json(json_object)

    def _read_int_or_record_with_vlens(self) -> Int32OrRecordWithVlens:
        json_object = self._read_json_line("intOrRecordWithVlens", True)
        return _ndjson.UnionConverter(Int32OrRecordWithVlens, [(Int32OrRecordWithVlens.Int32, _ndjson.int32_converter, [int, float]), (Int32OrRecordWithVlens.RecordWithVlens, _RecordWithVlensConverter(), [dict])], True).from_json(json_object)

    def _read_monosotate_or_int_or_simple_record(self) -> typing.Optional[Int32OrSimpleRecord]:
        json_object = self._read_json_line("monosotateOrIntOrSimpleRecord", True)
        return _ndjson.UnionConverter(Int32OrSimpleRecord, [None, (Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True).from_json(json_object)

    def _read_record_with_unions(self) -> RecordWithUnions:
        json_object = self._read_json_line("recordWithUnions", True)
        return _RecordWithUnionsConverter().from_json(json_object)

class NDJsonStreamsOfUnionsWriter(_ndjson.NDJsonProtocolWriter, StreamsOfUnionsWriterBase):
    """NDJson writer for the StreamsOfUnions protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        StreamsOfUnionsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, StreamsOfUnionsWriterBase.schema)

    def _write_int_or_simple_record(self, value: collections.abc.Iterable[Int32OrSimpleRecord]) -> None:
        converter = _ndjson.UnionConverter(Int32OrSimpleRecord, [(Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"intOrSimpleRecord": json_item})

    def _write_nullable_int_or_simple_record(self, value: collections.abc.Iterable[typing.Optional[Int32OrSimpleRecord]]) -> None:
        converter = _ndjson.UnionConverter(Int32OrSimpleRecord, [None, (Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"nullableIntOrSimpleRecord": json_item})


class NDJsonStreamsOfUnionsReader(_ndjson.NDJsonProtocolReader, StreamsOfUnionsReaderBase):
    """NDJson writer for the StreamsOfUnions protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        StreamsOfUnionsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, StreamsOfUnionsReaderBase.schema)

    def _read_int_or_simple_record(self) -> collections.abc.Iterable[Int32OrSimpleRecord]:
        converter = _ndjson.UnionConverter(Int32OrSimpleRecord, [(Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        while (json_object := self._read_json_line("intOrSimpleRecord", False)) is not None:
            yield converter.from_json(json_object)

    def _read_nullable_int_or_simple_record(self) -> collections.abc.Iterable[typing.Optional[Int32OrSimpleRecord]]:
        converter = _ndjson.UnionConverter(Int32OrSimpleRecord, [None, (Int32OrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (Int32OrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        while (json_object := self._read_json_line("nullableIntOrSimpleRecord", False)) is not None:
            yield converter.from_json(json_object)

class NDJsonEnumsWriter(_ndjson.NDJsonProtocolWriter, EnumsWriterBase):
    """NDJson writer for the Enums protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        EnumsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, EnumsWriterBase.schema)

    def _write_single(self, value: Fruits) -> None:
        json_value = _ndjson.EnumConverter(Fruits, yardl.Int32, _fruits_name_to_value_map, _fruits_value_to_name_map).to_json(value)
        self._write_json_line({"single": json_value})

    def _write_vec(self, value: list[Fruits]) -> None:
        json_value = _ndjson.VectorConverter(_ndjson.EnumConverter(Fruits, yardl.Int32, _fruits_name_to_value_map, _fruits_value_to_name_map)).to_json(value)
        self._write_json_line({"vec": json_value})

    def _write_size(self, value: SizeBasedEnum) -> None:
        json_value = _ndjson.EnumConverter(SizeBasedEnum, yardl.Size, _size_based_enum_name_to_value_map, _size_based_enum_value_to_name_map).to_json(value)
        self._write_json_line({"size": json_value})


class NDJsonEnumsReader(_ndjson.NDJsonProtocolReader, EnumsReaderBase):
    """NDJson writer for the Enums protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        EnumsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, EnumsReaderBase.schema)

    def _read_single(self) -> Fruits:
        json_object = self._read_json_line("single", True)
        return _ndjson.EnumConverter(Fruits, yardl.Int32, _fruits_name_to_value_map, _fruits_value_to_name_map).from_json(json_object)

    def _read_vec(self) -> list[Fruits]:
        json_object = self._read_json_line("vec", True)
        return _ndjson.VectorConverter(_ndjson.EnumConverter(Fruits, yardl.Int32, _fruits_name_to_value_map, _fruits_value_to_name_map)).from_json(json_object)

    def _read_size(self) -> SizeBasedEnum:
        json_object = self._read_json_line("size", True)
        return _ndjson.EnumConverter(SizeBasedEnum, yardl.Size, _size_based_enum_name_to_value_map, _size_based_enum_value_to_name_map).from_json(json_object)

class NDJsonFlagsWriter(_ndjson.NDJsonProtocolWriter, FlagsWriterBase):
    """NDJson writer for the Flags protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        FlagsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, FlagsWriterBase.schema)

    def _write_days(self, value: collections.abc.Iterable[DaysOfWeek]) -> None:
        converter = _ndjson.FlagsConverter(DaysOfWeek, yardl.Int32, _days_of_week_name_to_value_map, _days_of_week_value_to_name_map)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"days": json_item})

    def _write_formats(self, value: collections.abc.Iterable[TextFormat]) -> None:
        converter = _ndjson.FlagsConverter(TextFormat, yardl.UInt64, _text_format_name_to_value_map, _text_format_value_to_name_map)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"formats": json_item})


class NDJsonFlagsReader(_ndjson.NDJsonProtocolReader, FlagsReaderBase):
    """NDJson writer for the Flags protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        FlagsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, FlagsReaderBase.schema)

    def _read_days(self) -> collections.abc.Iterable[DaysOfWeek]:
        converter = _ndjson.FlagsConverter(DaysOfWeek, yardl.Int32, _days_of_week_name_to_value_map, _days_of_week_value_to_name_map)
        while (json_object := self._read_json_line("days", False)) is not None:
            yield converter.from_json(json_object)

    def _read_formats(self) -> collections.abc.Iterable[TextFormat]:
        converter = _ndjson.FlagsConverter(TextFormat, yardl.UInt64, _text_format_name_to_value_map, _text_format_value_to_name_map)
        while (json_object := self._read_json_line("formats", False)) is not None:
            yield converter.from_json(json_object)

class NDJsonStateTestWriter(_ndjson.NDJsonProtocolWriter, StateTestWriterBase):
    """NDJson writer for the StateTest protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        StateTestWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, StateTestWriterBase.schema)

    def _write_an_int(self, value: yardl.Int32) -> None:
        json_value = _ndjson.int32_converter.to_json(value)
        self._write_json_line({"anInt": json_value})

    def _write_a_stream(self, value: collections.abc.Iterable[yardl.Int32]) -> None:
        converter = _ndjson.int32_converter
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"aStream": json_item})

    def _write_another_int(self, value: yardl.Int32) -> None:
        json_value = _ndjson.int32_converter.to_json(value)
        self._write_json_line({"anotherInt": json_value})


class NDJsonStateTestReader(_ndjson.NDJsonProtocolReader, StateTestReaderBase):
    """NDJson writer for the StateTest protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        StateTestReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, StateTestReaderBase.schema)

    def _read_an_int(self) -> yardl.Int32:
        json_object = self._read_json_line("anInt", True)
        return _ndjson.int32_converter.from_json(json_object)

    def _read_a_stream(self) -> collections.abc.Iterable[yardl.Int32]:
        converter = _ndjson.int32_converter
        while (json_object := self._read_json_line("aStream", False)) is not None:
            yield converter.from_json(json_object)

    def _read_another_int(self) -> yardl.Int32:
        json_object = self._read_json_line("anotherInt", True)
        return _ndjson.int32_converter.from_json(json_object)

class NDJsonSimpleGenericsWriter(_ndjson.NDJsonProtocolWriter, SimpleGenericsWriterBase):
    """NDJson writer for the SimpleGenerics protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        SimpleGenericsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, SimpleGenericsWriterBase.schema)

    def _write_float_image(self, value: Image[np.float32]) -> None:
        json_value = _ndjson.NDArrayConverter(_ndjson.float32_converter, 2).to_json(value)
        self._write_json_line({"floatImage": json_value})

    def _write_int_image(self, value: Image[np.int32]) -> None:
        json_value = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2).to_json(value)
        self._write_json_line({"intImage": json_value})

    def _write_int_image_alternate_syntax(self, value: Image[np.int32]) -> None:
        json_value = _ndjson.NDArrayConverter(_ndjson.int32_converter, 2).to_json(value)
        self._write_json_line({"intImageAlternateSyntax": json_value})

    def _write_string_image(self, value: Image[np.object_]) -> None:
        json_value = _ndjson.NDArrayConverter(_ndjson.string_converter, 2).to_json(value)
        self._write_json_line({"stringImage": json_value})

    def _write_int_float_tuple(self, value: MyTuple[yardl.Int32, yardl.Float32]) -> None:
        json_value = _MyTupleConverter(_ndjson.int32_converter, _ndjson.float32_converter).to_json(value)
        self._write_json_line({"intFloatTuple": json_value})

    def _write_float_float_tuple(self, value: MyTuple[yardl.Float32, yardl.Float32]) -> None:
        json_value = _MyTupleConverter(_ndjson.float32_converter, _ndjson.float32_converter).to_json(value)
        self._write_json_line({"floatFloatTuple": json_value})

    def _write_int_float_tuple_alternate_syntax(self, value: MyTuple[yardl.Int32, yardl.Float32]) -> None:
        json_value = _MyTupleConverter(_ndjson.int32_converter, _ndjson.float32_converter).to_json(value)
        self._write_json_line({"intFloatTupleAlternateSyntax": json_value})

    def _write_int_string_tuple(self, value: MyTuple[yardl.Int32, str]) -> None:
        json_value = _MyTupleConverter(_ndjson.int32_converter, _ndjson.string_converter).to_json(value)
        self._write_json_line({"intStringTuple": json_value})

    def _write_stream_of_type_variants(self, value: collections.abc.Iterable[ImageFloatOrImageDouble]) -> None:
        converter = _ndjson.UnionConverter(ImageFloatOrImageDouble, [(ImageFloatOrImageDouble.ImageFloat, _ndjson.NDArrayConverter(_ndjson.float32_converter, 2), [dict]), (ImageFloatOrImageDouble.ImageDouble, _ndjson.NDArrayConverter(_ndjson.float64_converter, 2), [dict])], False)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"streamOfTypeVariants": json_item})


class NDJsonSimpleGenericsReader(_ndjson.NDJsonProtocolReader, SimpleGenericsReaderBase):
    """NDJson writer for the SimpleGenerics protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        SimpleGenericsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, SimpleGenericsReaderBase.schema)

    def _read_float_image(self) -> Image[np.float32]:
        json_object = self._read_json_line("floatImage", True)
        return _ndjson.NDArrayConverter(_ndjson.float32_converter, 2).from_json(json_object)

    def _read_int_image(self) -> Image[np.int32]:
        json_object = self._read_json_line("intImage", True)
        return _ndjson.NDArrayConverter(_ndjson.int32_converter, 2).from_json(json_object)

    def _read_int_image_alternate_syntax(self) -> Image[np.int32]:
        json_object = self._read_json_line("intImageAlternateSyntax", True)
        return _ndjson.NDArrayConverter(_ndjson.int32_converter, 2).from_json(json_object)

    def _read_string_image(self) -> Image[np.object_]:
        json_object = self._read_json_line("stringImage", True)
        return _ndjson.NDArrayConverter(_ndjson.string_converter, 2).from_json(json_object)

    def _read_int_float_tuple(self) -> MyTuple[yardl.Int32, yardl.Float32]:
        json_object = self._read_json_line("intFloatTuple", True)
        return _MyTupleConverter(_ndjson.int32_converter, _ndjson.float32_converter).from_json(json_object)

    def _read_float_float_tuple(self) -> MyTuple[yardl.Float32, yardl.Float32]:
        json_object = self._read_json_line("floatFloatTuple", True)
        return _MyTupleConverter(_ndjson.float32_converter, _ndjson.float32_converter).from_json(json_object)

    def _read_int_float_tuple_alternate_syntax(self) -> MyTuple[yardl.Int32, yardl.Float32]:
        json_object = self._read_json_line("intFloatTupleAlternateSyntax", True)
        return _MyTupleConverter(_ndjson.int32_converter, _ndjson.float32_converter).from_json(json_object)

    def _read_int_string_tuple(self) -> MyTuple[yardl.Int32, str]:
        json_object = self._read_json_line("intStringTuple", True)
        return _MyTupleConverter(_ndjson.int32_converter, _ndjson.string_converter).from_json(json_object)

    def _read_stream_of_type_variants(self) -> collections.abc.Iterable[ImageFloatOrImageDouble]:
        converter = _ndjson.UnionConverter(ImageFloatOrImageDouble, [(ImageFloatOrImageDouble.ImageFloat, _ndjson.NDArrayConverter(_ndjson.float32_converter, 2), [dict]), (ImageFloatOrImageDouble.ImageDouble, _ndjson.NDArrayConverter(_ndjson.float64_converter, 2), [dict])], False)
        while (json_object := self._read_json_line("streamOfTypeVariants", False)) is not None:
            yield converter.from_json(json_object)

class NDJsonAdvancedGenericsWriter(_ndjson.NDJsonProtocolWriter, AdvancedGenericsWriterBase):
    """NDJson writer for the AdvancedGenerics protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        AdvancedGenericsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, AdvancedGenericsWriterBase.schema)

    def _write_float_image_image(self, value: Image[np.object_]) -> None:
        json_value = _ndjson.NDArrayConverter(_ndjson.NDArrayConverter(_ndjson.float32_converter, 2), 2).to_json(value)
        self._write_json_line({"floatImageImage": json_value})

    def _write_generic_record_1(self, value: GenericRecord[yardl.Int32, str, np.object_]) -> None:
        json_value = _GenericRecordConverter(_ndjson.int32_converter, _ndjson.string_converter).to_json(value)
        self._write_json_line({"genericRecord1": json_value})

    def _write_tuple_of_optionals(self, value: MyTuple[typing.Optional[yardl.Int32], typing.Optional[str]]) -> None:
        json_value = _MyTupleConverter(_ndjson.OptionalConverter(_ndjson.int32_converter), _ndjson.OptionalConverter(_ndjson.string_converter)).to_json(value)
        self._write_json_line({"tupleOfOptionals": json_value})

    def _write_tuple_of_optionals_alternate_syntax(self, value: MyTuple[typing.Optional[yardl.Int32], typing.Optional[str]]) -> None:
        json_value = _MyTupleConverter(_ndjson.OptionalConverter(_ndjson.int32_converter), _ndjson.OptionalConverter(_ndjson.string_converter)).to_json(value)
        self._write_json_line({"tupleOfOptionalsAlternateSyntax": json_value})

    def _write_tuple_of_vectors(self, value: MyTuple[list[yardl.Int32], list[yardl.Float32]]) -> None:
        json_value = _MyTupleConverter(_ndjson.VectorConverter(_ndjson.int32_converter), _ndjson.VectorConverter(_ndjson.float32_converter)).to_json(value)
        self._write_json_line({"tupleOfVectors": json_value})


class NDJsonAdvancedGenericsReader(_ndjson.NDJsonProtocolReader, AdvancedGenericsReaderBase):
    """NDJson writer for the AdvancedGenerics protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        AdvancedGenericsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, AdvancedGenericsReaderBase.schema)

    def _read_float_image_image(self) -> Image[np.object_]:
        json_object = self._read_json_line("floatImageImage", True)
        return _ndjson.NDArrayConverter(_ndjson.NDArrayConverter(_ndjson.float32_converter, 2), 2).from_json(json_object)

    def _read_generic_record_1(self) -> GenericRecord[yardl.Int32, str, np.object_]:
        json_object = self._read_json_line("genericRecord1", True)
        return _GenericRecordConverter(_ndjson.int32_converter, _ndjson.string_converter).from_json(json_object)

    def _read_tuple_of_optionals(self) -> MyTuple[typing.Optional[yardl.Int32], typing.Optional[str]]:
        json_object = self._read_json_line("tupleOfOptionals", True)
        return _MyTupleConverter(_ndjson.OptionalConverter(_ndjson.int32_converter), _ndjson.OptionalConverter(_ndjson.string_converter)).from_json(json_object)

    def _read_tuple_of_optionals_alternate_syntax(self) -> MyTuple[typing.Optional[yardl.Int32], typing.Optional[str]]:
        json_object = self._read_json_line("tupleOfOptionalsAlternateSyntax", True)
        return _MyTupleConverter(_ndjson.OptionalConverter(_ndjson.int32_converter), _ndjson.OptionalConverter(_ndjson.string_converter)).from_json(json_object)

    def _read_tuple_of_vectors(self) -> MyTuple[list[yardl.Int32], list[yardl.Float32]]:
        json_object = self._read_json_line("tupleOfVectors", True)
        return _MyTupleConverter(_ndjson.VectorConverter(_ndjson.int32_converter), _ndjson.VectorConverter(_ndjson.float32_converter)).from_json(json_object)

class NDJsonAliasesWriter(_ndjson.NDJsonProtocolWriter, AliasesWriterBase):
    """NDJson writer for the Aliases protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        AliasesWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, AliasesWriterBase.schema)

    def _write_aliased_string(self, value: AliasedString) -> None:
        json_value = _ndjson.string_converter.to_json(value)
        self._write_json_line({"aliasedString": json_value})

    def _write_aliased_enum(self, value: AliasedEnum) -> None:
        json_value = _ndjson.EnumConverter(Fruits, yardl.Int32, _fruits_name_to_value_map, _fruits_value_to_name_map).to_json(value)
        self._write_json_line({"aliasedEnum": json_value})

    def _write_aliased_open_generic(self, value: AliasedOpenGeneric[AliasedString, AliasedEnum]) -> None:
        json_value = _MyTupleConverter(_ndjson.string_converter, _ndjson.EnumConverter(Fruits, yardl.Int32, _fruits_name_to_value_map, _fruits_value_to_name_map)).to_json(value)
        self._write_json_line({"aliasedOpenGeneric": json_value})

    def _write_aliased_closed_generic(self, value: AliasedClosedGeneric) -> None:
        json_value = _MyTupleConverter(_ndjson.string_converter, _ndjson.EnumConverter(Fruits, yardl.Int32, _fruits_name_to_value_map, _fruits_value_to_name_map)).to_json(value)
        self._write_json_line({"aliasedClosedGeneric": json_value})

    def _write_aliased_optional(self, value: AliasedOptional) -> None:
        json_value = _ndjson.OptionalConverter(_ndjson.int32_converter).to_json(value)
        self._write_json_line({"aliasedOptional": json_value})

    def _write_aliased_generic_optional(self, value: AliasedGenericOptional[yardl.Float32]) -> None:
        json_value = _ndjson.OptionalConverter(_ndjson.float32_converter).to_json(value)
        self._write_json_line({"aliasedGenericOptional": json_value})

    def _write_aliased_generic_union_2(self, value: AliasedGenericUnion2[AliasedString, AliasedEnum]) -> None:
        json_value = _ndjson.UnionConverter(AliasedGenericUnion2, [(AliasedGenericUnion2.T1, _ndjson.string_converter, [str]), (AliasedGenericUnion2.T2, _ndjson.EnumConverter(Fruits, yardl.Int32, _fruits_name_to_value_map, _fruits_value_to_name_map), [int, float, str])], False).to_json(value)
        self._write_json_line({"aliasedGenericUnion2": json_value})

    def _write_aliased_generic_vector(self, value: AliasedGenericVector[yardl.Float32]) -> None:
        json_value = _ndjson.VectorConverter(_ndjson.float32_converter).to_json(value)
        self._write_json_line({"aliasedGenericVector": json_value})

    def _write_aliased_generic_fixed_vector(self, value: AliasedGenericFixedVector[yardl.Float32]) -> None:
        json_value = _ndjson.FixedVectorConverter(_ndjson.float32_converter, 3).to_json(value)
        self._write_json_line({"aliasedGenericFixedVector": json_value})

    def _write_stream_of_aliased_generic_union_2(self, value: collections.abc.Iterable[AliasedGenericUnion2[AliasedString, AliasedEnum]]) -> None:
        converter = _ndjson.UnionConverter(AliasedGenericUnion2, [(AliasedGenericUnion2.T1, _ndjson.string_converter, [str]), (AliasedGenericUnion2.T2, _ndjson.EnumConverter(Fruits, yardl.Int32, _fruits_name_to_value_map, _fruits_value_to_name_map), [int, float, str])], False)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"streamOfAliasedGenericUnion2": json_item})


class NDJsonAliasesReader(_ndjson.NDJsonProtocolReader, AliasesReaderBase):
    """NDJson writer for the Aliases protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        AliasesReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, AliasesReaderBase.schema)

    def _read_aliased_string(self) -> AliasedString:
        json_object = self._read_json_line("aliasedString", True)
        return _ndjson.string_converter.from_json(json_object)

    def _read_aliased_enum(self) -> AliasedEnum:
        json_object = self._read_json_line("aliasedEnum", True)
        return _ndjson.EnumConverter(Fruits, yardl.Int32, _fruits_name_to_value_map, _fruits_value_to_name_map).from_json(json_object)

    def _read_aliased_open_generic(self) -> AliasedOpenGeneric[AliasedString, AliasedEnum]:
        json_object = self._read_json_line("aliasedOpenGeneric", True)
        return _MyTupleConverter(_ndjson.string_converter, _ndjson.EnumConverter(Fruits, yardl.Int32, _fruits_name_to_value_map, _fruits_value_to_name_map)).from_json(json_object)

    def _read_aliased_closed_generic(self) -> AliasedClosedGeneric:
        json_object = self._read_json_line("aliasedClosedGeneric", True)
        return _MyTupleConverter(_ndjson.string_converter, _ndjson.EnumConverter(Fruits, yardl.Int32, _fruits_name_to_value_map, _fruits_value_to_name_map)).from_json(json_object)

    def _read_aliased_optional(self) -> AliasedOptional:
        json_object = self._read_json_line("aliasedOptional", True)
        return _ndjson.OptionalConverter(_ndjson.int32_converter).from_json(json_object)

    def _read_aliased_generic_optional(self) -> AliasedGenericOptional[yardl.Float32]:
        json_object = self._read_json_line("aliasedGenericOptional", True)
        return _ndjson.OptionalConverter(_ndjson.float32_converter).from_json(json_object)

    def _read_aliased_generic_union_2(self) -> AliasedGenericUnion2[AliasedString, AliasedEnum]:
        json_object = self._read_json_line("aliasedGenericUnion2", True)
        return _ndjson.UnionConverter(AliasedGenericUnion2, [(AliasedGenericUnion2.T1, _ndjson.string_converter, [str]), (AliasedGenericUnion2.T2, _ndjson.EnumConverter(Fruits, yardl.Int32, _fruits_name_to_value_map, _fruits_value_to_name_map), [int, float, str])], False).from_json(json_object)

    def _read_aliased_generic_vector(self) -> AliasedGenericVector[yardl.Float32]:
        json_object = self._read_json_line("aliasedGenericVector", True)
        return _ndjson.VectorConverter(_ndjson.float32_converter).from_json(json_object)

    def _read_aliased_generic_fixed_vector(self) -> AliasedGenericFixedVector[yardl.Float32]:
        json_object = self._read_json_line("aliasedGenericFixedVector", True)
        return _ndjson.FixedVectorConverter(_ndjson.float32_converter, 3).from_json(json_object)

    def _read_stream_of_aliased_generic_union_2(self) -> collections.abc.Iterable[AliasedGenericUnion2[AliasedString, AliasedEnum]]:
        converter = _ndjson.UnionConverter(AliasedGenericUnion2, [(AliasedGenericUnion2.T1, _ndjson.string_converter, [str]), (AliasedGenericUnion2.T2, _ndjson.EnumConverter(Fruits, yardl.Int32, _fruits_name_to_value_map, _fruits_value_to_name_map), [int, float, str])], False)
        while (json_object := self._read_json_line("streamOfAliasedGenericUnion2", False)) is not None:
            yield converter.from_json(json_object)

class NDJsonStreamsOfAliasedUnionsWriter(_ndjson.NDJsonProtocolWriter, StreamsOfAliasedUnionsWriterBase):
    """NDJson writer for the StreamsOfAliasedUnions protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        StreamsOfAliasedUnionsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, StreamsOfAliasedUnionsWriterBase.schema)

    def _write_int_or_simple_record(self, value: collections.abc.Iterable[AliasedIntOrSimpleRecord]) -> None:
        converter = _ndjson.UnionConverter(AliasedIntOrSimpleRecord, [(AliasedIntOrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (AliasedIntOrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"intOrSimpleRecord": json_item})

    def _write_nullable_int_or_simple_record(self, value: collections.abc.Iterable[AliasedNullableIntSimpleRecord]) -> None:
        converter = _ndjson.UnionConverter(AliasedNullableIntSimpleRecord, [None, (AliasedNullableIntSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (AliasedNullableIntSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"nullableIntOrSimpleRecord": json_item})


class NDJsonStreamsOfAliasedUnionsReader(_ndjson.NDJsonProtocolReader, StreamsOfAliasedUnionsReaderBase):
    """NDJson writer for the StreamsOfAliasedUnions protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        StreamsOfAliasedUnionsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, StreamsOfAliasedUnionsReaderBase.schema)

    def _read_int_or_simple_record(self) -> collections.abc.Iterable[AliasedIntOrSimpleRecord]:
        converter = _ndjson.UnionConverter(AliasedIntOrSimpleRecord, [(AliasedIntOrSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (AliasedIntOrSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        while (json_object := self._read_json_line("intOrSimpleRecord", False)) is not None:
            yield converter.from_json(json_object)

    def _read_nullable_int_or_simple_record(self) -> collections.abc.Iterable[AliasedNullableIntSimpleRecord]:
        converter = _ndjson.UnionConverter(AliasedNullableIntSimpleRecord, [None, (AliasedNullableIntSimpleRecord.Int32, _ndjson.int32_converter, [int, float]), (AliasedNullableIntSimpleRecord.SimpleRecord, _SimpleRecordConverter(), [dict])], True)
        while (json_object := self._read_json_line("nullableIntOrSimpleRecord", False)) is not None:
            yield converter.from_json(json_object)

class NDJsonProtocolWithComputedFieldsWriter(_ndjson.NDJsonProtocolWriter, ProtocolWithComputedFieldsWriterBase):
    """NDJson writer for the ProtocolWithComputedFields protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        ProtocolWithComputedFieldsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, ProtocolWithComputedFieldsWriterBase.schema)

    def _write_record_with_computed_fields(self, value: RecordWithComputedFields) -> None:
        json_value = _RecordWithComputedFieldsConverter().to_json(value)
        self._write_json_line({"recordWithComputedFields": json_value})


class NDJsonProtocolWithComputedFieldsReader(_ndjson.NDJsonProtocolReader, ProtocolWithComputedFieldsReaderBase):
    """NDJson writer for the ProtocolWithComputedFields protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        ProtocolWithComputedFieldsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, ProtocolWithComputedFieldsReaderBase.schema)

    def _read_record_with_computed_fields(self) -> RecordWithComputedFields:
        json_object = self._read_json_line("recordWithComputedFields", True)
        return _RecordWithComputedFieldsConverter().from_json(json_object)

class NDJsonProtocolWithKeywordStepsWriter(_ndjson.NDJsonProtocolWriter, ProtocolWithKeywordStepsWriterBase):
    """NDJson writer for the ProtocolWithKeywordSteps protocol."""


    def __init__(self, stream: typing.Union[typing.TextIO, str]) -> None:
        ProtocolWithKeywordStepsWriterBase.__init__(self)
        _ndjson.NDJsonProtocolWriter.__init__(self, stream, ProtocolWithKeywordStepsWriterBase.schema)

    def _write_int(self, value: collections.abc.Iterable[RecordWithKeywordFields]) -> None:
        converter = _RecordWithKeywordFieldsConverter()
        for item in value:
            json_item = converter.to_json(item)
            self._write_json_line({"int": json_item})

    def _write_float(self, value: EnumWithKeywordSymbols) -> None:
        json_value = _ndjson.EnumConverter(EnumWithKeywordSymbols, yardl.Int32, _enum_with_keyword_symbols_name_to_value_map, _enum_with_keyword_symbols_value_to_name_map).to_json(value)
        self._write_json_line({"float": json_value})


class NDJsonProtocolWithKeywordStepsReader(_ndjson.NDJsonProtocolReader, ProtocolWithKeywordStepsReaderBase):
    """NDJson writer for the ProtocolWithKeywordSteps protocol."""


    def __init__(self, stream: typing.Union[io.BufferedReader, typing.TextIO, str]) -> None:
        ProtocolWithKeywordStepsReaderBase.__init__(self)
        _ndjson.NDJsonProtocolReader.__init__(self, stream, ProtocolWithKeywordStepsReaderBase.schema)

    def _read_int(self) -> collections.abc.Iterable[RecordWithKeywordFields]:
        converter = _RecordWithKeywordFieldsConverter()
        while (json_object := self._read_json_line("int", False)) is not None:
            yield converter.from_json(json_object)

    def _read_float(self) -> EnumWithKeywordSymbols:
        json_object = self._read_json_line("float", True)
        return _ndjson.EnumConverter(EnumWithKeywordSymbols, yardl.Int32, _enum_with_keyword_symbols_name_to_value_map, _enum_with_keyword_symbols_value_to_name_map).from_json(json_object)


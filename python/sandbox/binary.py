# This file was generated by the "yardl" tool. DO NOT EDIT.


import abc
import collections.abc
import datetime
import typing
import numpy as np

from . import *
from . import _binary

class BinaryP1Writer(P1WriterBase, _binary.BinaryProtocolWriter):
    """Binary writer for the P1 protocol."""

    def __init__(self, stream: typing.BinaryIO | str) -> None:
        P1WriterBase.__init__(self)
        _binary.BinaryProtocolWriter.__init__(self, stream, P1WriterBase._schema)

    def _write_an_int(self, value: int) -> None:
        _binary.write_uint32(self._stream, value)

    def _write_a_stream(self, value: collections.abc.Iterable[int]) -> None:
        _binary.StreamWriter(_binary.write_int32)(self._stream, value)

    def _write_optional(self, value: int | None) -> None:
        _binary.OptionalWriter(_binary.write_int32)(self._stream, value)

    def _write_union(self, value: int | str | None) -> None:
        _binary.UnionWriter([(None, _binary.write_none), (int, _binary.write_int32), (str, _binary.write_string)])(self._stream, value)


class BinaryP1Reader(P1ReaderBase):
    """Binary writer for the P1 protocol."""

    def _read_an_int(self) -> int:
        raise NotImplementedError()

    def _read_a_stream(self) -> collections.abc.Iterable[int]:
        raise NotImplementedError()

    def _read_optional(self) -> int | None:
        raise NotImplementedError()

    def _read_union(self) -> int | str | None:
        raise NotImplementedError()


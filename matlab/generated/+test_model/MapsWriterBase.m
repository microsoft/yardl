% This file was generated by the "yardl" tool. DO NOT EDIT.

% Abstract writer for protocol Maps
classdef (Abstract) MapsWriterBase < handle
  properties (Access=protected)
    state_
  end

  methods
    function self = MapsWriterBase()
      self.state_ = 0;
    end

    function close(self)
      self.close_();
      if self.state_ ~= 5
        expected_method = self.state_to_method_name_(self.state_);
        throw(yardl.ProtocolError("Protocol writer closed before all steps were called. Expected call to '%s'.", expected_method));
      end
    end

    % Ordinal 0
    function write_string_to_int(self, value)
      if self.state_ ~= 0
        self.raise_unexpected_state_(0);
      end

      self.write_string_to_int_(value);
      self.state_ = 1;
    end

    % Ordinal 1
    function write_int_to_string(self, value)
      if self.state_ ~= 1
        self.raise_unexpected_state_(1);
      end

      self.write_int_to_string_(value);
      self.state_ = 2;
    end

    % Ordinal 2
    function write_string_to_union(self, value)
      if self.state_ ~= 2
        self.raise_unexpected_state_(2);
      end

      self.write_string_to_union_(value);
      self.state_ = 3;
    end

    % Ordinal 3
    function write_aliased_generic(self, value)
      if self.state_ ~= 3
        self.raise_unexpected_state_(3);
      end

      self.write_aliased_generic_(value);
      self.state_ = 4;
    end

    % Ordinal 4
    function write_records(self, value)
      if self.state_ ~= 4
        self.raise_unexpected_state_(4);
      end

      self.write_records_(value);
      self.state_ = 5;
    end
  end

  methods (Static)
    function res = schema()
      res = string('{"protocol":{"name":"Maps","sequence":[{"name":"stringToInt","type":{"map":{"keys":"string","values":"int32"}}},{"name":"intToString","type":{"map":{"keys":"int32","values":"string"}}},{"name":"stringToUnion","type":{"map":{"keys":"string","values":[{"tag":"string","type":"string"},{"tag":"int32","type":"int32"}]}}},{"name":"aliasedGeneric","type":{"name":"BasicTypes.AliasedMap","typeArguments":["string","int32"]}},{"name":"records","type":{"vector":{"items":"TestModel.RecordWithMaps"}}}]},"types":[{"name":"AliasedMap","typeParameters":["K","V"],"type":{"map":{"keys":"K","values":"V"}}},{"name":"RecordWithMaps","fields":[{"name":"set1","type":{"map":{"keys":"uint32","values":"uint32"}}},{"name":"set2","type":{"map":{"keys":"int32","values":"bool"}}}]}]}');
    end
  end

  methods (Abstract, Access=protected)
    write_string_to_int_(self, value)
    write_int_to_string_(self, value)
    write_string_to_union_(self, value)
    write_aliased_generic_(self, value)
    write_records_(self, value)

    end_stream_(self)
    close_(self)
  end

  methods (Access=private)
    function raise_unexpected_state_(self, actual)
      expected_method = self.state_to_method_name_(self.state_);
      actual_method = self.state_to_method_name_(actual);
      throw(yardl.ProtocolError("Expected call to '%s' but received call to '%s'", expected_method, actual_method));
    end

    function name = state_to_method_name_(self, state)
      if state == 0
        name = "write_string_to_int";
      elseif state == 1
        name = "write_int_to_string";
      elseif state == 2
        name = "write_string_to_union";
      elseif state == 3
        name = "write_aliased_generic";
      elseif state == 4
        name = "write_records";
      else
        name = '<unknown>';
      end
    end
  end
end

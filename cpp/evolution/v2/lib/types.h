// This file was generated by the "yardl" tool. DO NOT EDIT.

#pragma once
#include <array>
#include <complex>
#include <optional>
#include <unordered_map>
#include <variant>
#include <vector>

#include "yardl/yardl.h"

namespace evo_test {
struct Header {
  std::variant<std::string, int64_t> subject{};
  std::unordered_map<std::string, std::vector<std::string>> meta{};
  double weight{};

  bool operator==(const Header& other) const {
    return subject == other.subject &&
      meta == other.meta &&
      weight == other.weight;
  }

  bool operator!=(const Header& other) const {
    return !(*this == other);
  }
};

struct Sample {
  yardl::DateTime timestamp{};
  std::vector<int32_t> data{};

  bool operator==(const Sample& other) const {
    return timestamp == other.timestamp &&
      data == other.data;
  }

  bool operator!=(const Sample& other) const {
    return !(*this == other);
  }
};

struct Signature {
  std::string name{};
  std::string email{};
  std::string number{};

  bool operator==(const Signature& other) const {
    return name == other.name &&
      email == other.email &&
      number == other.number;
  }

  bool operator!=(const Signature& other) const {
    return !(*this == other);
  }
};

struct Footer {
  evo_test::Signature signature{};

  bool operator==(const Footer& other) const {
    return signature == other.signature;
  }

  bool operator!=(const Footer& other) const {
    return !(*this == other);
  }
};

struct NewRecord {
  yardl::DynamicNDArray<double> stuff{};

  bool operator==(const NewRecord& other) const {
    return stuff == other.stuff;
  }

  bool operator!=(const NewRecord& other) const {
    return !(*this == other);
  }
};

} // namespace evo_test

